// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

class NativeLibrary {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeLibrary(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativeLibrary.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void xmlCheckVersion(
    int version,
  ) {
    return _xmlCheckVersion(
      version,
    );
  }

  late final _xmlCheckVersionPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>(
          'xmlCheckVersion');
  late final _xmlCheckVersion =
      _xmlCheckVersionPtr.asFunction<void Function(int)>();

  ffi.Pointer<xmlChar> xmlStrdup(
    ffi.Pointer<xmlChar> cur,
  ) {
    return _xmlStrdup(
      cur,
    );
  }

  late final _xmlStrdupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<xmlChar> Function(ffi.Pointer<xmlChar>)>>('xmlStrdup');
  late final _xmlStrdup = _xmlStrdupPtr
      .asFunction<ffi.Pointer<xmlChar> Function(ffi.Pointer<xmlChar>)>();

  ffi.Pointer<xmlChar> xmlStrndup(
    ffi.Pointer<xmlChar> cur,
    int len,
  ) {
    return _xmlStrndup(
      cur,
      len,
    );
  }

  late final _xmlStrndupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<xmlChar> Function(
              ffi.Pointer<xmlChar>, ffi.Int)>>('xmlStrndup');
  late final _xmlStrndup = _xmlStrndupPtr
      .asFunction<ffi.Pointer<xmlChar> Function(ffi.Pointer<xmlChar>, int)>();

  ffi.Pointer<xmlChar> xmlCharStrndup(
    ffi.Pointer<ffi.Char> cur,
    int len,
  ) {
    return _xmlCharStrndup(
      cur,
      len,
    );
  }

  late final _xmlCharStrndupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<xmlChar> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('xmlCharStrndup');
  late final _xmlCharStrndup = _xmlCharStrndupPtr
      .asFunction<ffi.Pointer<xmlChar> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<xmlChar> xmlCharStrdup(
    ffi.Pointer<ffi.Char> cur,
  ) {
    return _xmlCharStrdup(
      cur,
    );
  }

  late final _xmlCharStrdupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<xmlChar> Function(
              ffi.Pointer<ffi.Char>)>>('xmlCharStrdup');
  late final _xmlCharStrdup = _xmlCharStrdupPtr
      .asFunction<ffi.Pointer<xmlChar> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<xmlChar> xmlStrsub(
    ffi.Pointer<xmlChar> str,
    int start,
    int len,
  ) {
    return _xmlStrsub(
      str,
      start,
      len,
    );
  }

  late final _xmlStrsubPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<xmlChar> Function(
              ffi.Pointer<xmlChar>, ffi.Int, ffi.Int)>>('xmlStrsub');
  late final _xmlStrsub = _xmlStrsubPtr.asFunction<
      ffi.Pointer<xmlChar> Function(ffi.Pointer<xmlChar>, int, int)>();

  ffi.Pointer<xmlChar> xmlStrchr(
    ffi.Pointer<xmlChar> str,
    int val,
  ) {
    return _xmlStrchr(
      str,
      val,
    );
  }

  late final _xmlStrchrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<xmlChar> Function(
              ffi.Pointer<xmlChar>, xmlChar)>>('xmlStrchr');
  late final _xmlStrchr = _xmlStrchrPtr
      .asFunction<ffi.Pointer<xmlChar> Function(ffi.Pointer<xmlChar>, int)>();

  ffi.Pointer<xmlChar> xmlStrstr(
    ffi.Pointer<xmlChar> str,
    ffi.Pointer<xmlChar> val,
  ) {
    return _xmlStrstr(
      str,
      val,
    );
  }

  late final _xmlStrstrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<xmlChar> Function(
              ffi.Pointer<xmlChar>, ffi.Pointer<xmlChar>)>>('xmlStrstr');
  late final _xmlStrstr = _xmlStrstrPtr.asFunction<
      ffi.Pointer<xmlChar> Function(
          ffi.Pointer<xmlChar>, ffi.Pointer<xmlChar>)>();

  ffi.Pointer<xmlChar> xmlStrcasestr(
    ffi.Pointer<xmlChar> str,
    ffi.Pointer<xmlChar> val,
  ) {
    return _xmlStrcasestr(
      str,
      val,
    );
  }

  late final _xmlStrcasestrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<xmlChar> Function(
              ffi.Pointer<xmlChar>, ffi.Pointer<xmlChar>)>>('xmlStrcasestr');
  late final _xmlStrcasestr = _xmlStrcasestrPtr.asFunction<
      ffi.Pointer<xmlChar> Function(
          ffi.Pointer<xmlChar>, ffi.Pointer<xmlChar>)>();

  int xmlStrcmp(
    ffi.Pointer<xmlChar> str1,
    ffi.Pointer<xmlChar> str2,
  ) {
    return _xmlStrcmp(
      str1,
      str2,
    );
  }

  late final _xmlStrcmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<xmlChar>, ffi.Pointer<xmlChar>)>>('xmlStrcmp');
  late final _xmlStrcmp = _xmlStrcmpPtr
      .asFunction<int Function(ffi.Pointer<xmlChar>, ffi.Pointer<xmlChar>)>();

  int xmlStrncmp(
    ffi.Pointer<xmlChar> str1,
    ffi.Pointer<xmlChar> str2,
    int len,
  ) {
    return _xmlStrncmp(
      str1,
      str2,
      len,
    );
  }

  late final _xmlStrncmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<xmlChar>, ffi.Pointer<xmlChar>,
              ffi.Int)>>('xmlStrncmp');
  late final _xmlStrncmp = _xmlStrncmpPtr.asFunction<
      int Function(ffi.Pointer<xmlChar>, ffi.Pointer<xmlChar>, int)>();

  int xmlStrcasecmp(
    ffi.Pointer<xmlChar> str1,
    ffi.Pointer<xmlChar> str2,
  ) {
    return _xmlStrcasecmp(
      str1,
      str2,
    );
  }

  late final _xmlStrcasecmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<xmlChar>, ffi.Pointer<xmlChar>)>>('xmlStrcasecmp');
  late final _xmlStrcasecmp = _xmlStrcasecmpPtr
      .asFunction<int Function(ffi.Pointer<xmlChar>, ffi.Pointer<xmlChar>)>();

  int xmlStrncasecmp(
    ffi.Pointer<xmlChar> str1,
    ffi.Pointer<xmlChar> str2,
    int len,
  ) {
    return _xmlStrncasecmp(
      str1,
      str2,
      len,
    );
  }

  late final _xmlStrncasecmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<xmlChar>, ffi.Pointer<xmlChar>,
              ffi.Int)>>('xmlStrncasecmp');
  late final _xmlStrncasecmp = _xmlStrncasecmpPtr.asFunction<
      int Function(ffi.Pointer<xmlChar>, ffi.Pointer<xmlChar>, int)>();

  int xmlStrEqual(
    ffi.Pointer<xmlChar> str1,
    ffi.Pointer<xmlChar> str2,
  ) {
    return _xmlStrEqual(
      str1,
      str2,
    );
  }

  late final _xmlStrEqualPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<xmlChar>, ffi.Pointer<xmlChar>)>>('xmlStrEqual');
  late final _xmlStrEqual = _xmlStrEqualPtr
      .asFunction<int Function(ffi.Pointer<xmlChar>, ffi.Pointer<xmlChar>)>();

  int xmlStrQEqual(
    ffi.Pointer<xmlChar> pref,
    ffi.Pointer<xmlChar> name,
    ffi.Pointer<xmlChar> str,
  ) {
    return _xmlStrQEqual(
      pref,
      name,
      str,
    );
  }

  late final _xmlStrQEqualPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<xmlChar>, ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>)>>('xmlStrQEqual');
  late final _xmlStrQEqual = _xmlStrQEqualPtr.asFunction<
      int Function(
          ffi.Pointer<xmlChar>, ffi.Pointer<xmlChar>, ffi.Pointer<xmlChar>)>();

  int xmlStrlen(
    ffi.Pointer<xmlChar> str,
  ) {
    return _xmlStrlen(
      str,
    );
  }

  late final _xmlStrlenPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<xmlChar>)>>(
          'xmlStrlen');
  late final _xmlStrlen =
      _xmlStrlenPtr.asFunction<int Function(ffi.Pointer<xmlChar>)>();

  ffi.Pointer<xmlChar> xmlStrcat(
    ffi.Pointer<xmlChar> cur,
    ffi.Pointer<xmlChar> add,
  ) {
    return _xmlStrcat(
      cur,
      add,
    );
  }

  late final _xmlStrcatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<xmlChar> Function(
              ffi.Pointer<xmlChar>, ffi.Pointer<xmlChar>)>>('xmlStrcat');
  late final _xmlStrcat = _xmlStrcatPtr.asFunction<
      ffi.Pointer<xmlChar> Function(
          ffi.Pointer<xmlChar>, ffi.Pointer<xmlChar>)>();

  ffi.Pointer<xmlChar> xmlStrncat(
    ffi.Pointer<xmlChar> cur,
    ffi.Pointer<xmlChar> add,
    int len,
  ) {
    return _xmlStrncat(
      cur,
      add,
      len,
    );
  }

  late final _xmlStrncatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<xmlChar> Function(ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>, ffi.Int)>>('xmlStrncat');
  late final _xmlStrncat = _xmlStrncatPtr.asFunction<
      ffi.Pointer<xmlChar> Function(
          ffi.Pointer<xmlChar>, ffi.Pointer<xmlChar>, int)>();

  ffi.Pointer<xmlChar> xmlStrncatNew(
    ffi.Pointer<xmlChar> str1,
    ffi.Pointer<xmlChar> str2,
    int len,
  ) {
    return _xmlStrncatNew(
      str1,
      str2,
      len,
    );
  }

  late final _xmlStrncatNewPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<xmlChar> Function(ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>, ffi.Int)>>('xmlStrncatNew');
  late final _xmlStrncatNew = _xmlStrncatNewPtr.asFunction<
      ffi.Pointer<xmlChar> Function(
          ffi.Pointer<xmlChar>, ffi.Pointer<xmlChar>, int)>();

  int xmlStrPrintf(
    ffi.Pointer<xmlChar> buf,
    int len,
    ffi.Pointer<ffi.Char> msg,
  ) {
    return _xmlStrPrintf(
      buf,
      len,
      msg,
    );
  }

  late final _xmlStrPrintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<xmlChar>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('xmlStrPrintf');
  late final _xmlStrPrintf = _xmlStrPrintfPtr.asFunction<
      int Function(ffi.Pointer<xmlChar>, int, ffi.Pointer<ffi.Char>)>();

  int xmlStrVPrintf(
    ffi.Pointer<xmlChar> buf,
    int len,
    ffi.Pointer<ffi.Char> msg,
    ffi.Pointer<__va_list_tag> ap,
  ) {
    return _xmlStrVPrintf(
      buf,
      len,
      msg,
      ap,
    );
  }

  late final _xmlStrVPrintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<xmlChar>, ffi.Int, ffi.Pointer<ffi.Char>,
              ffi.Pointer<__va_list_tag>)>>('xmlStrVPrintf');
  late final _xmlStrVPrintf = _xmlStrVPrintfPtr.asFunction<
      int Function(ffi.Pointer<xmlChar>, int, ffi.Pointer<ffi.Char>,
          ffi.Pointer<__va_list_tag>)>();

  int xmlGetUTF8Char(
    ffi.Pointer<ffi.UnsignedChar> utf,
    ffi.Pointer<ffi.Int> len,
  ) {
    return _xmlGetUTF8Char(
      utf,
      len,
    );
  }

  late final _xmlGetUTF8CharPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.Int>)>>('xmlGetUTF8Char');
  late final _xmlGetUTF8Char = _xmlGetUTF8CharPtr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedChar>, ffi.Pointer<ffi.Int>)>();

  int xmlCheckUTF8(
    ffi.Pointer<ffi.UnsignedChar> utf,
  ) {
    return _xmlCheckUTF8(
      utf,
    );
  }

  late final _xmlCheckUTF8Ptr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.UnsignedChar>)>>(
      'xmlCheckUTF8');
  late final _xmlCheckUTF8 = _xmlCheckUTF8Ptr
      .asFunction<int Function(ffi.Pointer<ffi.UnsignedChar>)>();

  int xmlUTF8Strsize(
    ffi.Pointer<xmlChar> utf,
    int len,
  ) {
    return _xmlUTF8Strsize(
      utf,
      len,
    );
  }

  late final _xmlUTF8StrsizePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<xmlChar>, ffi.Int)>>(
      'xmlUTF8Strsize');
  late final _xmlUTF8Strsize =
      _xmlUTF8StrsizePtr.asFunction<int Function(ffi.Pointer<xmlChar>, int)>();

  ffi.Pointer<xmlChar> xmlUTF8Strndup(
    ffi.Pointer<xmlChar> utf,
    int len,
  ) {
    return _xmlUTF8Strndup(
      utf,
      len,
    );
  }

  late final _xmlUTF8StrndupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<xmlChar> Function(
              ffi.Pointer<xmlChar>, ffi.Int)>>('xmlUTF8Strndup');
  late final _xmlUTF8Strndup = _xmlUTF8StrndupPtr
      .asFunction<ffi.Pointer<xmlChar> Function(ffi.Pointer<xmlChar>, int)>();

  ffi.Pointer<xmlChar> xmlUTF8Strpos(
    ffi.Pointer<xmlChar> utf,
    int pos,
  ) {
    return _xmlUTF8Strpos(
      utf,
      pos,
    );
  }

  late final _xmlUTF8StrposPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<xmlChar> Function(
              ffi.Pointer<xmlChar>, ffi.Int)>>('xmlUTF8Strpos');
  late final _xmlUTF8Strpos = _xmlUTF8StrposPtr
      .asFunction<ffi.Pointer<xmlChar> Function(ffi.Pointer<xmlChar>, int)>();

  int xmlUTF8Strloc(
    ffi.Pointer<xmlChar> utf,
    ffi.Pointer<xmlChar> utfchar,
  ) {
    return _xmlUTF8Strloc(
      utf,
      utfchar,
    );
  }

  late final _xmlUTF8StrlocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<xmlChar>, ffi.Pointer<xmlChar>)>>('xmlUTF8Strloc');
  late final _xmlUTF8Strloc = _xmlUTF8StrlocPtr
      .asFunction<int Function(ffi.Pointer<xmlChar>, ffi.Pointer<xmlChar>)>();

  ffi.Pointer<xmlChar> xmlUTF8Strsub(
    ffi.Pointer<xmlChar> utf,
    int start,
    int len,
  ) {
    return _xmlUTF8Strsub(
      utf,
      start,
      len,
    );
  }

  late final _xmlUTF8StrsubPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<xmlChar> Function(
              ffi.Pointer<xmlChar>, ffi.Int, ffi.Int)>>('xmlUTF8Strsub');
  late final _xmlUTF8Strsub = _xmlUTF8StrsubPtr.asFunction<
      ffi.Pointer<xmlChar> Function(ffi.Pointer<xmlChar>, int, int)>();

  int xmlUTF8Strlen(
    ffi.Pointer<xmlChar> utf,
  ) {
    return _xmlUTF8Strlen(
      utf,
    );
  }

  late final _xmlUTF8StrlenPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<xmlChar>)>>(
          'xmlUTF8Strlen');
  late final _xmlUTF8Strlen =
      _xmlUTF8StrlenPtr.asFunction<int Function(ffi.Pointer<xmlChar>)>();

  int xmlUTF8Size(
    ffi.Pointer<xmlChar> utf,
  ) {
    return _xmlUTF8Size(
      utf,
    );
  }

  late final _xmlUTF8SizePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<xmlChar>)>>(
          'xmlUTF8Size');
  late final _xmlUTF8Size =
      _xmlUTF8SizePtr.asFunction<int Function(ffi.Pointer<xmlChar>)>();

  int xmlUTF8Charcmp(
    ffi.Pointer<xmlChar> utf1,
    ffi.Pointer<xmlChar> utf2,
  ) {
    return _xmlUTF8Charcmp(
      utf1,
      utf2,
    );
  }

  late final _xmlUTF8CharcmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<xmlChar>, ffi.Pointer<xmlChar>)>>('xmlUTF8Charcmp');
  late final _xmlUTF8Charcmp = _xmlUTF8CharcmpPtr
      .asFunction<int Function(ffi.Pointer<xmlChar>, ffi.Pointer<xmlChar>)>();

  ffi.Pointer<xmlChar> xmlBufContent(
    ffi.Pointer<xmlBuf> buf,
  ) {
    return _xmlBufContent(
      buf,
    );
  }

  late final _xmlBufContentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<xmlChar> Function(ffi.Pointer<xmlBuf>)>>('xmlBufContent');
  late final _xmlBufContent = _xmlBufContentPtr
      .asFunction<ffi.Pointer<xmlChar> Function(ffi.Pointer<xmlBuf>)>();

  ffi.Pointer<xmlChar> xmlBufEnd(
    xmlBufPtr buf,
  ) {
    return _xmlBufEnd(
      buf,
    );
  }

  late final _xmlBufEndPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<xmlChar> Function(xmlBufPtr)>>(
          'xmlBufEnd');
  late final _xmlBufEnd =
      _xmlBufEndPtr.asFunction<ffi.Pointer<xmlChar> Function(xmlBufPtr)>();

  int xmlBufUse(
    xmlBufPtr buf,
  ) {
    return _xmlBufUse(
      buf,
    );
  }

  late final _xmlBufUsePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(xmlBufPtr)>>('xmlBufUse');
  late final _xmlBufUse = _xmlBufUsePtr.asFunction<int Function(xmlBufPtr)>();

  int xmlBufShrink(
    xmlBufPtr buf,
    int len,
  ) {
    return _xmlBufShrink(
      buf,
      len,
    );
  }

  late final _xmlBufShrinkPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(xmlBufPtr, ffi.Size)>>(
          'xmlBufShrink');
  late final _xmlBufShrink =
      _xmlBufShrinkPtr.asFunction<int Function(xmlBufPtr, int)>();

  int xmlInitializeDict() {
    return _xmlInitializeDict();
  }

  late final _xmlInitializeDictPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('xmlInitializeDict');
  late final _xmlInitializeDict =
      _xmlInitializeDictPtr.asFunction<int Function()>();

  xmlDictPtr xmlDictCreate() {
    return _xmlDictCreate();
  }

  late final _xmlDictCreatePtr =
      _lookup<ffi.NativeFunction<xmlDictPtr Function()>>('xmlDictCreate');
  late final _xmlDictCreate =
      _xmlDictCreatePtr.asFunction<xmlDictPtr Function()>();

  int xmlDictSetLimit(
    xmlDictPtr dict,
    int limit,
  ) {
    return _xmlDictSetLimit(
      dict,
      limit,
    );
  }

  late final _xmlDictSetLimitPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(xmlDictPtr, ffi.Size)>>(
          'xmlDictSetLimit');
  late final _xmlDictSetLimit =
      _xmlDictSetLimitPtr.asFunction<int Function(xmlDictPtr, int)>();

  int xmlDictGetUsage(
    xmlDictPtr dict,
  ) {
    return _xmlDictGetUsage(
      dict,
    );
  }

  late final _xmlDictGetUsagePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(xmlDictPtr)>>(
          'xmlDictGetUsage');
  late final _xmlDictGetUsage =
      _xmlDictGetUsagePtr.asFunction<int Function(xmlDictPtr)>();

  xmlDictPtr xmlDictCreateSub(
    xmlDictPtr sub,
  ) {
    return _xmlDictCreateSub(
      sub,
    );
  }

  late final _xmlDictCreateSubPtr =
      _lookup<ffi.NativeFunction<xmlDictPtr Function(xmlDictPtr)>>(
          'xmlDictCreateSub');
  late final _xmlDictCreateSub =
      _xmlDictCreateSubPtr.asFunction<xmlDictPtr Function(xmlDictPtr)>();

  int xmlDictReference(
    xmlDictPtr dict,
  ) {
    return _xmlDictReference(
      dict,
    );
  }

  late final _xmlDictReferencePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(xmlDictPtr)>>(
          'xmlDictReference');
  late final _xmlDictReference =
      _xmlDictReferencePtr.asFunction<int Function(xmlDictPtr)>();

  void xmlDictFree(
    xmlDictPtr dict,
  ) {
    return _xmlDictFree(
      dict,
    );
  }

  late final _xmlDictFreePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(xmlDictPtr)>>('xmlDictFree');
  late final _xmlDictFree =
      _xmlDictFreePtr.asFunction<void Function(xmlDictPtr)>();

  ffi.Pointer<xmlChar> xmlDictLookup(
    xmlDictPtr dict,
    ffi.Pointer<xmlChar> name,
    int len,
  ) {
    return _xmlDictLookup(
      dict,
      name,
      len,
    );
  }

  late final _xmlDictLookupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<xmlChar> Function(
              xmlDictPtr, ffi.Pointer<xmlChar>, ffi.Int)>>('xmlDictLookup');
  late final _xmlDictLookup = _xmlDictLookupPtr.asFunction<
      ffi.Pointer<xmlChar> Function(xmlDictPtr, ffi.Pointer<xmlChar>, int)>();

  ffi.Pointer<xmlChar> xmlDictExists(
    xmlDictPtr dict,
    ffi.Pointer<xmlChar> name,
    int len,
  ) {
    return _xmlDictExists(
      dict,
      name,
      len,
    );
  }

  late final _xmlDictExistsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<xmlChar> Function(
              xmlDictPtr, ffi.Pointer<xmlChar>, ffi.Int)>>('xmlDictExists');
  late final _xmlDictExists = _xmlDictExistsPtr.asFunction<
      ffi.Pointer<xmlChar> Function(xmlDictPtr, ffi.Pointer<xmlChar>, int)>();

  ffi.Pointer<xmlChar> xmlDictQLookup(
    xmlDictPtr dict,
    ffi.Pointer<xmlChar> prefix,
    ffi.Pointer<xmlChar> name,
  ) {
    return _xmlDictQLookup(
      dict,
      prefix,
      name,
    );
  }

  late final _xmlDictQLookupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<xmlChar> Function(xmlDictPtr, ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>)>>('xmlDictQLookup');
  late final _xmlDictQLookup = _xmlDictQLookupPtr.asFunction<
      ffi.Pointer<xmlChar> Function(
          xmlDictPtr, ffi.Pointer<xmlChar>, ffi.Pointer<xmlChar>)>();

  int xmlDictOwns(
    xmlDictPtr dict,
    ffi.Pointer<xmlChar> str,
  ) {
    return _xmlDictOwns(
      dict,
      str,
    );
  }

  late final _xmlDictOwnsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(xmlDictPtr, ffi.Pointer<xmlChar>)>>('xmlDictOwns');
  late final _xmlDictOwns = _xmlDictOwnsPtr
      .asFunction<int Function(xmlDictPtr, ffi.Pointer<xmlChar>)>();

  int xmlDictSize(
    xmlDictPtr dict,
  ) {
    return _xmlDictSize(
      dict,
    );
  }

  late final _xmlDictSizePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(xmlDictPtr)>>('xmlDictSize');
  late final _xmlDictSize =
      _xmlDictSizePtr.asFunction<int Function(xmlDictPtr)>();

  void xmlDictCleanup() {
    return _xmlDictCleanup();
  }

  late final _xmlDictCleanupPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('xmlDictCleanup');
  late final _xmlDictCleanup = _xmlDictCleanupPtr.asFunction<void Function()>();

  xmlRegexpPtr xmlRegexpCompile(
    ffi.Pointer<xmlChar> regexp,
  ) {
    return _xmlRegexpCompile(
      regexp,
    );
  }

  late final _xmlRegexpCompilePtr =
      _lookup<ffi.NativeFunction<xmlRegexpPtr Function(ffi.Pointer<xmlChar>)>>(
          'xmlRegexpCompile');
  late final _xmlRegexpCompile = _xmlRegexpCompilePtr
      .asFunction<xmlRegexpPtr Function(ffi.Pointer<xmlChar>)>();

  void xmlRegFreeRegexp(
    xmlRegexpPtr regexp,
  ) {
    return _xmlRegFreeRegexp(
      regexp,
    );
  }

  late final _xmlRegFreeRegexpPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(xmlRegexpPtr)>>(
          'xmlRegFreeRegexp');
  late final _xmlRegFreeRegexp =
      _xmlRegFreeRegexpPtr.asFunction<void Function(xmlRegexpPtr)>();

  int xmlRegexpExec(
    xmlRegexpPtr comp,
    ffi.Pointer<xmlChar> value,
  ) {
    return _xmlRegexpExec(
      comp,
      value,
    );
  }

  late final _xmlRegexpExecPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              xmlRegexpPtr, ffi.Pointer<xmlChar>)>>('xmlRegexpExec');
  late final _xmlRegexpExec = _xmlRegexpExecPtr
      .asFunction<int Function(xmlRegexpPtr, ffi.Pointer<xmlChar>)>();

  void xmlRegexpPrint(
    ffi.Pointer<FILE> output,
    xmlRegexpPtr regexp,
  ) {
    return _xmlRegexpPrint(
      output,
      regexp,
    );
  }

  late final _xmlRegexpPrintPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<FILE>, xmlRegexpPtr)>>(
      'xmlRegexpPrint');
  late final _xmlRegexpPrint = _xmlRegexpPrintPtr
      .asFunction<void Function(ffi.Pointer<FILE>, xmlRegexpPtr)>();

  int xmlRegexpIsDeterminist(
    xmlRegexpPtr comp,
  ) {
    return _xmlRegexpIsDeterminist(
      comp,
    );
  }

  late final _xmlRegexpIsDeterministPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(xmlRegexpPtr)>>(
          'xmlRegexpIsDeterminist');
  late final _xmlRegexpIsDeterminist =
      _xmlRegexpIsDeterministPtr.asFunction<int Function(xmlRegexpPtr)>();

  xmlRegExecCtxtPtr xmlRegNewExecCtxt(
    xmlRegexpPtr comp,
    xmlRegExecCallbacks callback,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _xmlRegNewExecCtxt(
      comp,
      callback,
      data,
    );
  }

  late final _xmlRegNewExecCtxtPtr = _lookup<
      ffi.NativeFunction<
          xmlRegExecCtxtPtr Function(xmlRegexpPtr, xmlRegExecCallbacks,
              ffi.Pointer<ffi.Void>)>>('xmlRegNewExecCtxt');
  late final _xmlRegNewExecCtxt = _xmlRegNewExecCtxtPtr.asFunction<
      xmlRegExecCtxtPtr Function(
          xmlRegexpPtr, xmlRegExecCallbacks, ffi.Pointer<ffi.Void>)>();

  void xmlRegFreeExecCtxt(
    xmlRegExecCtxtPtr exec,
  ) {
    return _xmlRegFreeExecCtxt(
      exec,
    );
  }

  late final _xmlRegFreeExecCtxtPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(xmlRegExecCtxtPtr)>>(
          'xmlRegFreeExecCtxt');
  late final _xmlRegFreeExecCtxt =
      _xmlRegFreeExecCtxtPtr.asFunction<void Function(xmlRegExecCtxtPtr)>();

  int xmlRegExecPushString(
    xmlRegExecCtxtPtr exec,
    ffi.Pointer<xmlChar> value,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _xmlRegExecPushString(
      exec,
      value,
      data,
    );
  }

  late final _xmlRegExecPushStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(xmlRegExecCtxtPtr, ffi.Pointer<xmlChar>,
              ffi.Pointer<ffi.Void>)>>('xmlRegExecPushString');
  late final _xmlRegExecPushString = _xmlRegExecPushStringPtr.asFunction<
      int Function(
          xmlRegExecCtxtPtr, ffi.Pointer<xmlChar>, ffi.Pointer<ffi.Void>)>();

  int xmlRegExecPushString2(
    xmlRegExecCtxtPtr exec,
    ffi.Pointer<xmlChar> value,
    ffi.Pointer<xmlChar> value2,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _xmlRegExecPushString2(
      exec,
      value,
      value2,
      data,
    );
  }

  late final _xmlRegExecPushString2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              xmlRegExecCtxtPtr,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<ffi.Void>)>>('xmlRegExecPushString2');
  late final _xmlRegExecPushString2 = _xmlRegExecPushString2Ptr.asFunction<
      int Function(xmlRegExecCtxtPtr, ffi.Pointer<xmlChar>,
          ffi.Pointer<xmlChar>, ffi.Pointer<ffi.Void>)>();

  int xmlRegExecNextValues(
    xmlRegExecCtxtPtr exec,
    ffi.Pointer<ffi.Int> nbval,
    ffi.Pointer<ffi.Int> nbneg,
    ffi.Pointer<ffi.Pointer<xmlChar>> values,
    ffi.Pointer<ffi.Int> terminal,
  ) {
    return _xmlRegExecNextValues(
      exec,
      nbval,
      nbneg,
      values,
      terminal,
    );
  }

  late final _xmlRegExecNextValuesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              xmlRegExecCtxtPtr,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Pointer<xmlChar>>,
              ffi.Pointer<ffi.Int>)>>('xmlRegExecNextValues');
  late final _xmlRegExecNextValues = _xmlRegExecNextValuesPtr.asFunction<
      int Function(
          xmlRegExecCtxtPtr,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Pointer<xmlChar>>,
          ffi.Pointer<ffi.Int>)>();

  int xmlRegExecErrInfo(
    xmlRegExecCtxtPtr exec,
    ffi.Pointer<ffi.Pointer<xmlChar>> string,
    ffi.Pointer<ffi.Int> nbval,
    ffi.Pointer<ffi.Int> nbneg,
    ffi.Pointer<ffi.Pointer<xmlChar>> values,
    ffi.Pointer<ffi.Int> terminal,
  ) {
    return _xmlRegExecErrInfo(
      exec,
      string,
      nbval,
      nbneg,
      values,
      terminal,
    );
  }

  late final _xmlRegExecErrInfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              xmlRegExecCtxtPtr,
              ffi.Pointer<ffi.Pointer<xmlChar>>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Pointer<xmlChar>>,
              ffi.Pointer<ffi.Int>)>>('xmlRegExecErrInfo');
  late final _xmlRegExecErrInfo = _xmlRegExecErrInfoPtr.asFunction<
      int Function(
          xmlRegExecCtxtPtr,
          ffi.Pointer<ffi.Pointer<xmlChar>>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Pointer<xmlChar>>,
          ffi.Pointer<ffi.Int>)>();

  int xmlValidateNCName(
    ffi.Pointer<xmlChar> value,
    int space,
  ) {
    return _xmlValidateNCName(
      value,
      space,
    );
  }

  late final _xmlValidateNCNamePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<xmlChar>, ffi.Int)>>(
      'xmlValidateNCName');
  late final _xmlValidateNCName = _xmlValidateNCNamePtr
      .asFunction<int Function(ffi.Pointer<xmlChar>, int)>();

  int xmlValidateQName(
    ffi.Pointer<xmlChar> value,
    int space,
  ) {
    return _xmlValidateQName(
      value,
      space,
    );
  }

  late final _xmlValidateQNamePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<xmlChar>, ffi.Int)>>(
      'xmlValidateQName');
  late final _xmlValidateQName = _xmlValidateQNamePtr
      .asFunction<int Function(ffi.Pointer<xmlChar>, int)>();

  int xmlValidateName(
    ffi.Pointer<xmlChar> value,
    int space,
  ) {
    return _xmlValidateName(
      value,
      space,
    );
  }

  late final _xmlValidateNamePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<xmlChar>, ffi.Int)>>(
      'xmlValidateName');
  late final _xmlValidateName =
      _xmlValidateNamePtr.asFunction<int Function(ffi.Pointer<xmlChar>, int)>();

  int xmlValidateNMToken(
    ffi.Pointer<xmlChar> value,
    int space,
  ) {
    return _xmlValidateNMToken(
      value,
      space,
    );
  }

  late final _xmlValidateNMTokenPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<xmlChar>, ffi.Int)>>(
      'xmlValidateNMToken');
  late final _xmlValidateNMToken = _xmlValidateNMTokenPtr
      .asFunction<int Function(ffi.Pointer<xmlChar>, int)>();

  ffi.Pointer<xmlChar> xmlBuildQName(
    ffi.Pointer<xmlChar> ncname,
    ffi.Pointer<xmlChar> prefix,
    ffi.Pointer<xmlChar> memory,
    int len,
  ) {
    return _xmlBuildQName(
      ncname,
      prefix,
      memory,
      len,
    );
  }

  late final _xmlBuildQNamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<xmlChar> Function(
              ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>,
              ffi.Int)>>('xmlBuildQName');
  late final _xmlBuildQName = _xmlBuildQNamePtr.asFunction<
      ffi.Pointer<xmlChar> Function(ffi.Pointer<xmlChar>, ffi.Pointer<xmlChar>,
          ffi.Pointer<xmlChar>, int)>();

  ffi.Pointer<xmlChar> xmlSplitQName2(
    ffi.Pointer<xmlChar> name,
    ffi.Pointer<ffi.Pointer<xmlChar>> prefix,
  ) {
    return _xmlSplitQName2(
      name,
      prefix,
    );
  }

  late final _xmlSplitQName2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<xmlChar> Function(ffi.Pointer<xmlChar>,
              ffi.Pointer<ffi.Pointer<xmlChar>>)>>('xmlSplitQName2');
  late final _xmlSplitQName2 = _xmlSplitQName2Ptr.asFunction<
      ffi.Pointer<xmlChar> Function(
          ffi.Pointer<xmlChar>, ffi.Pointer<ffi.Pointer<xmlChar>>)>();

  ffi.Pointer<xmlChar> xmlSplitQName3(
    ffi.Pointer<xmlChar> name,
    ffi.Pointer<ffi.Int> len,
  ) {
    return _xmlSplitQName3(
      name,
      len,
    );
  }

  late final _xmlSplitQName3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<xmlChar> Function(
              ffi.Pointer<xmlChar>, ffi.Pointer<ffi.Int>)>>('xmlSplitQName3');
  late final _xmlSplitQName3 = _xmlSplitQName3Ptr.asFunction<
      ffi.Pointer<xmlChar> Function(
          ffi.Pointer<xmlChar>, ffi.Pointer<ffi.Int>)>();

  void xmlSetBufferAllocationScheme(
    int scheme,
  ) {
    return _xmlSetBufferAllocationScheme(
      scheme,
    );
  }

  late final _xmlSetBufferAllocationSchemePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int32)>>(
          'xmlSetBufferAllocationScheme');
  late final _xmlSetBufferAllocationScheme =
      _xmlSetBufferAllocationSchemePtr.asFunction<void Function(int)>();

  int xmlGetBufferAllocationScheme() {
    return _xmlGetBufferAllocationScheme();
  }

  late final _xmlGetBufferAllocationSchemePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>(
          'xmlGetBufferAllocationScheme');
  late final _xmlGetBufferAllocationScheme =
      _xmlGetBufferAllocationSchemePtr.asFunction<int Function()>();

  xmlBufferPtr xmlBufferCreate() {
    return _xmlBufferCreate();
  }

  late final _xmlBufferCreatePtr =
      _lookup<ffi.NativeFunction<xmlBufferPtr Function()>>('xmlBufferCreate');
  late final _xmlBufferCreate =
      _xmlBufferCreatePtr.asFunction<xmlBufferPtr Function()>();

  xmlBufferPtr xmlBufferCreateSize(
    int size,
  ) {
    return _xmlBufferCreateSize(
      size,
    );
  }

  late final _xmlBufferCreateSizePtr =
      _lookup<ffi.NativeFunction<xmlBufferPtr Function(ffi.Size)>>(
          'xmlBufferCreateSize');
  late final _xmlBufferCreateSize =
      _xmlBufferCreateSizePtr.asFunction<xmlBufferPtr Function(int)>();

  xmlBufferPtr xmlBufferCreateStatic(
    ffi.Pointer<ffi.Void> mem,
    int size,
  ) {
    return _xmlBufferCreateStatic(
      mem,
      size,
    );
  }

  late final _xmlBufferCreateStaticPtr = _lookup<
      ffi.NativeFunction<
          xmlBufferPtr Function(
              ffi.Pointer<ffi.Void>, ffi.Size)>>('xmlBufferCreateStatic');
  late final _xmlBufferCreateStatic = _xmlBufferCreateStaticPtr
      .asFunction<xmlBufferPtr Function(ffi.Pointer<ffi.Void>, int)>();

  int xmlBufferResize(
    xmlBufferPtr buf,
    int size,
  ) {
    return _xmlBufferResize(
      buf,
      size,
    );
  }

  late final _xmlBufferResizePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(xmlBufferPtr, ffi.UnsignedInt)>>(
      'xmlBufferResize');
  late final _xmlBufferResize =
      _xmlBufferResizePtr.asFunction<int Function(xmlBufferPtr, int)>();

  void xmlBufferFree(
    xmlBufferPtr buf,
  ) {
    return _xmlBufferFree(
      buf,
    );
  }

  late final _xmlBufferFreePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(xmlBufferPtr)>>(
          'xmlBufferFree');
  late final _xmlBufferFree =
      _xmlBufferFreePtr.asFunction<void Function(xmlBufferPtr)>();

  int xmlBufferDump(
    ffi.Pointer<FILE> file,
    xmlBufferPtr buf,
  ) {
    return _xmlBufferDump(
      file,
      buf,
    );
  }

  late final _xmlBufferDumpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, xmlBufferPtr)>>('xmlBufferDump');
  late final _xmlBufferDump = _xmlBufferDumpPtr
      .asFunction<int Function(ffi.Pointer<FILE>, xmlBufferPtr)>();

  int xmlBufferAdd(
    xmlBufferPtr buf,
    ffi.Pointer<xmlChar> str,
    int len,
  ) {
    return _xmlBufferAdd(
      buf,
      str,
      len,
    );
  }

  late final _xmlBufferAddPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              xmlBufferPtr, ffi.Pointer<xmlChar>, ffi.Int)>>('xmlBufferAdd');
  late final _xmlBufferAdd = _xmlBufferAddPtr
      .asFunction<int Function(xmlBufferPtr, ffi.Pointer<xmlChar>, int)>();

  int xmlBufferAddHead(
    xmlBufferPtr buf,
    ffi.Pointer<xmlChar> str,
    int len,
  ) {
    return _xmlBufferAddHead(
      buf,
      str,
      len,
    );
  }

  late final _xmlBufferAddHeadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(xmlBufferPtr, ffi.Pointer<xmlChar>,
              ffi.Int)>>('xmlBufferAddHead');
  late final _xmlBufferAddHead = _xmlBufferAddHeadPtr
      .asFunction<int Function(xmlBufferPtr, ffi.Pointer<xmlChar>, int)>();

  int xmlBufferCat(
    xmlBufferPtr buf,
    ffi.Pointer<xmlChar> str,
  ) {
    return _xmlBufferCat(
      buf,
      str,
    );
  }

  late final _xmlBufferCatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              xmlBufferPtr, ffi.Pointer<xmlChar>)>>('xmlBufferCat');
  late final _xmlBufferCat = _xmlBufferCatPtr
      .asFunction<int Function(xmlBufferPtr, ffi.Pointer<xmlChar>)>();

  int xmlBufferCCat(
    xmlBufferPtr buf,
    ffi.Pointer<ffi.Char> str,
  ) {
    return _xmlBufferCCat(
      buf,
      str,
    );
  }

  late final _xmlBufferCCatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              xmlBufferPtr, ffi.Pointer<ffi.Char>)>>('xmlBufferCCat');
  late final _xmlBufferCCat = _xmlBufferCCatPtr
      .asFunction<int Function(xmlBufferPtr, ffi.Pointer<ffi.Char>)>();

  int xmlBufferShrink(
    xmlBufferPtr buf,
    int len,
  ) {
    return _xmlBufferShrink(
      buf,
      len,
    );
  }

  late final _xmlBufferShrinkPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(xmlBufferPtr, ffi.UnsignedInt)>>(
      'xmlBufferShrink');
  late final _xmlBufferShrink =
      _xmlBufferShrinkPtr.asFunction<int Function(xmlBufferPtr, int)>();

  int xmlBufferGrow(
    xmlBufferPtr buf,
    int len,
  ) {
    return _xmlBufferGrow(
      buf,
      len,
    );
  }

  late final _xmlBufferGrowPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(xmlBufferPtr, ffi.UnsignedInt)>>(
      'xmlBufferGrow');
  late final _xmlBufferGrow =
      _xmlBufferGrowPtr.asFunction<int Function(xmlBufferPtr, int)>();

  void xmlBufferEmpty(
    xmlBufferPtr buf,
  ) {
    return _xmlBufferEmpty(
      buf,
    );
  }

  late final _xmlBufferEmptyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(xmlBufferPtr)>>(
          'xmlBufferEmpty');
  late final _xmlBufferEmpty =
      _xmlBufferEmptyPtr.asFunction<void Function(xmlBufferPtr)>();

  ffi.Pointer<xmlChar> xmlBufferContent(
    ffi.Pointer<xmlBuffer> buf,
  ) {
    return _xmlBufferContent(
      buf,
    );
  }

  late final _xmlBufferContentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<xmlChar> Function(
              ffi.Pointer<xmlBuffer>)>>('xmlBufferContent');
  late final _xmlBufferContent = _xmlBufferContentPtr
      .asFunction<ffi.Pointer<xmlChar> Function(ffi.Pointer<xmlBuffer>)>();

  ffi.Pointer<xmlChar> xmlBufferDetach(
    xmlBufferPtr buf,
  ) {
    return _xmlBufferDetach(
      buf,
    );
  }

  late final _xmlBufferDetachPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<xmlChar> Function(xmlBufferPtr)>>(
          'xmlBufferDetach');
  late final _xmlBufferDetach = _xmlBufferDetachPtr
      .asFunction<ffi.Pointer<xmlChar> Function(xmlBufferPtr)>();

  void xmlBufferSetAllocationScheme(
    xmlBufferPtr buf,
    int scheme,
  ) {
    return _xmlBufferSetAllocationScheme(
      buf,
      scheme,
    );
  }

  late final _xmlBufferSetAllocationSchemePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(xmlBufferPtr, ffi.Int32)>>(
          'xmlBufferSetAllocationScheme');
  late final _xmlBufferSetAllocationScheme = _xmlBufferSetAllocationSchemePtr
      .asFunction<void Function(xmlBufferPtr, int)>();

  int xmlBufferLength(
    ffi.Pointer<xmlBuffer> buf,
  ) {
    return _xmlBufferLength(
      buf,
    );
  }

  late final _xmlBufferLengthPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<xmlBuffer>)>>(
          'xmlBufferLength');
  late final _xmlBufferLength =
      _xmlBufferLengthPtr.asFunction<int Function(ffi.Pointer<xmlBuffer>)>();

  xmlDtdPtr xmlCreateIntSubset(
    xmlDocPtr doc,
    ffi.Pointer<xmlChar> name,
    ffi.Pointer<xmlChar> ExternalID,
    ffi.Pointer<xmlChar> SystemID,
  ) {
    return _xmlCreateIntSubset(
      doc,
      name,
      ExternalID,
      SystemID,
    );
  }

  late final _xmlCreateIntSubsetPtr = _lookup<
      ffi.NativeFunction<
          xmlDtdPtr Function(
              xmlDocPtr,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>)>>('xmlCreateIntSubset');
  late final _xmlCreateIntSubset = _xmlCreateIntSubsetPtr.asFunction<
      xmlDtdPtr Function(xmlDocPtr, ffi.Pointer<xmlChar>, ffi.Pointer<xmlChar>,
          ffi.Pointer<xmlChar>)>();

  xmlDtdPtr xmlNewDtd(
    xmlDocPtr doc,
    ffi.Pointer<xmlChar> name,
    ffi.Pointer<xmlChar> ExternalID,
    ffi.Pointer<xmlChar> SystemID,
  ) {
    return _xmlNewDtd(
      doc,
      name,
      ExternalID,
      SystemID,
    );
  }

  late final _xmlNewDtdPtr = _lookup<
      ffi.NativeFunction<
          xmlDtdPtr Function(xmlDocPtr, ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>, ffi.Pointer<xmlChar>)>>('xmlNewDtd');
  late final _xmlNewDtd = _xmlNewDtdPtr.asFunction<
      xmlDtdPtr Function(xmlDocPtr, ffi.Pointer<xmlChar>, ffi.Pointer<xmlChar>,
          ffi.Pointer<xmlChar>)>();

  xmlDtdPtr xmlGetIntSubset(
    ffi.Pointer<xmlDoc> doc,
  ) {
    return _xmlGetIntSubset(
      doc,
    );
  }

  late final _xmlGetIntSubsetPtr =
      _lookup<ffi.NativeFunction<xmlDtdPtr Function(ffi.Pointer<xmlDoc>)>>(
          'xmlGetIntSubset');
  late final _xmlGetIntSubset =
      _xmlGetIntSubsetPtr.asFunction<xmlDtdPtr Function(ffi.Pointer<xmlDoc>)>();

  void xmlFreeDtd(
    xmlDtdPtr cur,
  ) {
    return _xmlFreeDtd(
      cur,
    );
  }

  late final _xmlFreeDtdPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(xmlDtdPtr)>>('xmlFreeDtd');
  late final _xmlFreeDtd =
      _xmlFreeDtdPtr.asFunction<void Function(xmlDtdPtr)>();

  xmlNsPtr xmlNewGlobalNs(
    xmlDocPtr doc,
    ffi.Pointer<xmlChar> href,
    ffi.Pointer<xmlChar> prefix,
  ) {
    return _xmlNewGlobalNs(
      doc,
      href,
      prefix,
    );
  }

  late final _xmlNewGlobalNsPtr = _lookup<
      ffi.NativeFunction<
          xmlNsPtr Function(xmlDocPtr, ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>)>>('xmlNewGlobalNs');
  late final _xmlNewGlobalNs = _xmlNewGlobalNsPtr.asFunction<
      xmlNsPtr Function(
          xmlDocPtr, ffi.Pointer<xmlChar>, ffi.Pointer<xmlChar>)>();

  xmlNsPtr xmlNewNs(
    xmlNodePtr node,
    ffi.Pointer<xmlChar> href,
    ffi.Pointer<xmlChar> prefix,
  ) {
    return _xmlNewNs(
      node,
      href,
      prefix,
    );
  }

  late final _xmlNewNsPtr = _lookup<
      ffi.NativeFunction<
          xmlNsPtr Function(xmlNodePtr, ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>)>>('xmlNewNs');
  late final _xmlNewNs = _xmlNewNsPtr.asFunction<
      xmlNsPtr Function(
          xmlNodePtr, ffi.Pointer<xmlChar>, ffi.Pointer<xmlChar>)>();

  void xmlFreeNs(
    xmlNsPtr cur,
  ) {
    return _xmlFreeNs(
      cur,
    );
  }

  late final _xmlFreeNsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(xmlNsPtr)>>('xmlFreeNs');
  late final _xmlFreeNs = _xmlFreeNsPtr.asFunction<void Function(xmlNsPtr)>();

  void xmlFreeNsList(
    xmlNsPtr cur,
  ) {
    return _xmlFreeNsList(
      cur,
    );
  }

  late final _xmlFreeNsListPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(xmlNsPtr)>>('xmlFreeNsList');
  late final _xmlFreeNsList =
      _xmlFreeNsListPtr.asFunction<void Function(xmlNsPtr)>();

  xmlDocPtr xmlNewDoc(
    ffi.Pointer<xmlChar> version,
  ) {
    return _xmlNewDoc(
      version,
    );
  }

  late final _xmlNewDocPtr =
      _lookup<ffi.NativeFunction<xmlDocPtr Function(ffi.Pointer<xmlChar>)>>(
          'xmlNewDoc');
  late final _xmlNewDoc =
      _xmlNewDocPtr.asFunction<xmlDocPtr Function(ffi.Pointer<xmlChar>)>();

  void xmlFreeDoc(
    xmlDocPtr cur,
  ) {
    return _xmlFreeDoc(
      cur,
    );
  }

  late final _xmlFreeDocPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(xmlDocPtr)>>('xmlFreeDoc');
  late final _xmlFreeDoc =
      _xmlFreeDocPtr.asFunction<void Function(xmlDocPtr)>();

  xmlAttrPtr xmlNewDocProp(
    xmlDocPtr doc,
    ffi.Pointer<xmlChar> name,
    ffi.Pointer<xmlChar> value,
  ) {
    return _xmlNewDocProp(
      doc,
      name,
      value,
    );
  }

  late final _xmlNewDocPropPtr = _lookup<
      ffi.NativeFunction<
          xmlAttrPtr Function(xmlDocPtr, ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>)>>('xmlNewDocProp');
  late final _xmlNewDocProp = _xmlNewDocPropPtr.asFunction<
      xmlAttrPtr Function(
          xmlDocPtr, ffi.Pointer<xmlChar>, ffi.Pointer<xmlChar>)>();

  xmlAttrPtr xmlNewProp(
    xmlNodePtr node,
    ffi.Pointer<xmlChar> name,
    ffi.Pointer<xmlChar> value,
  ) {
    return _xmlNewProp(
      node,
      name,
      value,
    );
  }

  late final _xmlNewPropPtr = _lookup<
      ffi.NativeFunction<
          xmlAttrPtr Function(xmlNodePtr, ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>)>>('xmlNewProp');
  late final _xmlNewProp = _xmlNewPropPtr.asFunction<
      xmlAttrPtr Function(
          xmlNodePtr, ffi.Pointer<xmlChar>, ffi.Pointer<xmlChar>)>();

  xmlAttrPtr xmlNewNsProp(
    xmlNodePtr node,
    xmlNsPtr ns,
    ffi.Pointer<xmlChar> name,
    ffi.Pointer<xmlChar> value,
  ) {
    return _xmlNewNsProp(
      node,
      ns,
      name,
      value,
    );
  }

  late final _xmlNewNsPropPtr = _lookup<
      ffi.NativeFunction<
          xmlAttrPtr Function(xmlNodePtr, xmlNsPtr, ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>)>>('xmlNewNsProp');
  late final _xmlNewNsProp = _xmlNewNsPropPtr.asFunction<
      xmlAttrPtr Function(
          xmlNodePtr, xmlNsPtr, ffi.Pointer<xmlChar>, ffi.Pointer<xmlChar>)>();

  xmlAttrPtr xmlNewNsPropEatName(
    xmlNodePtr node,
    xmlNsPtr ns,
    ffi.Pointer<xmlChar> name,
    ffi.Pointer<xmlChar> value,
  ) {
    return _xmlNewNsPropEatName(
      node,
      ns,
      name,
      value,
    );
  }

  late final _xmlNewNsPropEatNamePtr = _lookup<
      ffi.NativeFunction<
          xmlAttrPtr Function(xmlNodePtr, xmlNsPtr, ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>)>>('xmlNewNsPropEatName');
  late final _xmlNewNsPropEatName = _xmlNewNsPropEatNamePtr.asFunction<
      xmlAttrPtr Function(
          xmlNodePtr, xmlNsPtr, ffi.Pointer<xmlChar>, ffi.Pointer<xmlChar>)>();

  void xmlFreePropList(
    xmlAttrPtr cur,
  ) {
    return _xmlFreePropList(
      cur,
    );
  }

  late final _xmlFreePropListPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(xmlAttrPtr)>>(
          'xmlFreePropList');
  late final _xmlFreePropList =
      _xmlFreePropListPtr.asFunction<void Function(xmlAttrPtr)>();

  void xmlFreeProp(
    xmlAttrPtr cur,
  ) {
    return _xmlFreeProp(
      cur,
    );
  }

  late final _xmlFreePropPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(xmlAttrPtr)>>('xmlFreeProp');
  late final _xmlFreeProp =
      _xmlFreePropPtr.asFunction<void Function(xmlAttrPtr)>();

  xmlAttrPtr xmlCopyProp(
    xmlNodePtr target,
    xmlAttrPtr cur,
  ) {
    return _xmlCopyProp(
      target,
      cur,
    );
  }

  late final _xmlCopyPropPtr =
      _lookup<ffi.NativeFunction<xmlAttrPtr Function(xmlNodePtr, xmlAttrPtr)>>(
          'xmlCopyProp');
  late final _xmlCopyProp =
      _xmlCopyPropPtr.asFunction<xmlAttrPtr Function(xmlNodePtr, xmlAttrPtr)>();

  xmlAttrPtr xmlCopyPropList(
    xmlNodePtr target,
    xmlAttrPtr cur,
  ) {
    return _xmlCopyPropList(
      target,
      cur,
    );
  }

  late final _xmlCopyPropListPtr =
      _lookup<ffi.NativeFunction<xmlAttrPtr Function(xmlNodePtr, xmlAttrPtr)>>(
          'xmlCopyPropList');
  late final _xmlCopyPropList = _xmlCopyPropListPtr
      .asFunction<xmlAttrPtr Function(xmlNodePtr, xmlAttrPtr)>();

  xmlDtdPtr xmlCopyDtd(
    xmlDtdPtr dtd,
  ) {
    return _xmlCopyDtd(
      dtd,
    );
  }

  late final _xmlCopyDtdPtr =
      _lookup<ffi.NativeFunction<xmlDtdPtr Function(xmlDtdPtr)>>('xmlCopyDtd');
  late final _xmlCopyDtd =
      _xmlCopyDtdPtr.asFunction<xmlDtdPtr Function(xmlDtdPtr)>();

  xmlDocPtr xmlCopyDoc(
    xmlDocPtr doc,
    int recursive,
  ) {
    return _xmlCopyDoc(
      doc,
      recursive,
    );
  }

  late final _xmlCopyDocPtr =
      _lookup<ffi.NativeFunction<xmlDocPtr Function(xmlDocPtr, ffi.Int)>>(
          'xmlCopyDoc');
  late final _xmlCopyDoc =
      _xmlCopyDocPtr.asFunction<xmlDocPtr Function(xmlDocPtr, int)>();

  xmlNodePtr xmlNewDocNode(
    xmlDocPtr doc,
    xmlNsPtr ns,
    ffi.Pointer<xmlChar> name,
    ffi.Pointer<xmlChar> content,
  ) {
    return _xmlNewDocNode(
      doc,
      ns,
      name,
      content,
    );
  }

  late final _xmlNewDocNodePtr = _lookup<
      ffi.NativeFunction<
          xmlNodePtr Function(xmlDocPtr, xmlNsPtr, ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>)>>('xmlNewDocNode');
  late final _xmlNewDocNode = _xmlNewDocNodePtr.asFunction<
      xmlNodePtr Function(
          xmlDocPtr, xmlNsPtr, ffi.Pointer<xmlChar>, ffi.Pointer<xmlChar>)>();

  xmlNodePtr xmlNewDocNodeEatName(
    xmlDocPtr doc,
    xmlNsPtr ns,
    ffi.Pointer<xmlChar> name,
    ffi.Pointer<xmlChar> content,
  ) {
    return _xmlNewDocNodeEatName(
      doc,
      ns,
      name,
      content,
    );
  }

  late final _xmlNewDocNodeEatNamePtr = _lookup<
      ffi.NativeFunction<
          xmlNodePtr Function(xmlDocPtr, xmlNsPtr, ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>)>>('xmlNewDocNodeEatName');
  late final _xmlNewDocNodeEatName = _xmlNewDocNodeEatNamePtr.asFunction<
      xmlNodePtr Function(
          xmlDocPtr, xmlNsPtr, ffi.Pointer<xmlChar>, ffi.Pointer<xmlChar>)>();

  xmlNodePtr xmlNewNode(
    xmlNsPtr ns,
    ffi.Pointer<xmlChar> name,
  ) {
    return _xmlNewNode(
      ns,
      name,
    );
  }

  late final _xmlNewNodePtr = _lookup<
      ffi.NativeFunction<
          xmlNodePtr Function(xmlNsPtr, ffi.Pointer<xmlChar>)>>('xmlNewNode');
  late final _xmlNewNode = _xmlNewNodePtr
      .asFunction<xmlNodePtr Function(xmlNsPtr, ffi.Pointer<xmlChar>)>();

  xmlNodePtr xmlNewNodeEatName(
    xmlNsPtr ns,
    ffi.Pointer<xmlChar> name,
  ) {
    return _xmlNewNodeEatName(
      ns,
      name,
    );
  }

  late final _xmlNewNodeEatNamePtr = _lookup<
          ffi
          .NativeFunction<xmlNodePtr Function(xmlNsPtr, ffi.Pointer<xmlChar>)>>(
      'xmlNewNodeEatName');
  late final _xmlNewNodeEatName = _xmlNewNodeEatNamePtr
      .asFunction<xmlNodePtr Function(xmlNsPtr, ffi.Pointer<xmlChar>)>();

  xmlNodePtr xmlNewChild(
    xmlNodePtr parent,
    xmlNsPtr ns,
    ffi.Pointer<xmlChar> name,
    ffi.Pointer<xmlChar> content,
  ) {
    return _xmlNewChild(
      parent,
      ns,
      name,
      content,
    );
  }

  late final _xmlNewChildPtr = _lookup<
      ffi.NativeFunction<
          xmlNodePtr Function(xmlNodePtr, xmlNsPtr, ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>)>>('xmlNewChild');
  late final _xmlNewChild = _xmlNewChildPtr.asFunction<
      xmlNodePtr Function(
          xmlNodePtr, xmlNsPtr, ffi.Pointer<xmlChar>, ffi.Pointer<xmlChar>)>();

  xmlNodePtr xmlNewDocText(
    ffi.Pointer<xmlDoc> doc,
    ffi.Pointer<xmlChar> content,
  ) {
    return _xmlNewDocText(
      doc,
      content,
    );
  }

  late final _xmlNewDocTextPtr = _lookup<
      ffi.NativeFunction<
          xmlNodePtr Function(
              ffi.Pointer<xmlDoc>, ffi.Pointer<xmlChar>)>>('xmlNewDocText');
  late final _xmlNewDocText = _xmlNewDocTextPtr.asFunction<
      xmlNodePtr Function(ffi.Pointer<xmlDoc>, ffi.Pointer<xmlChar>)>();

  xmlNodePtr xmlNewText(
    ffi.Pointer<xmlChar> content,
  ) {
    return _xmlNewText(
      content,
    );
  }

  late final _xmlNewTextPtr =
      _lookup<ffi.NativeFunction<xmlNodePtr Function(ffi.Pointer<xmlChar>)>>(
          'xmlNewText');
  late final _xmlNewText =
      _xmlNewTextPtr.asFunction<xmlNodePtr Function(ffi.Pointer<xmlChar>)>();

  xmlNodePtr xmlNewDocPI(
    xmlDocPtr doc,
    ffi.Pointer<xmlChar> name,
    ffi.Pointer<xmlChar> content,
  ) {
    return _xmlNewDocPI(
      doc,
      name,
      content,
    );
  }

  late final _xmlNewDocPIPtr = _lookup<
      ffi.NativeFunction<
          xmlNodePtr Function(xmlDocPtr, ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>)>>('xmlNewDocPI');
  late final _xmlNewDocPI = _xmlNewDocPIPtr.asFunction<
      xmlNodePtr Function(
          xmlDocPtr, ffi.Pointer<xmlChar>, ffi.Pointer<xmlChar>)>();

  xmlNodePtr xmlNewPI(
    ffi.Pointer<xmlChar> name,
    ffi.Pointer<xmlChar> content,
  ) {
    return _xmlNewPI(
      name,
      content,
    );
  }

  late final _xmlNewPIPtr = _lookup<
      ffi.NativeFunction<
          xmlNodePtr Function(
              ffi.Pointer<xmlChar>, ffi.Pointer<xmlChar>)>>('xmlNewPI');
  late final _xmlNewPI = _xmlNewPIPtr.asFunction<
      xmlNodePtr Function(ffi.Pointer<xmlChar>, ffi.Pointer<xmlChar>)>();

  xmlNodePtr xmlNewDocTextLen(
    xmlDocPtr doc,
    ffi.Pointer<xmlChar> content,
    int len,
  ) {
    return _xmlNewDocTextLen(
      doc,
      content,
      len,
    );
  }

  late final _xmlNewDocTextLenPtr = _lookup<
      ffi.NativeFunction<
          xmlNodePtr Function(
              xmlDocPtr, ffi.Pointer<xmlChar>, ffi.Int)>>('xmlNewDocTextLen');
  late final _xmlNewDocTextLen = _xmlNewDocTextLenPtr
      .asFunction<xmlNodePtr Function(xmlDocPtr, ffi.Pointer<xmlChar>, int)>();

  xmlNodePtr xmlNewTextLen(
    ffi.Pointer<xmlChar> content,
    int len,
  ) {
    return _xmlNewTextLen(
      content,
      len,
    );
  }

  late final _xmlNewTextLenPtr = _lookup<
      ffi.NativeFunction<
          xmlNodePtr Function(ffi.Pointer<xmlChar>, ffi.Int)>>('xmlNewTextLen');
  late final _xmlNewTextLen = _xmlNewTextLenPtr
      .asFunction<xmlNodePtr Function(ffi.Pointer<xmlChar>, int)>();

  xmlNodePtr xmlNewDocComment(
    xmlDocPtr doc,
    ffi.Pointer<xmlChar> content,
  ) {
    return _xmlNewDocComment(
      doc,
      content,
    );
  }

  late final _xmlNewDocCommentPtr = _lookup<
      ffi.NativeFunction<
          xmlNodePtr Function(
              xmlDocPtr, ffi.Pointer<xmlChar>)>>('xmlNewDocComment');
  late final _xmlNewDocComment = _xmlNewDocCommentPtr
      .asFunction<xmlNodePtr Function(xmlDocPtr, ffi.Pointer<xmlChar>)>();

  xmlNodePtr xmlNewComment(
    ffi.Pointer<xmlChar> content,
  ) {
    return _xmlNewComment(
      content,
    );
  }

  late final _xmlNewCommentPtr =
      _lookup<ffi.NativeFunction<xmlNodePtr Function(ffi.Pointer<xmlChar>)>>(
          'xmlNewComment');
  late final _xmlNewComment =
      _xmlNewCommentPtr.asFunction<xmlNodePtr Function(ffi.Pointer<xmlChar>)>();

  xmlNodePtr xmlNewCDataBlock(
    xmlDocPtr doc,
    ffi.Pointer<xmlChar> content,
    int len,
  ) {
    return _xmlNewCDataBlock(
      doc,
      content,
      len,
    );
  }

  late final _xmlNewCDataBlockPtr = _lookup<
      ffi.NativeFunction<
          xmlNodePtr Function(
              xmlDocPtr, ffi.Pointer<xmlChar>, ffi.Int)>>('xmlNewCDataBlock');
  late final _xmlNewCDataBlock = _xmlNewCDataBlockPtr
      .asFunction<xmlNodePtr Function(xmlDocPtr, ffi.Pointer<xmlChar>, int)>();

  xmlNodePtr xmlNewCharRef(
    xmlDocPtr doc,
    ffi.Pointer<xmlChar> name,
  ) {
    return _xmlNewCharRef(
      doc,
      name,
    );
  }

  late final _xmlNewCharRefPtr = _lookup<
      ffi.NativeFunction<
          xmlNodePtr Function(
              xmlDocPtr, ffi.Pointer<xmlChar>)>>('xmlNewCharRef');
  late final _xmlNewCharRef = _xmlNewCharRefPtr
      .asFunction<xmlNodePtr Function(xmlDocPtr, ffi.Pointer<xmlChar>)>();

  xmlNodePtr xmlNewReference(
    ffi.Pointer<xmlDoc> doc,
    ffi.Pointer<xmlChar> name,
  ) {
    return _xmlNewReference(
      doc,
      name,
    );
  }

  late final _xmlNewReferencePtr = _lookup<
      ffi.NativeFunction<
          xmlNodePtr Function(
              ffi.Pointer<xmlDoc>, ffi.Pointer<xmlChar>)>>('xmlNewReference');
  late final _xmlNewReference = _xmlNewReferencePtr.asFunction<
      xmlNodePtr Function(ffi.Pointer<xmlDoc>, ffi.Pointer<xmlChar>)>();

  xmlNodePtr xmlCopyNode(
    xmlNodePtr node,
    int recursive,
  ) {
    return _xmlCopyNode(
      node,
      recursive,
    );
  }

  late final _xmlCopyNodePtr =
      _lookup<ffi.NativeFunction<xmlNodePtr Function(xmlNodePtr, ffi.Int)>>(
          'xmlCopyNode');
  late final _xmlCopyNode =
      _xmlCopyNodePtr.asFunction<xmlNodePtr Function(xmlNodePtr, int)>();

  xmlNodePtr xmlDocCopyNode(
    xmlNodePtr node,
    xmlDocPtr doc,
    int recursive,
  ) {
    return _xmlDocCopyNode(
      node,
      doc,
      recursive,
    );
  }

  late final _xmlDocCopyNodePtr = _lookup<
          ffi
          .NativeFunction<xmlNodePtr Function(xmlNodePtr, xmlDocPtr, ffi.Int)>>(
      'xmlDocCopyNode');
  late final _xmlDocCopyNode = _xmlDocCopyNodePtr
      .asFunction<xmlNodePtr Function(xmlNodePtr, xmlDocPtr, int)>();

  xmlNodePtr xmlDocCopyNodeList(
    xmlDocPtr doc,
    xmlNodePtr node,
  ) {
    return _xmlDocCopyNodeList(
      doc,
      node,
    );
  }

  late final _xmlDocCopyNodeListPtr =
      _lookup<ffi.NativeFunction<xmlNodePtr Function(xmlDocPtr, xmlNodePtr)>>(
          'xmlDocCopyNodeList');
  late final _xmlDocCopyNodeList = _xmlDocCopyNodeListPtr
      .asFunction<xmlNodePtr Function(xmlDocPtr, xmlNodePtr)>();

  xmlNodePtr xmlCopyNodeList(
    xmlNodePtr node,
  ) {
    return _xmlCopyNodeList(
      node,
    );
  }

  late final _xmlCopyNodeListPtr =
      _lookup<ffi.NativeFunction<xmlNodePtr Function(xmlNodePtr)>>(
          'xmlCopyNodeList');
  late final _xmlCopyNodeList =
      _xmlCopyNodeListPtr.asFunction<xmlNodePtr Function(xmlNodePtr)>();

  xmlNodePtr xmlNewTextChild(
    xmlNodePtr parent,
    xmlNsPtr ns,
    ffi.Pointer<xmlChar> name,
    ffi.Pointer<xmlChar> content,
  ) {
    return _xmlNewTextChild(
      parent,
      ns,
      name,
      content,
    );
  }

  late final _xmlNewTextChildPtr = _lookup<
      ffi.NativeFunction<
          xmlNodePtr Function(xmlNodePtr, xmlNsPtr, ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>)>>('xmlNewTextChild');
  late final _xmlNewTextChild = _xmlNewTextChildPtr.asFunction<
      xmlNodePtr Function(
          xmlNodePtr, xmlNsPtr, ffi.Pointer<xmlChar>, ffi.Pointer<xmlChar>)>();

  xmlNodePtr xmlNewDocRawNode(
    xmlDocPtr doc,
    xmlNsPtr ns,
    ffi.Pointer<xmlChar> name,
    ffi.Pointer<xmlChar> content,
  ) {
    return _xmlNewDocRawNode(
      doc,
      ns,
      name,
      content,
    );
  }

  late final _xmlNewDocRawNodePtr = _lookup<
      ffi.NativeFunction<
          xmlNodePtr Function(xmlDocPtr, xmlNsPtr, ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>)>>('xmlNewDocRawNode');
  late final _xmlNewDocRawNode = _xmlNewDocRawNodePtr.asFunction<
      xmlNodePtr Function(
          xmlDocPtr, xmlNsPtr, ffi.Pointer<xmlChar>, ffi.Pointer<xmlChar>)>();

  xmlNodePtr xmlNewDocFragment(
    xmlDocPtr doc,
  ) {
    return _xmlNewDocFragment(
      doc,
    );
  }

  late final _xmlNewDocFragmentPtr =
      _lookup<ffi.NativeFunction<xmlNodePtr Function(xmlDocPtr)>>(
          'xmlNewDocFragment');
  late final _xmlNewDocFragment =
      _xmlNewDocFragmentPtr.asFunction<xmlNodePtr Function(xmlDocPtr)>();

  int xmlGetLineNo(
    ffi.Pointer<xmlNode> node,
  ) {
    return _xmlGetLineNo(
      node,
    );
  }

  late final _xmlGetLineNoPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<xmlNode>)>>(
          'xmlGetLineNo');
  late final _xmlGetLineNo =
      _xmlGetLineNoPtr.asFunction<int Function(ffi.Pointer<xmlNode>)>();

  ffi.Pointer<xmlChar> xmlGetNodePath(
    ffi.Pointer<xmlNode> node,
  ) {
    return _xmlGetNodePath(
      node,
    );
  }

  late final _xmlGetNodePathPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<xmlChar> Function(ffi.Pointer<xmlNode>)>>(
      'xmlGetNodePath');
  late final _xmlGetNodePath = _xmlGetNodePathPtr
      .asFunction<ffi.Pointer<xmlChar> Function(ffi.Pointer<xmlNode>)>();

  xmlNodePtr xmlDocGetRootElement(
    ffi.Pointer<xmlDoc> doc,
  ) {
    return _xmlDocGetRootElement(
      doc,
    );
  }

  late final _xmlDocGetRootElementPtr =
      _lookup<ffi.NativeFunction<xmlNodePtr Function(ffi.Pointer<xmlDoc>)>>(
          'xmlDocGetRootElement');
  late final _xmlDocGetRootElement = _xmlDocGetRootElementPtr
      .asFunction<xmlNodePtr Function(ffi.Pointer<xmlDoc>)>();

  xmlNodePtr xmlGetLastChild(
    ffi.Pointer<xmlNode> parent,
  ) {
    return _xmlGetLastChild(
      parent,
    );
  }

  late final _xmlGetLastChildPtr =
      _lookup<ffi.NativeFunction<xmlNodePtr Function(ffi.Pointer<xmlNode>)>>(
          'xmlGetLastChild');
  late final _xmlGetLastChild = _xmlGetLastChildPtr
      .asFunction<xmlNodePtr Function(ffi.Pointer<xmlNode>)>();

  int xmlNodeIsText(
    ffi.Pointer<xmlNode> node,
  ) {
    return _xmlNodeIsText(
      node,
    );
  }

  late final _xmlNodeIsTextPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<xmlNode>)>>(
          'xmlNodeIsText');
  late final _xmlNodeIsText =
      _xmlNodeIsTextPtr.asFunction<int Function(ffi.Pointer<xmlNode>)>();

  int xmlIsBlankNode(
    ffi.Pointer<xmlNode> node,
  ) {
    return _xmlIsBlankNode(
      node,
    );
  }

  late final _xmlIsBlankNodePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<xmlNode>)>>(
          'xmlIsBlankNode');
  late final _xmlIsBlankNode =
      _xmlIsBlankNodePtr.asFunction<int Function(ffi.Pointer<xmlNode>)>();

  xmlNodePtr xmlDocSetRootElement(
    xmlDocPtr doc,
    xmlNodePtr root,
  ) {
    return _xmlDocSetRootElement(
      doc,
      root,
    );
  }

  late final _xmlDocSetRootElementPtr =
      _lookup<ffi.NativeFunction<xmlNodePtr Function(xmlDocPtr, xmlNodePtr)>>(
          'xmlDocSetRootElement');
  late final _xmlDocSetRootElement = _xmlDocSetRootElementPtr
      .asFunction<xmlNodePtr Function(xmlDocPtr, xmlNodePtr)>();

  void xmlNodeSetName(
    xmlNodePtr cur,
    ffi.Pointer<xmlChar> name,
  ) {
    return _xmlNodeSetName(
      cur,
      name,
    );
  }

  late final _xmlNodeSetNamePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(xmlNodePtr, ffi.Pointer<xmlChar>)>>(
      'xmlNodeSetName');
  late final _xmlNodeSetName = _xmlNodeSetNamePtr
      .asFunction<void Function(xmlNodePtr, ffi.Pointer<xmlChar>)>();

  xmlNodePtr xmlAddChild(
    xmlNodePtr parent,
    xmlNodePtr cur,
  ) {
    return _xmlAddChild(
      parent,
      cur,
    );
  }

  late final _xmlAddChildPtr =
      _lookup<ffi.NativeFunction<xmlNodePtr Function(xmlNodePtr, xmlNodePtr)>>(
          'xmlAddChild');
  late final _xmlAddChild =
      _xmlAddChildPtr.asFunction<xmlNodePtr Function(xmlNodePtr, xmlNodePtr)>();

  xmlNodePtr xmlAddChildList(
    xmlNodePtr parent,
    xmlNodePtr cur,
  ) {
    return _xmlAddChildList(
      parent,
      cur,
    );
  }

  late final _xmlAddChildListPtr =
      _lookup<ffi.NativeFunction<xmlNodePtr Function(xmlNodePtr, xmlNodePtr)>>(
          'xmlAddChildList');
  late final _xmlAddChildList = _xmlAddChildListPtr
      .asFunction<xmlNodePtr Function(xmlNodePtr, xmlNodePtr)>();

  xmlNodePtr xmlReplaceNode(
    xmlNodePtr old,
    xmlNodePtr cur,
  ) {
    return _xmlReplaceNode(
      old,
      cur,
    );
  }

  late final _xmlReplaceNodePtr =
      _lookup<ffi.NativeFunction<xmlNodePtr Function(xmlNodePtr, xmlNodePtr)>>(
          'xmlReplaceNode');
  late final _xmlReplaceNode = _xmlReplaceNodePtr
      .asFunction<xmlNodePtr Function(xmlNodePtr, xmlNodePtr)>();

  xmlNodePtr xmlAddPrevSibling(
    xmlNodePtr cur,
    xmlNodePtr elem,
  ) {
    return _xmlAddPrevSibling(
      cur,
      elem,
    );
  }

  late final _xmlAddPrevSiblingPtr =
      _lookup<ffi.NativeFunction<xmlNodePtr Function(xmlNodePtr, xmlNodePtr)>>(
          'xmlAddPrevSibling');
  late final _xmlAddPrevSibling = _xmlAddPrevSiblingPtr
      .asFunction<xmlNodePtr Function(xmlNodePtr, xmlNodePtr)>();

  xmlNodePtr xmlAddSibling(
    xmlNodePtr cur,
    xmlNodePtr elem,
  ) {
    return _xmlAddSibling(
      cur,
      elem,
    );
  }

  late final _xmlAddSiblingPtr =
      _lookup<ffi.NativeFunction<xmlNodePtr Function(xmlNodePtr, xmlNodePtr)>>(
          'xmlAddSibling');
  late final _xmlAddSibling = _xmlAddSiblingPtr
      .asFunction<xmlNodePtr Function(xmlNodePtr, xmlNodePtr)>();

  xmlNodePtr xmlAddNextSibling(
    xmlNodePtr cur,
    xmlNodePtr elem,
  ) {
    return _xmlAddNextSibling(
      cur,
      elem,
    );
  }

  late final _xmlAddNextSiblingPtr =
      _lookup<ffi.NativeFunction<xmlNodePtr Function(xmlNodePtr, xmlNodePtr)>>(
          'xmlAddNextSibling');
  late final _xmlAddNextSibling = _xmlAddNextSiblingPtr
      .asFunction<xmlNodePtr Function(xmlNodePtr, xmlNodePtr)>();

  void xmlUnlinkNode(
    xmlNodePtr cur,
  ) {
    return _xmlUnlinkNode(
      cur,
    );
  }

  late final _xmlUnlinkNodePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(xmlNodePtr)>>(
          'xmlUnlinkNode');
  late final _xmlUnlinkNode =
      _xmlUnlinkNodePtr.asFunction<void Function(xmlNodePtr)>();

  xmlNodePtr xmlTextMerge(
    xmlNodePtr first,
    xmlNodePtr second,
  ) {
    return _xmlTextMerge(
      first,
      second,
    );
  }

  late final _xmlTextMergePtr =
      _lookup<ffi.NativeFunction<xmlNodePtr Function(xmlNodePtr, xmlNodePtr)>>(
          'xmlTextMerge');
  late final _xmlTextMerge = _xmlTextMergePtr
      .asFunction<xmlNodePtr Function(xmlNodePtr, xmlNodePtr)>();

  int xmlTextConcat(
    xmlNodePtr node,
    ffi.Pointer<xmlChar> content,
    int len,
  ) {
    return _xmlTextConcat(
      node,
      content,
      len,
    );
  }

  late final _xmlTextConcatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              xmlNodePtr, ffi.Pointer<xmlChar>, ffi.Int)>>('xmlTextConcat');
  late final _xmlTextConcat = _xmlTextConcatPtr
      .asFunction<int Function(xmlNodePtr, ffi.Pointer<xmlChar>, int)>();

  void xmlFreeNodeList(
    xmlNodePtr cur,
  ) {
    return _xmlFreeNodeList(
      cur,
    );
  }

  late final _xmlFreeNodeListPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(xmlNodePtr)>>(
          'xmlFreeNodeList');
  late final _xmlFreeNodeList =
      _xmlFreeNodeListPtr.asFunction<void Function(xmlNodePtr)>();

  void xmlFreeNode(
    xmlNodePtr cur,
  ) {
    return _xmlFreeNode(
      cur,
    );
  }

  late final _xmlFreeNodePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(xmlNodePtr)>>('xmlFreeNode');
  late final _xmlFreeNode =
      _xmlFreeNodePtr.asFunction<void Function(xmlNodePtr)>();

  void xmlSetTreeDoc(
    xmlNodePtr tree,
    xmlDocPtr doc,
  ) {
    return _xmlSetTreeDoc(
      tree,
      doc,
    );
  }

  late final _xmlSetTreeDocPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(xmlNodePtr, xmlDocPtr)>>(
          'xmlSetTreeDoc');
  late final _xmlSetTreeDoc =
      _xmlSetTreeDocPtr.asFunction<void Function(xmlNodePtr, xmlDocPtr)>();

  void xmlSetListDoc(
    xmlNodePtr list,
    xmlDocPtr doc,
  ) {
    return _xmlSetListDoc(
      list,
      doc,
    );
  }

  late final _xmlSetListDocPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(xmlNodePtr, xmlDocPtr)>>(
          'xmlSetListDoc');
  late final _xmlSetListDoc =
      _xmlSetListDocPtr.asFunction<void Function(xmlNodePtr, xmlDocPtr)>();

  xmlNsPtr xmlSearchNs(
    xmlDocPtr doc,
    xmlNodePtr node,
    ffi.Pointer<xmlChar> nameSpace,
  ) {
    return _xmlSearchNs(
      doc,
      node,
      nameSpace,
    );
  }

  late final _xmlSearchNsPtr = _lookup<
      ffi.NativeFunction<
          xmlNsPtr Function(
              xmlDocPtr, xmlNodePtr, ffi.Pointer<xmlChar>)>>('xmlSearchNs');
  late final _xmlSearchNs = _xmlSearchNsPtr.asFunction<
      xmlNsPtr Function(xmlDocPtr, xmlNodePtr, ffi.Pointer<xmlChar>)>();

  xmlNsPtr xmlSearchNsByHref(
    xmlDocPtr doc,
    xmlNodePtr node,
    ffi.Pointer<xmlChar> href,
  ) {
    return _xmlSearchNsByHref(
      doc,
      node,
      href,
    );
  }

  late final _xmlSearchNsByHrefPtr = _lookup<
      ffi.NativeFunction<
          xmlNsPtr Function(xmlDocPtr, xmlNodePtr,
              ffi.Pointer<xmlChar>)>>('xmlSearchNsByHref');
  late final _xmlSearchNsByHref = _xmlSearchNsByHrefPtr.asFunction<
      xmlNsPtr Function(xmlDocPtr, xmlNodePtr, ffi.Pointer<xmlChar>)>();

  ffi.Pointer<xmlNsPtr> xmlGetNsList(
    ffi.Pointer<xmlDoc> doc,
    ffi.Pointer<xmlNode> node,
  ) {
    return _xmlGetNsList(
      doc,
      node,
    );
  }

  late final _xmlGetNsListPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<xmlNsPtr> Function(
              ffi.Pointer<xmlDoc>, ffi.Pointer<xmlNode>)>>('xmlGetNsList');
  late final _xmlGetNsList = _xmlGetNsListPtr.asFunction<
      ffi.Pointer<xmlNsPtr> Function(
          ffi.Pointer<xmlDoc>, ffi.Pointer<xmlNode>)>();

  void xmlSetNs(
    xmlNodePtr node,
    xmlNsPtr ns,
  ) {
    return _xmlSetNs(
      node,
      ns,
    );
  }

  late final _xmlSetNsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(xmlNodePtr, xmlNsPtr)>>(
          'xmlSetNs');
  late final _xmlSetNs =
      _xmlSetNsPtr.asFunction<void Function(xmlNodePtr, xmlNsPtr)>();

  xmlNsPtr xmlCopyNamespace(
    xmlNsPtr cur,
  ) {
    return _xmlCopyNamespace(
      cur,
    );
  }

  late final _xmlCopyNamespacePtr =
      _lookup<ffi.NativeFunction<xmlNsPtr Function(xmlNsPtr)>>(
          'xmlCopyNamespace');
  late final _xmlCopyNamespace =
      _xmlCopyNamespacePtr.asFunction<xmlNsPtr Function(xmlNsPtr)>();

  xmlNsPtr xmlCopyNamespaceList(
    xmlNsPtr cur,
  ) {
    return _xmlCopyNamespaceList(
      cur,
    );
  }

  late final _xmlCopyNamespaceListPtr =
      _lookup<ffi.NativeFunction<xmlNsPtr Function(xmlNsPtr)>>(
          'xmlCopyNamespaceList');
  late final _xmlCopyNamespaceList =
      _xmlCopyNamespaceListPtr.asFunction<xmlNsPtr Function(xmlNsPtr)>();

  xmlAttrPtr xmlSetProp(
    xmlNodePtr node,
    ffi.Pointer<xmlChar> name,
    ffi.Pointer<xmlChar> value,
  ) {
    return _xmlSetProp(
      node,
      name,
      value,
    );
  }

  late final _xmlSetPropPtr = _lookup<
      ffi.NativeFunction<
          xmlAttrPtr Function(xmlNodePtr, ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>)>>('xmlSetProp');
  late final _xmlSetProp = _xmlSetPropPtr.asFunction<
      xmlAttrPtr Function(
          xmlNodePtr, ffi.Pointer<xmlChar>, ffi.Pointer<xmlChar>)>();

  xmlAttrPtr xmlSetNsProp(
    xmlNodePtr node,
    xmlNsPtr ns,
    ffi.Pointer<xmlChar> name,
    ffi.Pointer<xmlChar> value,
  ) {
    return _xmlSetNsProp(
      node,
      ns,
      name,
      value,
    );
  }

  late final _xmlSetNsPropPtr = _lookup<
      ffi.NativeFunction<
          xmlAttrPtr Function(xmlNodePtr, xmlNsPtr, ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>)>>('xmlSetNsProp');
  late final _xmlSetNsProp = _xmlSetNsPropPtr.asFunction<
      xmlAttrPtr Function(
          xmlNodePtr, xmlNsPtr, ffi.Pointer<xmlChar>, ffi.Pointer<xmlChar>)>();

  ffi.Pointer<xmlChar> xmlGetNoNsProp(
    ffi.Pointer<xmlNode> node,
    ffi.Pointer<xmlChar> name,
  ) {
    return _xmlGetNoNsProp(
      node,
      name,
    );
  }

  late final _xmlGetNoNsPropPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<xmlChar> Function(
              ffi.Pointer<xmlNode>, ffi.Pointer<xmlChar>)>>('xmlGetNoNsProp');
  late final _xmlGetNoNsProp = _xmlGetNoNsPropPtr.asFunction<
      ffi.Pointer<xmlChar> Function(
          ffi.Pointer<xmlNode>, ffi.Pointer<xmlChar>)>();

  ffi.Pointer<xmlChar> xmlGetProp(
    ffi.Pointer<xmlNode> node,
    ffi.Pointer<xmlChar> name,
  ) {
    return _xmlGetProp(
      node,
      name,
    );
  }

  late final _xmlGetPropPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<xmlChar> Function(
              ffi.Pointer<xmlNode>, ffi.Pointer<xmlChar>)>>('xmlGetProp');
  late final _xmlGetProp = _xmlGetPropPtr.asFunction<
      ffi.Pointer<xmlChar> Function(
          ffi.Pointer<xmlNode>, ffi.Pointer<xmlChar>)>();

  xmlAttrPtr xmlHasProp(
    ffi.Pointer<xmlNode> node,
    ffi.Pointer<xmlChar> name,
  ) {
    return _xmlHasProp(
      node,
      name,
    );
  }

  late final _xmlHasPropPtr = _lookup<
      ffi.NativeFunction<
          xmlAttrPtr Function(
              ffi.Pointer<xmlNode>, ffi.Pointer<xmlChar>)>>('xmlHasProp');
  late final _xmlHasProp = _xmlHasPropPtr.asFunction<
      xmlAttrPtr Function(ffi.Pointer<xmlNode>, ffi.Pointer<xmlChar>)>();

  xmlAttrPtr xmlHasNsProp(
    ffi.Pointer<xmlNode> node,
    ffi.Pointer<xmlChar> name,
    ffi.Pointer<xmlChar> nameSpace,
  ) {
    return _xmlHasNsProp(
      node,
      name,
      nameSpace,
    );
  }

  late final _xmlHasNsPropPtr = _lookup<
      ffi.NativeFunction<
          xmlAttrPtr Function(ffi.Pointer<xmlNode>, ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>)>>('xmlHasNsProp');
  late final _xmlHasNsProp = _xmlHasNsPropPtr.asFunction<
      xmlAttrPtr Function(
          ffi.Pointer<xmlNode>, ffi.Pointer<xmlChar>, ffi.Pointer<xmlChar>)>();

  ffi.Pointer<xmlChar> xmlGetNsProp(
    ffi.Pointer<xmlNode> node,
    ffi.Pointer<xmlChar> name,
    ffi.Pointer<xmlChar> nameSpace,
  ) {
    return _xmlGetNsProp(
      node,
      name,
      nameSpace,
    );
  }

  late final _xmlGetNsPropPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<xmlChar> Function(ffi.Pointer<xmlNode>,
              ffi.Pointer<xmlChar>, ffi.Pointer<xmlChar>)>>('xmlGetNsProp');
  late final _xmlGetNsProp = _xmlGetNsPropPtr.asFunction<
      ffi.Pointer<xmlChar> Function(
          ffi.Pointer<xmlNode>, ffi.Pointer<xmlChar>, ffi.Pointer<xmlChar>)>();

  xmlNodePtr xmlStringGetNodeList(
    ffi.Pointer<xmlDoc> doc,
    ffi.Pointer<xmlChar> value,
  ) {
    return _xmlStringGetNodeList(
      doc,
      value,
    );
  }

  late final _xmlStringGetNodeListPtr = _lookup<
      ffi.NativeFunction<
          xmlNodePtr Function(ffi.Pointer<xmlDoc>,
              ffi.Pointer<xmlChar>)>>('xmlStringGetNodeList');
  late final _xmlStringGetNodeList = _xmlStringGetNodeListPtr.asFunction<
      xmlNodePtr Function(ffi.Pointer<xmlDoc>, ffi.Pointer<xmlChar>)>();

  xmlNodePtr xmlStringLenGetNodeList(
    ffi.Pointer<xmlDoc> doc,
    ffi.Pointer<xmlChar> value,
    int len,
  ) {
    return _xmlStringLenGetNodeList(
      doc,
      value,
      len,
    );
  }

  late final _xmlStringLenGetNodeListPtr = _lookup<
      ffi.NativeFunction<
          xmlNodePtr Function(ffi.Pointer<xmlDoc>, ffi.Pointer<xmlChar>,
              ffi.Int)>>('xmlStringLenGetNodeList');
  late final _xmlStringLenGetNodeList = _xmlStringLenGetNodeListPtr.asFunction<
      xmlNodePtr Function(ffi.Pointer<xmlDoc>, ffi.Pointer<xmlChar>, int)>();

  ffi.Pointer<xmlChar> xmlNodeListGetString(
    xmlDocPtr doc,
    ffi.Pointer<xmlNode> list,
    int inLine,
  ) {
    return _xmlNodeListGetString(
      doc,
      list,
      inLine,
    );
  }

  late final _xmlNodeListGetStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<xmlChar> Function(xmlDocPtr, ffi.Pointer<xmlNode>,
              ffi.Int)>>('xmlNodeListGetString');
  late final _xmlNodeListGetString = _xmlNodeListGetStringPtr.asFunction<
      ffi.Pointer<xmlChar> Function(xmlDocPtr, ffi.Pointer<xmlNode>, int)>();

  ffi.Pointer<xmlChar> xmlNodeListGetRawString(
    ffi.Pointer<xmlDoc> doc,
    ffi.Pointer<xmlNode> list,
    int inLine,
  ) {
    return _xmlNodeListGetRawString(
      doc,
      list,
      inLine,
    );
  }

  late final _xmlNodeListGetRawStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<xmlChar> Function(ffi.Pointer<xmlDoc>,
              ffi.Pointer<xmlNode>, ffi.Int)>>('xmlNodeListGetRawString');
  late final _xmlNodeListGetRawString = _xmlNodeListGetRawStringPtr.asFunction<
      ffi.Pointer<xmlChar> Function(
          ffi.Pointer<xmlDoc>, ffi.Pointer<xmlNode>, int)>();

  void xmlNodeSetContent(
    xmlNodePtr cur,
    ffi.Pointer<xmlChar> content,
  ) {
    return _xmlNodeSetContent(
      cur,
      content,
    );
  }

  late final _xmlNodeSetContentPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(xmlNodePtr, ffi.Pointer<xmlChar>)>>(
      'xmlNodeSetContent');
  late final _xmlNodeSetContent = _xmlNodeSetContentPtr
      .asFunction<void Function(xmlNodePtr, ffi.Pointer<xmlChar>)>();

  void xmlNodeSetContentLen(
    xmlNodePtr cur,
    ffi.Pointer<xmlChar> content,
    int len,
  ) {
    return _xmlNodeSetContentLen(
      cur,
      content,
      len,
    );
  }

  late final _xmlNodeSetContentLenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(xmlNodePtr, ffi.Pointer<xmlChar>,
              ffi.Int)>>('xmlNodeSetContentLen');
  late final _xmlNodeSetContentLen = _xmlNodeSetContentLenPtr
      .asFunction<void Function(xmlNodePtr, ffi.Pointer<xmlChar>, int)>();

  void xmlNodeAddContent(
    xmlNodePtr cur,
    ffi.Pointer<xmlChar> content,
  ) {
    return _xmlNodeAddContent(
      cur,
      content,
    );
  }

  late final _xmlNodeAddContentPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(xmlNodePtr, ffi.Pointer<xmlChar>)>>(
      'xmlNodeAddContent');
  late final _xmlNodeAddContent = _xmlNodeAddContentPtr
      .asFunction<void Function(xmlNodePtr, ffi.Pointer<xmlChar>)>();

  void xmlNodeAddContentLen(
    xmlNodePtr cur,
    ffi.Pointer<xmlChar> content,
    int len,
  ) {
    return _xmlNodeAddContentLen(
      cur,
      content,
      len,
    );
  }

  late final _xmlNodeAddContentLenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(xmlNodePtr, ffi.Pointer<xmlChar>,
              ffi.Int)>>('xmlNodeAddContentLen');
  late final _xmlNodeAddContentLen = _xmlNodeAddContentLenPtr
      .asFunction<void Function(xmlNodePtr, ffi.Pointer<xmlChar>, int)>();

  ffi.Pointer<xmlChar> xmlNodeGetContent(
    ffi.Pointer<xmlNode> cur,
  ) {
    return _xmlNodeGetContent(
      cur,
    );
  }

  late final _xmlNodeGetContentPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<xmlChar> Function(ffi.Pointer<xmlNode>)>>(
      'xmlNodeGetContent');
  late final _xmlNodeGetContent = _xmlNodeGetContentPtr
      .asFunction<ffi.Pointer<xmlChar> Function(ffi.Pointer<xmlNode>)>();

  int xmlNodeBufGetContent(
    xmlBufferPtr buffer,
    ffi.Pointer<xmlNode> cur,
  ) {
    return _xmlNodeBufGetContent(
      buffer,
      cur,
    );
  }

  late final _xmlNodeBufGetContentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              xmlBufferPtr, ffi.Pointer<xmlNode>)>>('xmlNodeBufGetContent');
  late final _xmlNodeBufGetContent = _xmlNodeBufGetContentPtr
      .asFunction<int Function(xmlBufferPtr, ffi.Pointer<xmlNode>)>();

  int xmlBufGetNodeContent(
    xmlBufPtr buf,
    ffi.Pointer<xmlNode> cur,
  ) {
    return _xmlBufGetNodeContent(
      buf,
      cur,
    );
  }

  late final _xmlBufGetNodeContentPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int Function(xmlBufPtr, ffi.Pointer<xmlNode>)>>(
      'xmlBufGetNodeContent');
  late final _xmlBufGetNodeContent = _xmlBufGetNodeContentPtr
      .asFunction<int Function(xmlBufPtr, ffi.Pointer<xmlNode>)>();

  ffi.Pointer<xmlChar> xmlNodeGetLang(
    ffi.Pointer<xmlNode> cur,
  ) {
    return _xmlNodeGetLang(
      cur,
    );
  }

  late final _xmlNodeGetLangPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<xmlChar> Function(ffi.Pointer<xmlNode>)>>(
      'xmlNodeGetLang');
  late final _xmlNodeGetLang = _xmlNodeGetLangPtr
      .asFunction<ffi.Pointer<xmlChar> Function(ffi.Pointer<xmlNode>)>();

  int xmlNodeGetSpacePreserve(
    ffi.Pointer<xmlNode> cur,
  ) {
    return _xmlNodeGetSpacePreserve(
      cur,
    );
  }

  late final _xmlNodeGetSpacePreservePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<xmlNode>)>>(
          'xmlNodeGetSpacePreserve');
  late final _xmlNodeGetSpacePreserve = _xmlNodeGetSpacePreservePtr
      .asFunction<int Function(ffi.Pointer<xmlNode>)>();

  void xmlNodeSetLang(
    xmlNodePtr cur,
    ffi.Pointer<xmlChar> lang,
  ) {
    return _xmlNodeSetLang(
      cur,
      lang,
    );
  }

  late final _xmlNodeSetLangPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(xmlNodePtr, ffi.Pointer<xmlChar>)>>(
      'xmlNodeSetLang');
  late final _xmlNodeSetLang = _xmlNodeSetLangPtr
      .asFunction<void Function(xmlNodePtr, ffi.Pointer<xmlChar>)>();

  void xmlNodeSetSpacePreserve(
    xmlNodePtr cur,
    int val,
  ) {
    return _xmlNodeSetSpacePreserve(
      cur,
      val,
    );
  }

  late final _xmlNodeSetSpacePreservePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(xmlNodePtr, ffi.Int)>>(
          'xmlNodeSetSpacePreserve');
  late final _xmlNodeSetSpacePreserve =
      _xmlNodeSetSpacePreservePtr.asFunction<void Function(xmlNodePtr, int)>();

  ffi.Pointer<xmlChar> xmlNodeGetBase(
    ffi.Pointer<xmlDoc> doc,
    ffi.Pointer<xmlNode> cur,
  ) {
    return _xmlNodeGetBase(
      doc,
      cur,
    );
  }

  late final _xmlNodeGetBasePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<xmlChar> Function(
              ffi.Pointer<xmlDoc>, ffi.Pointer<xmlNode>)>>('xmlNodeGetBase');
  late final _xmlNodeGetBase = _xmlNodeGetBasePtr.asFunction<
      ffi.Pointer<xmlChar> Function(
          ffi.Pointer<xmlDoc>, ffi.Pointer<xmlNode>)>();

  void xmlNodeSetBase(
    xmlNodePtr cur,
    ffi.Pointer<xmlChar> uri,
  ) {
    return _xmlNodeSetBase(
      cur,
      uri,
    );
  }

  late final _xmlNodeSetBasePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(xmlNodePtr, ffi.Pointer<xmlChar>)>>(
      'xmlNodeSetBase');
  late final _xmlNodeSetBase = _xmlNodeSetBasePtr
      .asFunction<void Function(xmlNodePtr, ffi.Pointer<xmlChar>)>();

  int xmlRemoveProp(
    xmlAttrPtr cur,
  ) {
    return _xmlRemoveProp(
      cur,
    );
  }

  late final _xmlRemovePropPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(xmlAttrPtr)>>(
          'xmlRemoveProp');
  late final _xmlRemoveProp =
      _xmlRemovePropPtr.asFunction<int Function(xmlAttrPtr)>();

  int xmlUnsetNsProp(
    xmlNodePtr node,
    xmlNsPtr ns,
    ffi.Pointer<xmlChar> name,
  ) {
    return _xmlUnsetNsProp(
      node,
      ns,
      name,
    );
  }

  late final _xmlUnsetNsPropPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              xmlNodePtr, xmlNsPtr, ffi.Pointer<xmlChar>)>>('xmlUnsetNsProp');
  late final _xmlUnsetNsProp = _xmlUnsetNsPropPtr
      .asFunction<int Function(xmlNodePtr, xmlNsPtr, ffi.Pointer<xmlChar>)>();

  int xmlUnsetProp(
    xmlNodePtr node,
    ffi.Pointer<xmlChar> name,
  ) {
    return _xmlUnsetProp(
      node,
      name,
    );
  }

  late final _xmlUnsetPropPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(xmlNodePtr, ffi.Pointer<xmlChar>)>>('xmlUnsetProp');
  late final _xmlUnsetProp = _xmlUnsetPropPtr
      .asFunction<int Function(xmlNodePtr, ffi.Pointer<xmlChar>)>();

  void xmlBufferWriteCHAR(
    xmlBufferPtr buf,
    ffi.Pointer<xmlChar> string,
  ) {
    return _xmlBufferWriteCHAR(
      buf,
      string,
    );
  }

  late final _xmlBufferWriteCHARPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              xmlBufferPtr, ffi.Pointer<xmlChar>)>>('xmlBufferWriteCHAR');
  late final _xmlBufferWriteCHAR = _xmlBufferWriteCHARPtr
      .asFunction<void Function(xmlBufferPtr, ffi.Pointer<xmlChar>)>();

  void xmlBufferWriteChar(
    xmlBufferPtr buf,
    ffi.Pointer<ffi.Char> string,
  ) {
    return _xmlBufferWriteChar(
      buf,
      string,
    );
  }

  late final _xmlBufferWriteCharPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              xmlBufferPtr, ffi.Pointer<ffi.Char>)>>('xmlBufferWriteChar');
  late final _xmlBufferWriteChar = _xmlBufferWriteCharPtr
      .asFunction<void Function(xmlBufferPtr, ffi.Pointer<ffi.Char>)>();

  void xmlBufferWriteQuotedString(
    xmlBufferPtr buf,
    ffi.Pointer<xmlChar> string,
  ) {
    return _xmlBufferWriteQuotedString(
      buf,
      string,
    );
  }

  late final _xmlBufferWriteQuotedStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(xmlBufferPtr,
              ffi.Pointer<xmlChar>)>>('xmlBufferWriteQuotedString');
  late final _xmlBufferWriteQuotedString = _xmlBufferWriteQuotedStringPtr
      .asFunction<void Function(xmlBufferPtr, ffi.Pointer<xmlChar>)>();

  void xmlAttrSerializeTxtContent(
    xmlBufferPtr buf,
    xmlDocPtr doc,
    xmlAttrPtr attr,
    ffi.Pointer<xmlChar> string,
  ) {
    return _xmlAttrSerializeTxtContent(
      buf,
      doc,
      attr,
      string,
    );
  }

  late final _xmlAttrSerializeTxtContentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(xmlBufferPtr, xmlDocPtr, xmlAttrPtr,
              ffi.Pointer<xmlChar>)>>('xmlAttrSerializeTxtContent');
  late final _xmlAttrSerializeTxtContent =
      _xmlAttrSerializeTxtContentPtr.asFunction<
          void Function(
              xmlBufferPtr, xmlDocPtr, xmlAttrPtr, ffi.Pointer<xmlChar>)>();

  int xmlReconciliateNs(
    xmlDocPtr doc,
    xmlNodePtr tree,
  ) {
    return _xmlReconciliateNs(
      doc,
      tree,
    );
  }

  late final _xmlReconciliateNsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(xmlDocPtr, xmlNodePtr)>>(
          'xmlReconciliateNs');
  late final _xmlReconciliateNs =
      _xmlReconciliateNsPtr.asFunction<int Function(xmlDocPtr, xmlNodePtr)>();

  void xmlDocDumpFormatMemory(
    xmlDocPtr cur,
    ffi.Pointer<ffi.Pointer<xmlChar>> mem,
    ffi.Pointer<ffi.Int> size,
    int format,
  ) {
    return _xmlDocDumpFormatMemory(
      cur,
      mem,
      size,
      format,
    );
  }

  late final _xmlDocDumpFormatMemoryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(xmlDocPtr, ffi.Pointer<ffi.Pointer<xmlChar>>,
              ffi.Pointer<ffi.Int>, ffi.Int)>>('xmlDocDumpFormatMemory');
  late final _xmlDocDumpFormatMemory = _xmlDocDumpFormatMemoryPtr.asFunction<
      void Function(xmlDocPtr, ffi.Pointer<ffi.Pointer<xmlChar>>,
          ffi.Pointer<ffi.Int>, int)>();

  void xmlDocDumpMemory(
    xmlDocPtr cur,
    ffi.Pointer<ffi.Pointer<xmlChar>> mem,
    ffi.Pointer<ffi.Int> size,
  ) {
    return _xmlDocDumpMemory(
      cur,
      mem,
      size,
    );
  }

  late final _xmlDocDumpMemoryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(xmlDocPtr, ffi.Pointer<ffi.Pointer<xmlChar>>,
              ffi.Pointer<ffi.Int>)>>('xmlDocDumpMemory');
  late final _xmlDocDumpMemory = _xmlDocDumpMemoryPtr.asFunction<
      void Function(xmlDocPtr, ffi.Pointer<ffi.Pointer<xmlChar>>,
          ffi.Pointer<ffi.Int>)>();

  void xmlDocDumpMemoryEnc(
    xmlDocPtr out_doc,
    ffi.Pointer<ffi.Pointer<xmlChar>> doc_txt_ptr,
    ffi.Pointer<ffi.Int> doc_txt_len,
    ffi.Pointer<ffi.Char> txt_encoding,
  ) {
    return _xmlDocDumpMemoryEnc(
      out_doc,
      doc_txt_ptr,
      doc_txt_len,
      txt_encoding,
    );
  }

  late final _xmlDocDumpMemoryEncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              xmlDocPtr,
              ffi.Pointer<ffi.Pointer<xmlChar>>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Char>)>>('xmlDocDumpMemoryEnc');
  late final _xmlDocDumpMemoryEnc = _xmlDocDumpMemoryEncPtr.asFunction<
      void Function(xmlDocPtr, ffi.Pointer<ffi.Pointer<xmlChar>>,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>)>();

  void xmlDocDumpFormatMemoryEnc(
    xmlDocPtr out_doc,
    ffi.Pointer<ffi.Pointer<xmlChar>> doc_txt_ptr,
    ffi.Pointer<ffi.Int> doc_txt_len,
    ffi.Pointer<ffi.Char> txt_encoding,
    int format,
  ) {
    return _xmlDocDumpFormatMemoryEnc(
      out_doc,
      doc_txt_ptr,
      doc_txt_len,
      txt_encoding,
      format,
    );
  }

  late final _xmlDocDumpFormatMemoryEncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              xmlDocPtr,
              ffi.Pointer<ffi.Pointer<xmlChar>>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Char>,
              ffi.Int)>>('xmlDocDumpFormatMemoryEnc');
  late final _xmlDocDumpFormatMemoryEnc =
      _xmlDocDumpFormatMemoryEncPtr.asFunction<
          void Function(xmlDocPtr, ffi.Pointer<ffi.Pointer<xmlChar>>,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, int)>();

  int xmlDocFormatDump(
    ffi.Pointer<FILE> f,
    xmlDocPtr cur,
    int format,
  ) {
    return _xmlDocFormatDump(
      f,
      cur,
      format,
    );
  }

  late final _xmlDocFormatDumpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, xmlDocPtr, ffi.Int)>>('xmlDocFormatDump');
  late final _xmlDocFormatDump = _xmlDocFormatDumpPtr
      .asFunction<int Function(ffi.Pointer<FILE>, xmlDocPtr, int)>();

  int xmlDocDump(
    ffi.Pointer<FILE> f,
    xmlDocPtr cur,
  ) {
    return _xmlDocDump(
      f,
      cur,
    );
  }

  late final _xmlDocDumpPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>, xmlDocPtr)>>(
      'xmlDocDump');
  late final _xmlDocDump =
      _xmlDocDumpPtr.asFunction<int Function(ffi.Pointer<FILE>, xmlDocPtr)>();

  void xmlElemDump(
    ffi.Pointer<FILE> f,
    xmlDocPtr doc,
    xmlNodePtr cur,
  ) {
    return _xmlElemDump(
      f,
      doc,
      cur,
    );
  }

  late final _xmlElemDumpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<FILE>, xmlDocPtr, xmlNodePtr)>>('xmlElemDump');
  late final _xmlElemDump = _xmlElemDumpPtr
      .asFunction<void Function(ffi.Pointer<FILE>, xmlDocPtr, xmlNodePtr)>();

  int xmlSaveFile(
    ffi.Pointer<ffi.Char> filename,
    xmlDocPtr cur,
  ) {
    return _xmlSaveFile(
      filename,
      cur,
    );
  }

  late final _xmlSaveFilePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, xmlDocPtr)>>('xmlSaveFile');
  late final _xmlSaveFile = _xmlSaveFilePtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, xmlDocPtr)>();

  int xmlSaveFormatFile(
    ffi.Pointer<ffi.Char> filename,
    xmlDocPtr cur,
    int format,
  ) {
    return _xmlSaveFormatFile(
      filename,
      cur,
      format,
    );
  }

  late final _xmlSaveFormatFilePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, xmlDocPtr, ffi.Int)>>('xmlSaveFormatFile');
  late final _xmlSaveFormatFile = _xmlSaveFormatFilePtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, xmlDocPtr, int)>();

  int xmlBufNodeDump(
    xmlBufPtr buf,
    xmlDocPtr doc,
    xmlNodePtr cur,
    int level,
    int format,
  ) {
    return _xmlBufNodeDump(
      buf,
      doc,
      cur,
      level,
      format,
    );
  }

  late final _xmlBufNodeDumpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(xmlBufPtr, xmlDocPtr, xmlNodePtr, ffi.Int,
              ffi.Int)>>('xmlBufNodeDump');
  late final _xmlBufNodeDump = _xmlBufNodeDumpPtr
      .asFunction<int Function(xmlBufPtr, xmlDocPtr, xmlNodePtr, int, int)>();

  int xmlNodeDump(
    xmlBufferPtr buf,
    xmlDocPtr doc,
    xmlNodePtr cur,
    int level,
    int format,
  ) {
    return _xmlNodeDump(
      buf,
      doc,
      cur,
      level,
      format,
    );
  }

  late final _xmlNodeDumpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(xmlBufferPtr, xmlDocPtr, xmlNodePtr, ffi.Int,
              ffi.Int)>>('xmlNodeDump');
  late final _xmlNodeDump = _xmlNodeDumpPtr.asFunction<
      int Function(xmlBufferPtr, xmlDocPtr, xmlNodePtr, int, int)>();

  int xmlSaveFileTo(
    xmlOutputBufferPtr buf,
    xmlDocPtr cur,
    ffi.Pointer<ffi.Char> encoding,
  ) {
    return _xmlSaveFileTo(
      buf,
      cur,
      encoding,
    );
  }

  late final _xmlSaveFileToPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(xmlOutputBufferPtr, xmlDocPtr,
              ffi.Pointer<ffi.Char>)>>('xmlSaveFileTo');
  late final _xmlSaveFileTo = _xmlSaveFileToPtr.asFunction<
      int Function(xmlOutputBufferPtr, xmlDocPtr, ffi.Pointer<ffi.Char>)>();

  int xmlSaveFormatFileTo(
    xmlOutputBufferPtr buf,
    xmlDocPtr cur,
    ffi.Pointer<ffi.Char> encoding,
    int format,
  ) {
    return _xmlSaveFormatFileTo(
      buf,
      cur,
      encoding,
      format,
    );
  }

  late final _xmlSaveFormatFileToPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(xmlOutputBufferPtr, xmlDocPtr, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('xmlSaveFormatFileTo');
  late final _xmlSaveFormatFileTo = _xmlSaveFormatFileToPtr.asFunction<
      int Function(
          xmlOutputBufferPtr, xmlDocPtr, ffi.Pointer<ffi.Char>, int)>();

  void xmlNodeDumpOutput(
    xmlOutputBufferPtr buf,
    xmlDocPtr doc,
    xmlNodePtr cur,
    int level,
    int format,
    ffi.Pointer<ffi.Char> encoding,
  ) {
    return _xmlNodeDumpOutput(
      buf,
      doc,
      cur,
      level,
      format,
      encoding,
    );
  }

  late final _xmlNodeDumpOutputPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(xmlOutputBufferPtr, xmlDocPtr, xmlNodePtr, ffi.Int,
              ffi.Int, ffi.Pointer<ffi.Char>)>>('xmlNodeDumpOutput');
  late final _xmlNodeDumpOutput = _xmlNodeDumpOutputPtr.asFunction<
      void Function(xmlOutputBufferPtr, xmlDocPtr, xmlNodePtr, int, int,
          ffi.Pointer<ffi.Char>)>();

  int xmlSaveFormatFileEnc(
    ffi.Pointer<ffi.Char> filename,
    xmlDocPtr cur,
    ffi.Pointer<ffi.Char> encoding,
    int format,
  ) {
    return _xmlSaveFormatFileEnc(
      filename,
      cur,
      encoding,
      format,
    );
  }

  late final _xmlSaveFormatFileEncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, xmlDocPtr,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('xmlSaveFormatFileEnc');
  late final _xmlSaveFormatFileEnc = _xmlSaveFormatFileEncPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, xmlDocPtr, ffi.Pointer<ffi.Char>, int)>();

  int xmlSaveFileEnc(
    ffi.Pointer<ffi.Char> filename,
    xmlDocPtr cur,
    ffi.Pointer<ffi.Char> encoding,
  ) {
    return _xmlSaveFileEnc(
      filename,
      cur,
      encoding,
    );
  }

  late final _xmlSaveFileEncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, xmlDocPtr,
              ffi.Pointer<ffi.Char>)>>('xmlSaveFileEnc');
  late final _xmlSaveFileEnc = _xmlSaveFileEncPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, xmlDocPtr, ffi.Pointer<ffi.Char>)>();

  int xmlIsXHTML(
    ffi.Pointer<xmlChar> systemID,
    ffi.Pointer<xmlChar> publicID,
  ) {
    return _xmlIsXHTML(
      systemID,
      publicID,
    );
  }

  late final _xmlIsXHTMLPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<xmlChar>, ffi.Pointer<xmlChar>)>>('xmlIsXHTML');
  late final _xmlIsXHTML = _xmlIsXHTMLPtr
      .asFunction<int Function(ffi.Pointer<xmlChar>, ffi.Pointer<xmlChar>)>();

  int xmlGetDocCompressMode(
    ffi.Pointer<xmlDoc> doc,
  ) {
    return _xmlGetDocCompressMode(
      doc,
    );
  }

  late final _xmlGetDocCompressModePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<xmlDoc>)>>(
          'xmlGetDocCompressMode');
  late final _xmlGetDocCompressMode =
      _xmlGetDocCompressModePtr.asFunction<int Function(ffi.Pointer<xmlDoc>)>();

  void xmlSetDocCompressMode(
    xmlDocPtr doc,
    int mode,
  ) {
    return _xmlSetDocCompressMode(
      doc,
      mode,
    );
  }

  late final _xmlSetDocCompressModePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(xmlDocPtr, ffi.Int)>>(
          'xmlSetDocCompressMode');
  late final _xmlSetDocCompressMode =
      _xmlSetDocCompressModePtr.asFunction<void Function(xmlDocPtr, int)>();

  int xmlGetCompressMode() {
    return _xmlGetCompressMode();
  }

  late final _xmlGetCompressModePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('xmlGetCompressMode');
  late final _xmlGetCompressMode =
      _xmlGetCompressModePtr.asFunction<int Function()>();

  void xmlSetCompressMode(
    int mode,
  ) {
    return _xmlSetCompressMode(
      mode,
    );
  }

  late final _xmlSetCompressModePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>(
          'xmlSetCompressMode');
  late final _xmlSetCompressMode =
      _xmlSetCompressModePtr.asFunction<void Function(int)>();

  xmlDOMWrapCtxtPtr xmlDOMWrapNewCtxt() {
    return _xmlDOMWrapNewCtxt();
  }

  late final _xmlDOMWrapNewCtxtPtr =
      _lookup<ffi.NativeFunction<xmlDOMWrapCtxtPtr Function()>>(
          'xmlDOMWrapNewCtxt');
  late final _xmlDOMWrapNewCtxt =
      _xmlDOMWrapNewCtxtPtr.asFunction<xmlDOMWrapCtxtPtr Function()>();

  void xmlDOMWrapFreeCtxt(
    xmlDOMWrapCtxtPtr ctxt,
  ) {
    return _xmlDOMWrapFreeCtxt(
      ctxt,
    );
  }

  late final _xmlDOMWrapFreeCtxtPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(xmlDOMWrapCtxtPtr)>>(
          'xmlDOMWrapFreeCtxt');
  late final _xmlDOMWrapFreeCtxt =
      _xmlDOMWrapFreeCtxtPtr.asFunction<void Function(xmlDOMWrapCtxtPtr)>();

  int xmlDOMWrapReconcileNamespaces(
    xmlDOMWrapCtxtPtr ctxt,
    xmlNodePtr elem,
    int options,
  ) {
    return _xmlDOMWrapReconcileNamespaces(
      ctxt,
      elem,
      options,
    );
  }

  late final _xmlDOMWrapReconcileNamespacesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(xmlDOMWrapCtxtPtr, xmlNodePtr,
              ffi.Int)>>('xmlDOMWrapReconcileNamespaces');
  late final _xmlDOMWrapReconcileNamespaces = _xmlDOMWrapReconcileNamespacesPtr
      .asFunction<int Function(xmlDOMWrapCtxtPtr, xmlNodePtr, int)>();

  int xmlDOMWrapAdoptNode(
    xmlDOMWrapCtxtPtr ctxt,
    xmlDocPtr sourceDoc,
    xmlNodePtr node,
    xmlDocPtr destDoc,
    xmlNodePtr destParent,
    int options,
  ) {
    return _xmlDOMWrapAdoptNode(
      ctxt,
      sourceDoc,
      node,
      destDoc,
      destParent,
      options,
    );
  }

  late final _xmlDOMWrapAdoptNodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(xmlDOMWrapCtxtPtr, xmlDocPtr, xmlNodePtr, xmlDocPtr,
              xmlNodePtr, ffi.Int)>>('xmlDOMWrapAdoptNode');
  late final _xmlDOMWrapAdoptNode = _xmlDOMWrapAdoptNodePtr.asFunction<
      int Function(xmlDOMWrapCtxtPtr, xmlDocPtr, xmlNodePtr, xmlDocPtr,
          xmlNodePtr, int)>();

  int xmlDOMWrapRemoveNode(
    xmlDOMWrapCtxtPtr ctxt,
    xmlDocPtr doc,
    xmlNodePtr node,
    int options,
  ) {
    return _xmlDOMWrapRemoveNode(
      ctxt,
      doc,
      node,
      options,
    );
  }

  late final _xmlDOMWrapRemoveNodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(xmlDOMWrapCtxtPtr, xmlDocPtr, xmlNodePtr,
              ffi.Int)>>('xmlDOMWrapRemoveNode');
  late final _xmlDOMWrapRemoveNode = _xmlDOMWrapRemoveNodePtr.asFunction<
      int Function(xmlDOMWrapCtxtPtr, xmlDocPtr, xmlNodePtr, int)>();

  int xmlDOMWrapCloneNode(
    xmlDOMWrapCtxtPtr ctxt,
    xmlDocPtr sourceDoc,
    xmlNodePtr node,
    ffi.Pointer<xmlNodePtr> clonedNode,
    xmlDocPtr destDoc,
    xmlNodePtr destParent,
    int deep,
    int options,
  ) {
    return _xmlDOMWrapCloneNode(
      ctxt,
      sourceDoc,
      node,
      clonedNode,
      destDoc,
      destParent,
      deep,
      options,
    );
  }

  late final _xmlDOMWrapCloneNodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              xmlDOMWrapCtxtPtr,
              xmlDocPtr,
              xmlNodePtr,
              ffi.Pointer<xmlNodePtr>,
              xmlDocPtr,
              xmlNodePtr,
              ffi.Int,
              ffi.Int)>>('xmlDOMWrapCloneNode');
  late final _xmlDOMWrapCloneNode = _xmlDOMWrapCloneNodePtr.asFunction<
      int Function(xmlDOMWrapCtxtPtr, xmlDocPtr, xmlNodePtr,
          ffi.Pointer<xmlNodePtr>, xmlDocPtr, xmlNodePtr, int, int)>();

  int xmlChildElementCount(
    xmlNodePtr parent,
  ) {
    return _xmlChildElementCount(
      parent,
    );
  }

  late final _xmlChildElementCountPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedLong Function(xmlNodePtr)>>(
          'xmlChildElementCount');
  late final _xmlChildElementCount =
      _xmlChildElementCountPtr.asFunction<int Function(xmlNodePtr)>();

  xmlNodePtr xmlNextElementSibling(
    xmlNodePtr node,
  ) {
    return _xmlNextElementSibling(
      node,
    );
  }

  late final _xmlNextElementSiblingPtr =
      _lookup<ffi.NativeFunction<xmlNodePtr Function(xmlNodePtr)>>(
          'xmlNextElementSibling');
  late final _xmlNextElementSibling =
      _xmlNextElementSiblingPtr.asFunction<xmlNodePtr Function(xmlNodePtr)>();

  xmlNodePtr xmlFirstElementChild(
    xmlNodePtr parent,
  ) {
    return _xmlFirstElementChild(
      parent,
    );
  }

  late final _xmlFirstElementChildPtr =
      _lookup<ffi.NativeFunction<xmlNodePtr Function(xmlNodePtr)>>(
          'xmlFirstElementChild');
  late final _xmlFirstElementChild =
      _xmlFirstElementChildPtr.asFunction<xmlNodePtr Function(xmlNodePtr)>();

  xmlNodePtr xmlLastElementChild(
    xmlNodePtr parent,
  ) {
    return _xmlLastElementChild(
      parent,
    );
  }

  late final _xmlLastElementChildPtr =
      _lookup<ffi.NativeFunction<xmlNodePtr Function(xmlNodePtr)>>(
          'xmlLastElementChild');
  late final _xmlLastElementChild =
      _xmlLastElementChildPtr.asFunction<xmlNodePtr Function(xmlNodePtr)>();

  xmlNodePtr xmlPreviousElementSibling(
    xmlNodePtr node,
  ) {
    return _xmlPreviousElementSibling(
      node,
    );
  }

  late final _xmlPreviousElementSiblingPtr =
      _lookup<ffi.NativeFunction<xmlNodePtr Function(xmlNodePtr)>>(
          'xmlPreviousElementSibling');
  late final _xmlPreviousElementSibling = _xmlPreviousElementSiblingPtr
      .asFunction<xmlNodePtr Function(xmlNodePtr)>();

  int xmlMemSetup(
    xmlFreeFunc freeFunc,
    xmlMallocFunc mallocFunc,
    xmlReallocFunc reallocFunc,
    xmlStrdupFunc strdupFunc,
  ) {
    return _xmlMemSetup(
      freeFunc,
      mallocFunc,
      reallocFunc,
      strdupFunc,
    );
  }

  late final _xmlMemSetupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(xmlFreeFunc, xmlMallocFunc, xmlReallocFunc,
              xmlStrdupFunc)>>('xmlMemSetup');
  late final _xmlMemSetup = _xmlMemSetupPtr.asFunction<
      int Function(
          xmlFreeFunc, xmlMallocFunc, xmlReallocFunc, xmlStrdupFunc)>();

  int xmlMemGet(
    ffi.Pointer<xmlFreeFunc> freeFunc,
    ffi.Pointer<xmlMallocFunc> mallocFunc,
    ffi.Pointer<xmlReallocFunc> reallocFunc,
    ffi.Pointer<xmlStrdupFunc> strdupFunc,
  ) {
    return _xmlMemGet(
      freeFunc,
      mallocFunc,
      reallocFunc,
      strdupFunc,
    );
  }

  late final _xmlMemGetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<xmlFreeFunc>,
              ffi.Pointer<xmlMallocFunc>,
              ffi.Pointer<xmlReallocFunc>,
              ffi.Pointer<xmlStrdupFunc>)>>('xmlMemGet');
  late final _xmlMemGet = _xmlMemGetPtr.asFunction<
      int Function(ffi.Pointer<xmlFreeFunc>, ffi.Pointer<xmlMallocFunc>,
          ffi.Pointer<xmlReallocFunc>, ffi.Pointer<xmlStrdupFunc>)>();

  int xmlGcMemSetup(
    xmlFreeFunc freeFunc,
    xmlMallocFunc mallocFunc,
    xmlMallocFunc mallocAtomicFunc,
    xmlReallocFunc reallocFunc,
    xmlStrdupFunc strdupFunc,
  ) {
    return _xmlGcMemSetup(
      freeFunc,
      mallocFunc,
      mallocAtomicFunc,
      reallocFunc,
      strdupFunc,
    );
  }

  late final _xmlGcMemSetupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(xmlFreeFunc, xmlMallocFunc, xmlMallocFunc,
              xmlReallocFunc, xmlStrdupFunc)>>('xmlGcMemSetup');
  late final _xmlGcMemSetup = _xmlGcMemSetupPtr.asFunction<
      int Function(xmlFreeFunc, xmlMallocFunc, xmlMallocFunc, xmlReallocFunc,
          xmlStrdupFunc)>();

  int xmlGcMemGet(
    ffi.Pointer<xmlFreeFunc> freeFunc,
    ffi.Pointer<xmlMallocFunc> mallocFunc,
    ffi.Pointer<xmlMallocFunc> mallocAtomicFunc,
    ffi.Pointer<xmlReallocFunc> reallocFunc,
    ffi.Pointer<xmlStrdupFunc> strdupFunc,
  ) {
    return _xmlGcMemGet(
      freeFunc,
      mallocFunc,
      mallocAtomicFunc,
      reallocFunc,
      strdupFunc,
    );
  }

  late final _xmlGcMemGetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<xmlFreeFunc>,
              ffi.Pointer<xmlMallocFunc>,
              ffi.Pointer<xmlMallocFunc>,
              ffi.Pointer<xmlReallocFunc>,
              ffi.Pointer<xmlStrdupFunc>)>>('xmlGcMemGet');
  late final _xmlGcMemGet = _xmlGcMemGetPtr.asFunction<
      int Function(
          ffi.Pointer<xmlFreeFunc>,
          ffi.Pointer<xmlMallocFunc>,
          ffi.Pointer<xmlMallocFunc>,
          ffi.Pointer<xmlReallocFunc>,
          ffi.Pointer<xmlStrdupFunc>)>();

  int xmlInitMemory() {
    return _xmlInitMemory();
  }

  late final _xmlInitMemoryPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('xmlInitMemory');
  late final _xmlInitMemory = _xmlInitMemoryPtr.asFunction<int Function()>();

  void xmlCleanupMemory() {
    return _xmlCleanupMemory();
  }

  late final _xmlCleanupMemoryPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('xmlCleanupMemory');
  late final _xmlCleanupMemory =
      _xmlCleanupMemoryPtr.asFunction<void Function()>();

  int xmlMemUsed() {
    return _xmlMemUsed();
  }

  late final _xmlMemUsedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('xmlMemUsed');
  late final _xmlMemUsed = _xmlMemUsedPtr.asFunction<int Function()>();

  int xmlMemBlocks() {
    return _xmlMemBlocks();
  }

  late final _xmlMemBlocksPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('xmlMemBlocks');
  late final _xmlMemBlocks = _xmlMemBlocksPtr.asFunction<int Function()>();

  void xmlMemDisplay(
    ffi.Pointer<FILE> fp,
  ) {
    return _xmlMemDisplay(
      fp,
    );
  }

  late final _xmlMemDisplayPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'xmlMemDisplay');
  late final _xmlMemDisplay =
      _xmlMemDisplayPtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  void xmlMemDisplayLast(
    ffi.Pointer<FILE> fp,
    int nbBytes,
  ) {
    return _xmlMemDisplayLast(
      fp,
      nbBytes,
    );
  }

  late final _xmlMemDisplayLastPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>, ffi.Long)>>(
      'xmlMemDisplayLast');
  late final _xmlMemDisplayLast =
      _xmlMemDisplayLastPtr.asFunction<void Function(ffi.Pointer<FILE>, int)>();

  void xmlMemShow(
    ffi.Pointer<FILE> fp,
    int nr,
  ) {
    return _xmlMemShow(
      fp,
      nr,
    );
  }

  late final _xmlMemShowPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>, ffi.Int)>>(
      'xmlMemShow');
  late final _xmlMemShow =
      _xmlMemShowPtr.asFunction<void Function(ffi.Pointer<FILE>, int)>();

  void xmlMemoryDump() {
    return _xmlMemoryDump();
  }

  late final _xmlMemoryDumpPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('xmlMemoryDump');
  late final _xmlMemoryDump = _xmlMemoryDumpPtr.asFunction<void Function()>();

  ffi.Pointer<ffi.Void> xmlMemMalloc(
    int size,
  ) {
    return _xmlMemMalloc(
      size,
    );
  }

  late final _xmlMemMallocPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Size)>>(
          'xmlMemMalloc');
  late final _xmlMemMalloc =
      _xmlMemMallocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> xmlMemRealloc(
    ffi.Pointer<ffi.Void> ptr,
    int size,
  ) {
    return _xmlMemRealloc(
      ptr,
      size,
    );
  }

  late final _xmlMemReallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Size)>>('xmlMemRealloc');
  late final _xmlMemRealloc = _xmlMemReallocPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  void xmlMemFree(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _xmlMemFree(
      ptr,
    );
  }

  late final _xmlMemFreePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'xmlMemFree');
  late final _xmlMemFree =
      _xmlMemFreePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Char> xmlMemoryStrdup(
    ffi.Pointer<ffi.Char> str,
  ) {
    return _xmlMemoryStrdup(
      str,
    );
  }

  late final _xmlMemoryStrdupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('xmlMemoryStrdup');
  late final _xmlMemoryStrdup = _xmlMemoryStrdupPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Void> xmlMallocLoc(
    int size,
    ffi.Pointer<ffi.Char> file,
    int line,
  ) {
    return _xmlMallocLoc(
      size,
      file,
      line,
    );
  }

  late final _xmlMallocLocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Size, ffi.Pointer<ffi.Char>, ffi.Int)>>('xmlMallocLoc');
  late final _xmlMallocLoc = _xmlMallocLocPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(int, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Void> xmlReallocLoc(
    ffi.Pointer<ffi.Void> ptr,
    int size,
    ffi.Pointer<ffi.Char> file,
    int line,
  ) {
    return _xmlReallocLoc(
      ptr,
      size,
      file,
      line,
    );
  }

  late final _xmlReallocLocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, ffi.Size,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('xmlReallocLoc');
  late final _xmlReallocLoc = _xmlReallocLocPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Void> xmlMallocAtomicLoc(
    int size,
    ffi.Pointer<ffi.Char> file,
    int line,
  ) {
    return _xmlMallocAtomicLoc(
      size,
      file,
      line,
    );
  }

  late final _xmlMallocAtomicLocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Size, ffi.Pointer<ffi.Char>, ffi.Int)>>('xmlMallocAtomicLoc');
  late final _xmlMallocAtomicLoc = _xmlMallocAtomicLocPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(int, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> xmlMemStrdupLoc(
    ffi.Pointer<ffi.Char> str,
    ffi.Pointer<ffi.Char> file,
    int line,
  ) {
    return _xmlMemStrdupLoc(
      str,
      file,
      line,
    );
  }

  late final _xmlMemStrdupLocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('xmlMemStrdupLoc');
  late final _xmlMemStrdupLoc = _xmlMemStrdupLocPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  xmlHashTablePtr xmlHashCreate(
    int size,
  ) {
    return _xmlHashCreate(
      size,
    );
  }

  late final _xmlHashCreatePtr =
      _lookup<ffi.NativeFunction<xmlHashTablePtr Function(ffi.Int)>>(
          'xmlHashCreate');
  late final _xmlHashCreate =
      _xmlHashCreatePtr.asFunction<xmlHashTablePtr Function(int)>();

  xmlHashTablePtr xmlHashCreateDict(
    int size,
    xmlDictPtr dict,
  ) {
    return _xmlHashCreateDict(
      size,
      dict,
    );
  }

  late final _xmlHashCreateDictPtr = _lookup<
          ffi.NativeFunction<xmlHashTablePtr Function(ffi.Int, xmlDictPtr)>>(
      'xmlHashCreateDict');
  late final _xmlHashCreateDict = _xmlHashCreateDictPtr
      .asFunction<xmlHashTablePtr Function(int, xmlDictPtr)>();

  void xmlHashFree(
    xmlHashTablePtr table,
    xmlHashDeallocator f,
  ) {
    return _xmlHashFree(
      table,
      f,
    );
  }

  late final _xmlHashFreePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              xmlHashTablePtr, xmlHashDeallocator)>>('xmlHashFree');
  late final _xmlHashFree = _xmlHashFreePtr
      .asFunction<void Function(xmlHashTablePtr, xmlHashDeallocator)>();

  void xmlHashDefaultDeallocator(
    ffi.Pointer<ffi.Void> entry,
    ffi.Pointer<xmlChar> name,
  ) {
    return _xmlHashDefaultDeallocator(
      entry,
      name,
    );
  }

  late final _xmlHashDefaultDeallocatorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<xmlChar>)>>('xmlHashDefaultDeallocator');
  late final _xmlHashDefaultDeallocator = _xmlHashDefaultDeallocatorPtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<xmlChar>)>();

  int xmlHashAddEntry(
    xmlHashTablePtr table,
    ffi.Pointer<xmlChar> name,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _xmlHashAddEntry(
      table,
      name,
      userdata,
    );
  }

  late final _xmlHashAddEntryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(xmlHashTablePtr, ffi.Pointer<xmlChar>,
              ffi.Pointer<ffi.Void>)>>('xmlHashAddEntry');
  late final _xmlHashAddEntry = _xmlHashAddEntryPtr.asFunction<
      int Function(
          xmlHashTablePtr, ffi.Pointer<xmlChar>, ffi.Pointer<ffi.Void>)>();

  int xmlHashUpdateEntry(
    xmlHashTablePtr table,
    ffi.Pointer<xmlChar> name,
    ffi.Pointer<ffi.Void> userdata,
    xmlHashDeallocator f,
  ) {
    return _xmlHashUpdateEntry(
      table,
      name,
      userdata,
      f,
    );
  }

  late final _xmlHashUpdateEntryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              xmlHashTablePtr,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<ffi.Void>,
              xmlHashDeallocator)>>('xmlHashUpdateEntry');
  late final _xmlHashUpdateEntry = _xmlHashUpdateEntryPtr.asFunction<
      int Function(xmlHashTablePtr, ffi.Pointer<xmlChar>, ffi.Pointer<ffi.Void>,
          xmlHashDeallocator)>();

  int xmlHashAddEntry2(
    xmlHashTablePtr table,
    ffi.Pointer<xmlChar> name,
    ffi.Pointer<xmlChar> name2,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _xmlHashAddEntry2(
      table,
      name,
      name2,
      userdata,
    );
  }

  late final _xmlHashAddEntry2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              xmlHashTablePtr,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<ffi.Void>)>>('xmlHashAddEntry2');
  late final _xmlHashAddEntry2 = _xmlHashAddEntry2Ptr.asFunction<
      int Function(xmlHashTablePtr, ffi.Pointer<xmlChar>, ffi.Pointer<xmlChar>,
          ffi.Pointer<ffi.Void>)>();

  int xmlHashUpdateEntry2(
    xmlHashTablePtr table,
    ffi.Pointer<xmlChar> name,
    ffi.Pointer<xmlChar> name2,
    ffi.Pointer<ffi.Void> userdata,
    xmlHashDeallocator f,
  ) {
    return _xmlHashUpdateEntry2(
      table,
      name,
      name2,
      userdata,
      f,
    );
  }

  late final _xmlHashUpdateEntry2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              xmlHashTablePtr,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<ffi.Void>,
              xmlHashDeallocator)>>('xmlHashUpdateEntry2');
  late final _xmlHashUpdateEntry2 = _xmlHashUpdateEntry2Ptr.asFunction<
      int Function(xmlHashTablePtr, ffi.Pointer<xmlChar>, ffi.Pointer<xmlChar>,
          ffi.Pointer<ffi.Void>, xmlHashDeallocator)>();

  int xmlHashAddEntry3(
    xmlHashTablePtr table,
    ffi.Pointer<xmlChar> name,
    ffi.Pointer<xmlChar> name2,
    ffi.Pointer<xmlChar> name3,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _xmlHashAddEntry3(
      table,
      name,
      name2,
      name3,
      userdata,
    );
  }

  late final _xmlHashAddEntry3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              xmlHashTablePtr,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<ffi.Void>)>>('xmlHashAddEntry3');
  late final _xmlHashAddEntry3 = _xmlHashAddEntry3Ptr.asFunction<
      int Function(xmlHashTablePtr, ffi.Pointer<xmlChar>, ffi.Pointer<xmlChar>,
          ffi.Pointer<xmlChar>, ffi.Pointer<ffi.Void>)>();

  int xmlHashUpdateEntry3(
    xmlHashTablePtr table,
    ffi.Pointer<xmlChar> name,
    ffi.Pointer<xmlChar> name2,
    ffi.Pointer<xmlChar> name3,
    ffi.Pointer<ffi.Void> userdata,
    xmlHashDeallocator f,
  ) {
    return _xmlHashUpdateEntry3(
      table,
      name,
      name2,
      name3,
      userdata,
      f,
    );
  }

  late final _xmlHashUpdateEntry3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              xmlHashTablePtr,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<ffi.Void>,
              xmlHashDeallocator)>>('xmlHashUpdateEntry3');
  late final _xmlHashUpdateEntry3 = _xmlHashUpdateEntry3Ptr.asFunction<
      int Function(xmlHashTablePtr, ffi.Pointer<xmlChar>, ffi.Pointer<xmlChar>,
          ffi.Pointer<xmlChar>, ffi.Pointer<ffi.Void>, xmlHashDeallocator)>();

  int xmlHashRemoveEntry(
    xmlHashTablePtr table,
    ffi.Pointer<xmlChar> name,
    xmlHashDeallocator f,
  ) {
    return _xmlHashRemoveEntry(
      table,
      name,
      f,
    );
  }

  late final _xmlHashRemoveEntryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(xmlHashTablePtr, ffi.Pointer<xmlChar>,
              xmlHashDeallocator)>>('xmlHashRemoveEntry');
  late final _xmlHashRemoveEntry = _xmlHashRemoveEntryPtr.asFunction<
      int Function(
          xmlHashTablePtr, ffi.Pointer<xmlChar>, xmlHashDeallocator)>();

  int xmlHashRemoveEntry2(
    xmlHashTablePtr table,
    ffi.Pointer<xmlChar> name,
    ffi.Pointer<xmlChar> name2,
    xmlHashDeallocator f,
  ) {
    return _xmlHashRemoveEntry2(
      table,
      name,
      name2,
      f,
    );
  }

  late final _xmlHashRemoveEntry2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              xmlHashTablePtr,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>,
              xmlHashDeallocator)>>('xmlHashRemoveEntry2');
  late final _xmlHashRemoveEntry2 = _xmlHashRemoveEntry2Ptr.asFunction<
      int Function(xmlHashTablePtr, ffi.Pointer<xmlChar>, ffi.Pointer<xmlChar>,
          xmlHashDeallocator)>();

  int xmlHashRemoveEntry3(
    xmlHashTablePtr table,
    ffi.Pointer<xmlChar> name,
    ffi.Pointer<xmlChar> name2,
    ffi.Pointer<xmlChar> name3,
    xmlHashDeallocator f,
  ) {
    return _xmlHashRemoveEntry3(
      table,
      name,
      name2,
      name3,
      f,
    );
  }

  late final _xmlHashRemoveEntry3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              xmlHashTablePtr,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>,
              xmlHashDeallocator)>>('xmlHashRemoveEntry3');
  late final _xmlHashRemoveEntry3 = _xmlHashRemoveEntry3Ptr.asFunction<
      int Function(xmlHashTablePtr, ffi.Pointer<xmlChar>, ffi.Pointer<xmlChar>,
          ffi.Pointer<xmlChar>, xmlHashDeallocator)>();

  ffi.Pointer<ffi.Void> xmlHashLookup(
    xmlHashTablePtr table,
    ffi.Pointer<xmlChar> name,
  ) {
    return _xmlHashLookup(
      table,
      name,
    );
  }

  late final _xmlHashLookupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              xmlHashTablePtr, ffi.Pointer<xmlChar>)>>('xmlHashLookup');
  late final _xmlHashLookup = _xmlHashLookupPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(xmlHashTablePtr, ffi.Pointer<xmlChar>)>();

  ffi.Pointer<ffi.Void> xmlHashLookup2(
    xmlHashTablePtr table,
    ffi.Pointer<xmlChar> name,
    ffi.Pointer<xmlChar> name2,
  ) {
    return _xmlHashLookup2(
      table,
      name,
      name2,
    );
  }

  late final _xmlHashLookup2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(xmlHashTablePtr, ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>)>>('xmlHashLookup2');
  late final _xmlHashLookup2 = _xmlHashLookup2Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          xmlHashTablePtr, ffi.Pointer<xmlChar>, ffi.Pointer<xmlChar>)>();

  ffi.Pointer<ffi.Void> xmlHashLookup3(
    xmlHashTablePtr table,
    ffi.Pointer<xmlChar> name,
    ffi.Pointer<xmlChar> name2,
    ffi.Pointer<xmlChar> name3,
  ) {
    return _xmlHashLookup3(
      table,
      name,
      name2,
      name3,
    );
  }

  late final _xmlHashLookup3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(xmlHashTablePtr, ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>, ffi.Pointer<xmlChar>)>>('xmlHashLookup3');
  late final _xmlHashLookup3 = _xmlHashLookup3Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(xmlHashTablePtr, ffi.Pointer<xmlChar>,
          ffi.Pointer<xmlChar>, ffi.Pointer<xmlChar>)>();

  ffi.Pointer<ffi.Void> xmlHashQLookup(
    xmlHashTablePtr table,
    ffi.Pointer<xmlChar> name,
    ffi.Pointer<xmlChar> prefix,
  ) {
    return _xmlHashQLookup(
      table,
      name,
      prefix,
    );
  }

  late final _xmlHashQLookupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(xmlHashTablePtr, ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>)>>('xmlHashQLookup');
  late final _xmlHashQLookup = _xmlHashQLookupPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          xmlHashTablePtr, ffi.Pointer<xmlChar>, ffi.Pointer<xmlChar>)>();

  ffi.Pointer<ffi.Void> xmlHashQLookup2(
    xmlHashTablePtr table,
    ffi.Pointer<xmlChar> name,
    ffi.Pointer<xmlChar> prefix,
    ffi.Pointer<xmlChar> name2,
    ffi.Pointer<xmlChar> prefix2,
  ) {
    return _xmlHashQLookup2(
      table,
      name,
      prefix,
      name2,
      prefix2,
    );
  }

  late final _xmlHashQLookup2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              xmlHashTablePtr,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>)>>('xmlHashQLookup2');
  late final _xmlHashQLookup2 = _xmlHashQLookup2Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(xmlHashTablePtr, ffi.Pointer<xmlChar>,
          ffi.Pointer<xmlChar>, ffi.Pointer<xmlChar>, ffi.Pointer<xmlChar>)>();

  ffi.Pointer<ffi.Void> xmlHashQLookup3(
    xmlHashTablePtr table,
    ffi.Pointer<xmlChar> name,
    ffi.Pointer<xmlChar> prefix,
    ffi.Pointer<xmlChar> name2,
    ffi.Pointer<xmlChar> prefix2,
    ffi.Pointer<xmlChar> name3,
    ffi.Pointer<xmlChar> prefix3,
  ) {
    return _xmlHashQLookup3(
      table,
      name,
      prefix,
      name2,
      prefix2,
      name3,
      prefix3,
    );
  }

  late final _xmlHashQLookup3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              xmlHashTablePtr,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>)>>('xmlHashQLookup3');
  late final _xmlHashQLookup3 = _xmlHashQLookup3Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          xmlHashTablePtr,
          ffi.Pointer<xmlChar>,
          ffi.Pointer<xmlChar>,
          ffi.Pointer<xmlChar>,
          ffi.Pointer<xmlChar>,
          ffi.Pointer<xmlChar>,
          ffi.Pointer<xmlChar>)>();

  xmlHashTablePtr xmlHashCopy(
    xmlHashTablePtr table,
    xmlHashCopier f,
  ) {
    return _xmlHashCopy(
      table,
      f,
    );
  }

  late final _xmlHashCopyPtr = _lookup<
      ffi.NativeFunction<
          xmlHashTablePtr Function(
              xmlHashTablePtr, xmlHashCopier)>>('xmlHashCopy');
  late final _xmlHashCopy = _xmlHashCopyPtr
      .asFunction<xmlHashTablePtr Function(xmlHashTablePtr, xmlHashCopier)>();

  int xmlHashSize(
    xmlHashTablePtr table,
  ) {
    return _xmlHashSize(
      table,
    );
  }

  late final _xmlHashSizePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(xmlHashTablePtr)>>(
          'xmlHashSize');
  late final _xmlHashSize =
      _xmlHashSizePtr.asFunction<int Function(xmlHashTablePtr)>();

  void xmlHashScan(
    xmlHashTablePtr table,
    xmlHashScanner f,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _xmlHashScan(
      table,
      f,
      data,
    );
  }

  late final _xmlHashScanPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(xmlHashTablePtr, xmlHashScanner,
              ffi.Pointer<ffi.Void>)>>('xmlHashScan');
  late final _xmlHashScan = _xmlHashScanPtr.asFunction<
      void Function(xmlHashTablePtr, xmlHashScanner, ffi.Pointer<ffi.Void>)>();

  void xmlHashScan3(
    xmlHashTablePtr table,
    ffi.Pointer<xmlChar> name,
    ffi.Pointer<xmlChar> name2,
    ffi.Pointer<xmlChar> name3,
    xmlHashScanner f,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _xmlHashScan3(
      table,
      name,
      name2,
      name3,
      f,
      data,
    );
  }

  late final _xmlHashScan3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              xmlHashTablePtr,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>,
              xmlHashScanner,
              ffi.Pointer<ffi.Void>)>>('xmlHashScan3');
  late final _xmlHashScan3 = _xmlHashScan3Ptr.asFunction<
      void Function(xmlHashTablePtr, ffi.Pointer<xmlChar>, ffi.Pointer<xmlChar>,
          ffi.Pointer<xmlChar>, xmlHashScanner, ffi.Pointer<ffi.Void>)>();

  void xmlHashScanFull(
    xmlHashTablePtr table,
    xmlHashScannerFull f,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _xmlHashScanFull(
      table,
      f,
      data,
    );
  }

  late final _xmlHashScanFullPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(xmlHashTablePtr, xmlHashScannerFull,
              ffi.Pointer<ffi.Void>)>>('xmlHashScanFull');
  late final _xmlHashScanFull = _xmlHashScanFullPtr.asFunction<
      void Function(
          xmlHashTablePtr, xmlHashScannerFull, ffi.Pointer<ffi.Void>)>();

  void xmlHashScanFull3(
    xmlHashTablePtr table,
    ffi.Pointer<xmlChar> name,
    ffi.Pointer<xmlChar> name2,
    ffi.Pointer<xmlChar> name3,
    xmlHashScannerFull f,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _xmlHashScanFull3(
      table,
      name,
      name2,
      name3,
      f,
      data,
    );
  }

  late final _xmlHashScanFull3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              xmlHashTablePtr,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>,
              xmlHashScannerFull,
              ffi.Pointer<ffi.Void>)>>('xmlHashScanFull3');
  late final _xmlHashScanFull3 = _xmlHashScanFull3Ptr.asFunction<
      void Function(xmlHashTablePtr, ffi.Pointer<xmlChar>, ffi.Pointer<xmlChar>,
          ffi.Pointer<xmlChar>, xmlHashScannerFull, ffi.Pointer<ffi.Void>)>();

  void xmlSetGenericErrorFunc(
    ffi.Pointer<ffi.Void> ctx,
    xmlGenericErrorFunc handler,
  ) {
    return _xmlSetGenericErrorFunc(
      ctx,
      handler,
    );
  }

  late final _xmlSetGenericErrorFuncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>,
              xmlGenericErrorFunc)>>('xmlSetGenericErrorFunc');
  late final _xmlSetGenericErrorFunc = _xmlSetGenericErrorFuncPtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>, xmlGenericErrorFunc)>();

  void initGenericErrorDefaultFunc(
    ffi.Pointer<xmlGenericErrorFunc> handler,
  ) {
    return _initGenericErrorDefaultFunc(
      handler,
    );
  }

  late final _initGenericErrorDefaultFuncPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<xmlGenericErrorFunc>)>>(
      'initGenericErrorDefaultFunc');
  late final _initGenericErrorDefaultFunc = _initGenericErrorDefaultFuncPtr
      .asFunction<void Function(ffi.Pointer<xmlGenericErrorFunc>)>();

  void xmlSetStructuredErrorFunc(
    ffi.Pointer<ffi.Void> ctx,
    xmlStructuredErrorFunc handler,
  ) {
    return _xmlSetStructuredErrorFunc(
      ctx,
      handler,
    );
  }

  late final _xmlSetStructuredErrorFuncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>,
              xmlStructuredErrorFunc)>>('xmlSetStructuredErrorFunc');
  late final _xmlSetStructuredErrorFunc =
      _xmlSetStructuredErrorFuncPtr.asFunction<
          void Function(ffi.Pointer<ffi.Void>, xmlStructuredErrorFunc)>();

  void xmlParserError(
    ffi.Pointer<ffi.Void> ctx,
    ffi.Pointer<ffi.Char> msg,
  ) {
    return _xmlParserError(
      ctx,
      msg,
    );
  }

  late final _xmlParserErrorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>>('xmlParserError');
  late final _xmlParserError = _xmlParserErrorPtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>();

  void xmlParserWarning(
    ffi.Pointer<ffi.Void> ctx,
    ffi.Pointer<ffi.Char> msg,
  ) {
    return _xmlParserWarning(
      ctx,
      msg,
    );
  }

  late final _xmlParserWarningPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>)>>('xmlParserWarning');
  late final _xmlParserWarning = _xmlParserWarningPtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>();

  void xmlParserValidityError(
    ffi.Pointer<ffi.Void> ctx,
    ffi.Pointer<ffi.Char> msg,
  ) {
    return _xmlParserValidityError(
      ctx,
      msg,
    );
  }

  late final _xmlParserValidityErrorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>)>>('xmlParserValidityError');
  late final _xmlParserValidityError = _xmlParserValidityErrorPtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>();

  void xmlParserValidityWarning(
    ffi.Pointer<ffi.Void> ctx,
    ffi.Pointer<ffi.Char> msg,
  ) {
    return _xmlParserValidityWarning(
      ctx,
      msg,
    );
  }

  late final _xmlParserValidityWarningPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>)>>('xmlParserValidityWarning');
  late final _xmlParserValidityWarning =
      _xmlParserValidityWarningPtr.asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>();

  void xmlParserPrintFileInfo(
    xmlParserInputPtr input,
  ) {
    return _xmlParserPrintFileInfo(
      input,
    );
  }

  late final _xmlParserPrintFileInfoPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(xmlParserInputPtr)>>(
          'xmlParserPrintFileInfo');
  late final _xmlParserPrintFileInfo =
      _xmlParserPrintFileInfoPtr.asFunction<void Function(xmlParserInputPtr)>();

  void xmlParserPrintFileContext(
    xmlParserInputPtr input,
  ) {
    return _xmlParserPrintFileContext(
      input,
    );
  }

  late final _xmlParserPrintFileContextPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(xmlParserInputPtr)>>(
          'xmlParserPrintFileContext');
  late final _xmlParserPrintFileContext = _xmlParserPrintFileContextPtr
      .asFunction<void Function(xmlParserInputPtr)>();

  xmlErrorPtr xmlGetLastError() {
    return _xmlGetLastError();
  }

  late final _xmlGetLastErrorPtr =
      _lookup<ffi.NativeFunction<xmlErrorPtr Function()>>('xmlGetLastError');
  late final _xmlGetLastError =
      _xmlGetLastErrorPtr.asFunction<xmlErrorPtr Function()>();

  void xmlResetLastError() {
    return _xmlResetLastError();
  }

  late final _xmlResetLastErrorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('xmlResetLastError');
  late final _xmlResetLastError =
      _xmlResetLastErrorPtr.asFunction<void Function()>();

  xmlErrorPtr xmlCtxtGetLastError(
    ffi.Pointer<ffi.Void> ctx,
  ) {
    return _xmlCtxtGetLastError(
      ctx,
    );
  }

  late final _xmlCtxtGetLastErrorPtr =
      _lookup<ffi.NativeFunction<xmlErrorPtr Function(ffi.Pointer<ffi.Void>)>>(
          'xmlCtxtGetLastError');
  late final _xmlCtxtGetLastError = _xmlCtxtGetLastErrorPtr
      .asFunction<xmlErrorPtr Function(ffi.Pointer<ffi.Void>)>();

  void xmlCtxtResetLastError(
    ffi.Pointer<ffi.Void> ctx,
  ) {
    return _xmlCtxtResetLastError(
      ctx,
    );
  }

  late final _xmlCtxtResetLastErrorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'xmlCtxtResetLastError');
  late final _xmlCtxtResetLastError = _xmlCtxtResetLastErrorPtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void xmlResetError(
    xmlErrorPtr err,
  ) {
    return _xmlResetError(
      err,
    );
  }

  late final _xmlResetErrorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(xmlErrorPtr)>>(
          'xmlResetError');
  late final _xmlResetError =
      _xmlResetErrorPtr.asFunction<void Function(xmlErrorPtr)>();

  int xmlCopyError(
    xmlErrorPtr from,
    xmlErrorPtr to,
  ) {
    return _xmlCopyError(
      from,
      to,
    );
  }

  late final _xmlCopyErrorPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(xmlErrorPtr, xmlErrorPtr)>>(
          'xmlCopyError');
  late final _xmlCopyError =
      _xmlCopyErrorPtr.asFunction<int Function(xmlErrorPtr, xmlErrorPtr)>();

  xmlListPtr xmlListCreate(
    xmlListDeallocator deallocator,
    xmlListDataCompare compare,
  ) {
    return _xmlListCreate(
      deallocator,
      compare,
    );
  }

  late final _xmlListCreatePtr = _lookup<
      ffi.NativeFunction<
          xmlListPtr Function(
              xmlListDeallocator, xmlListDataCompare)>>('xmlListCreate');
  late final _xmlListCreate = _xmlListCreatePtr.asFunction<
      xmlListPtr Function(xmlListDeallocator, xmlListDataCompare)>();

  void xmlListDelete(
    xmlListPtr l,
  ) {
    return _xmlListDelete(
      l,
    );
  }

  late final _xmlListDeletePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(xmlListPtr)>>(
          'xmlListDelete');
  late final _xmlListDelete =
      _xmlListDeletePtr.asFunction<void Function(xmlListPtr)>();

  ffi.Pointer<ffi.Void> xmlListSearch(
    xmlListPtr l,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _xmlListSearch(
      l,
      data,
    );
  }

  late final _xmlListSearchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              xmlListPtr, ffi.Pointer<ffi.Void>)>>('xmlListSearch');
  late final _xmlListSearch = _xmlListSearchPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(xmlListPtr, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> xmlListReverseSearch(
    xmlListPtr l,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _xmlListReverseSearch(
      l,
      data,
    );
  }

  late final _xmlListReverseSearchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              xmlListPtr, ffi.Pointer<ffi.Void>)>>('xmlListReverseSearch');
  late final _xmlListReverseSearch = _xmlListReverseSearchPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(xmlListPtr, ffi.Pointer<ffi.Void>)>();

  int xmlListInsert(
    xmlListPtr l,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _xmlListInsert(
      l,
      data,
    );
  }

  late final _xmlListInsertPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int Function(xmlListPtr, ffi.Pointer<ffi.Void>)>>(
      'xmlListInsert');
  late final _xmlListInsert = _xmlListInsertPtr
      .asFunction<int Function(xmlListPtr, ffi.Pointer<ffi.Void>)>();

  int xmlListAppend(
    xmlListPtr l,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _xmlListAppend(
      l,
      data,
    );
  }

  late final _xmlListAppendPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int Function(xmlListPtr, ffi.Pointer<ffi.Void>)>>(
      'xmlListAppend');
  late final _xmlListAppend = _xmlListAppendPtr
      .asFunction<int Function(xmlListPtr, ffi.Pointer<ffi.Void>)>();

  int xmlListRemoveFirst(
    xmlListPtr l,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _xmlListRemoveFirst(
      l,
      data,
    );
  }

  late final _xmlListRemoveFirstPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int Function(xmlListPtr, ffi.Pointer<ffi.Void>)>>(
      'xmlListRemoveFirst');
  late final _xmlListRemoveFirst = _xmlListRemoveFirstPtr
      .asFunction<int Function(xmlListPtr, ffi.Pointer<ffi.Void>)>();

  int xmlListRemoveLast(
    xmlListPtr l,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _xmlListRemoveLast(
      l,
      data,
    );
  }

  late final _xmlListRemoveLastPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int Function(xmlListPtr, ffi.Pointer<ffi.Void>)>>(
      'xmlListRemoveLast');
  late final _xmlListRemoveLast = _xmlListRemoveLastPtr
      .asFunction<int Function(xmlListPtr, ffi.Pointer<ffi.Void>)>();

  int xmlListRemoveAll(
    xmlListPtr l,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _xmlListRemoveAll(
      l,
      data,
    );
  }

  late final _xmlListRemoveAllPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int Function(xmlListPtr, ffi.Pointer<ffi.Void>)>>(
      'xmlListRemoveAll');
  late final _xmlListRemoveAll = _xmlListRemoveAllPtr
      .asFunction<int Function(xmlListPtr, ffi.Pointer<ffi.Void>)>();

  void xmlListClear(
    xmlListPtr l,
  ) {
    return _xmlListClear(
      l,
    );
  }

  late final _xmlListClearPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(xmlListPtr)>>(
          'xmlListClear');
  late final _xmlListClear =
      _xmlListClearPtr.asFunction<void Function(xmlListPtr)>();

  int xmlListEmpty(
    xmlListPtr l,
  ) {
    return _xmlListEmpty(
      l,
    );
  }

  late final _xmlListEmptyPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(xmlListPtr)>>('xmlListEmpty');
  late final _xmlListEmpty =
      _xmlListEmptyPtr.asFunction<int Function(xmlListPtr)>();

  xmlLinkPtr xmlListFront(
    xmlListPtr l,
  ) {
    return _xmlListFront(
      l,
    );
  }

  late final _xmlListFrontPtr =
      _lookup<ffi.NativeFunction<xmlLinkPtr Function(xmlListPtr)>>(
          'xmlListFront');
  late final _xmlListFront =
      _xmlListFrontPtr.asFunction<xmlLinkPtr Function(xmlListPtr)>();

  xmlLinkPtr xmlListEnd(
    xmlListPtr l,
  ) {
    return _xmlListEnd(
      l,
    );
  }

  late final _xmlListEndPtr =
      _lookup<ffi.NativeFunction<xmlLinkPtr Function(xmlListPtr)>>(
          'xmlListEnd');
  late final _xmlListEnd =
      _xmlListEndPtr.asFunction<xmlLinkPtr Function(xmlListPtr)>();

  int xmlListSize(
    xmlListPtr l,
  ) {
    return _xmlListSize(
      l,
    );
  }

  late final _xmlListSizePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(xmlListPtr)>>('xmlListSize');
  late final _xmlListSize =
      _xmlListSizePtr.asFunction<int Function(xmlListPtr)>();

  void xmlListPopFront(
    xmlListPtr l,
  ) {
    return _xmlListPopFront(
      l,
    );
  }

  late final _xmlListPopFrontPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(xmlListPtr)>>(
          'xmlListPopFront');
  late final _xmlListPopFront =
      _xmlListPopFrontPtr.asFunction<void Function(xmlListPtr)>();

  void xmlListPopBack(
    xmlListPtr l,
  ) {
    return _xmlListPopBack(
      l,
    );
  }

  late final _xmlListPopBackPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(xmlListPtr)>>(
          'xmlListPopBack');
  late final _xmlListPopBack =
      _xmlListPopBackPtr.asFunction<void Function(xmlListPtr)>();

  int xmlListPushFront(
    xmlListPtr l,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _xmlListPushFront(
      l,
      data,
    );
  }

  late final _xmlListPushFrontPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int Function(xmlListPtr, ffi.Pointer<ffi.Void>)>>(
      'xmlListPushFront');
  late final _xmlListPushFront = _xmlListPushFrontPtr
      .asFunction<int Function(xmlListPtr, ffi.Pointer<ffi.Void>)>();

  int xmlListPushBack(
    xmlListPtr l,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _xmlListPushBack(
      l,
      data,
    );
  }

  late final _xmlListPushBackPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int Function(xmlListPtr, ffi.Pointer<ffi.Void>)>>(
      'xmlListPushBack');
  late final _xmlListPushBack = _xmlListPushBackPtr
      .asFunction<int Function(xmlListPtr, ffi.Pointer<ffi.Void>)>();

  void xmlListReverse(
    xmlListPtr l,
  ) {
    return _xmlListReverse(
      l,
    );
  }

  late final _xmlListReversePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(xmlListPtr)>>(
          'xmlListReverse');
  late final _xmlListReverse =
      _xmlListReversePtr.asFunction<void Function(xmlListPtr)>();

  void xmlListSort(
    xmlListPtr l,
  ) {
    return _xmlListSort(
      l,
    );
  }

  late final _xmlListSortPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(xmlListPtr)>>('xmlListSort');
  late final _xmlListSort =
      _xmlListSortPtr.asFunction<void Function(xmlListPtr)>();

  void xmlListWalk(
    xmlListPtr l,
    xmlListWalker walker,
    ffi.Pointer<ffi.Void> user,
  ) {
    return _xmlListWalk(
      l,
      walker,
      user,
    );
  }

  late final _xmlListWalkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(xmlListPtr, xmlListWalker,
              ffi.Pointer<ffi.Void>)>>('xmlListWalk');
  late final _xmlListWalk = _xmlListWalkPtr.asFunction<
      void Function(xmlListPtr, xmlListWalker, ffi.Pointer<ffi.Void>)>();

  void xmlListReverseWalk(
    xmlListPtr l,
    xmlListWalker walker,
    ffi.Pointer<ffi.Void> user,
  ) {
    return _xmlListReverseWalk(
      l,
      walker,
      user,
    );
  }

  late final _xmlListReverseWalkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(xmlListPtr, xmlListWalker,
              ffi.Pointer<ffi.Void>)>>('xmlListReverseWalk');
  late final _xmlListReverseWalk = _xmlListReverseWalkPtr.asFunction<
      void Function(xmlListPtr, xmlListWalker, ffi.Pointer<ffi.Void>)>();

  void xmlListMerge(
    xmlListPtr l1,
    xmlListPtr l2,
  ) {
    return _xmlListMerge(
      l1,
      l2,
    );
  }

  late final _xmlListMergePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(xmlListPtr, xmlListPtr)>>(
          'xmlListMerge');
  late final _xmlListMerge =
      _xmlListMergePtr.asFunction<void Function(xmlListPtr, xmlListPtr)>();

  xmlListPtr xmlListDup(
    xmlListPtr old,
  ) {
    return _xmlListDup(
      old,
    );
  }

  late final _xmlListDupPtr =
      _lookup<ffi.NativeFunction<xmlListPtr Function(xmlListPtr)>>(
          'xmlListDup');
  late final _xmlListDup =
      _xmlListDupPtr.asFunction<xmlListPtr Function(xmlListPtr)>();

  int xmlListCopy(
    xmlListPtr cur,
    xmlListPtr old,
  ) {
    return _xmlListCopy(
      cur,
      old,
    );
  }

  late final _xmlListCopyPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(xmlListPtr, xmlListPtr)>>(
          'xmlListCopy');
  late final _xmlListCopy =
      _xmlListCopyPtr.asFunction<int Function(xmlListPtr, xmlListPtr)>();

  ffi.Pointer<ffi.Void> xmlLinkGetData(
    xmlLinkPtr lk,
  ) {
    return _xmlLinkGetData(
      lk,
    );
  }

  late final _xmlLinkGetDataPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(xmlLinkPtr)>>(
          'xmlLinkGetData');
  late final _xmlLinkGetData = _xmlLinkGetDataPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(xmlLinkPtr)>();

  xmlAutomataPtr xmlNewAutomata() {
    return _xmlNewAutomata();
  }

  late final _xmlNewAutomataPtr =
      _lookup<ffi.NativeFunction<xmlAutomataPtr Function()>>('xmlNewAutomata');
  late final _xmlNewAutomata =
      _xmlNewAutomataPtr.asFunction<xmlAutomataPtr Function()>();

  void xmlFreeAutomata(
    xmlAutomataPtr am,
  ) {
    return _xmlFreeAutomata(
      am,
    );
  }

  late final _xmlFreeAutomataPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(xmlAutomataPtr)>>(
          'xmlFreeAutomata');
  late final _xmlFreeAutomata =
      _xmlFreeAutomataPtr.asFunction<void Function(xmlAutomataPtr)>();

  xmlAutomataStatePtr xmlAutomataGetInitState(
    xmlAutomataPtr am,
  ) {
    return _xmlAutomataGetInitState(
      am,
    );
  }

  late final _xmlAutomataGetInitStatePtr =
      _lookup<ffi.NativeFunction<xmlAutomataStatePtr Function(xmlAutomataPtr)>>(
          'xmlAutomataGetInitState');
  late final _xmlAutomataGetInitState = _xmlAutomataGetInitStatePtr
      .asFunction<xmlAutomataStatePtr Function(xmlAutomataPtr)>();

  int xmlAutomataSetFinalState(
    xmlAutomataPtr am,
    xmlAutomataStatePtr state,
  ) {
    return _xmlAutomataSetFinalState(
      am,
      state,
    );
  }

  late final _xmlAutomataSetFinalStatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(xmlAutomataPtr,
              xmlAutomataStatePtr)>>('xmlAutomataSetFinalState');
  late final _xmlAutomataSetFinalState = _xmlAutomataSetFinalStatePtr
      .asFunction<int Function(xmlAutomataPtr, xmlAutomataStatePtr)>();

  xmlAutomataStatePtr xmlAutomataNewState(
    xmlAutomataPtr am,
  ) {
    return _xmlAutomataNewState(
      am,
    );
  }

  late final _xmlAutomataNewStatePtr =
      _lookup<ffi.NativeFunction<xmlAutomataStatePtr Function(xmlAutomataPtr)>>(
          'xmlAutomataNewState');
  late final _xmlAutomataNewState = _xmlAutomataNewStatePtr
      .asFunction<xmlAutomataStatePtr Function(xmlAutomataPtr)>();

  xmlAutomataStatePtr xmlAutomataNewTransition(
    xmlAutomataPtr am,
    xmlAutomataStatePtr from,
    xmlAutomataStatePtr to,
    ffi.Pointer<xmlChar> token,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _xmlAutomataNewTransition(
      am,
      from,
      to,
      token,
      data,
    );
  }

  late final _xmlAutomataNewTransitionPtr = _lookup<
      ffi.NativeFunction<
          xmlAutomataStatePtr Function(
              xmlAutomataPtr,
              xmlAutomataStatePtr,
              xmlAutomataStatePtr,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<ffi.Void>)>>('xmlAutomataNewTransition');
  late final _xmlAutomataNewTransition =
      _xmlAutomataNewTransitionPtr.asFunction<
          xmlAutomataStatePtr Function(
              xmlAutomataPtr,
              xmlAutomataStatePtr,
              xmlAutomataStatePtr,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<ffi.Void>)>();

  xmlAutomataStatePtr xmlAutomataNewTransition2(
    xmlAutomataPtr am,
    xmlAutomataStatePtr from,
    xmlAutomataStatePtr to,
    ffi.Pointer<xmlChar> token,
    ffi.Pointer<xmlChar> token2,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _xmlAutomataNewTransition2(
      am,
      from,
      to,
      token,
      token2,
      data,
    );
  }

  late final _xmlAutomataNewTransition2Ptr = _lookup<
      ffi.NativeFunction<
          xmlAutomataStatePtr Function(
              xmlAutomataPtr,
              xmlAutomataStatePtr,
              xmlAutomataStatePtr,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<ffi.Void>)>>('xmlAutomataNewTransition2');
  late final _xmlAutomataNewTransition2 =
      _xmlAutomataNewTransition2Ptr.asFunction<
          xmlAutomataStatePtr Function(
              xmlAutomataPtr,
              xmlAutomataStatePtr,
              xmlAutomataStatePtr,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<ffi.Void>)>();

  xmlAutomataStatePtr xmlAutomataNewNegTrans(
    xmlAutomataPtr am,
    xmlAutomataStatePtr from,
    xmlAutomataStatePtr to,
    ffi.Pointer<xmlChar> token,
    ffi.Pointer<xmlChar> token2,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _xmlAutomataNewNegTrans(
      am,
      from,
      to,
      token,
      token2,
      data,
    );
  }

  late final _xmlAutomataNewNegTransPtr = _lookup<
      ffi.NativeFunction<
          xmlAutomataStatePtr Function(
              xmlAutomataPtr,
              xmlAutomataStatePtr,
              xmlAutomataStatePtr,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<ffi.Void>)>>('xmlAutomataNewNegTrans');
  late final _xmlAutomataNewNegTrans = _xmlAutomataNewNegTransPtr.asFunction<
      xmlAutomataStatePtr Function(
          xmlAutomataPtr,
          xmlAutomataStatePtr,
          xmlAutomataStatePtr,
          ffi.Pointer<xmlChar>,
          ffi.Pointer<xmlChar>,
          ffi.Pointer<ffi.Void>)>();

  xmlAutomataStatePtr xmlAutomataNewCountTrans(
    xmlAutomataPtr am,
    xmlAutomataStatePtr from,
    xmlAutomataStatePtr to,
    ffi.Pointer<xmlChar> token,
    int min,
    int max,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _xmlAutomataNewCountTrans(
      am,
      from,
      to,
      token,
      min,
      max,
      data,
    );
  }

  late final _xmlAutomataNewCountTransPtr = _lookup<
      ffi.NativeFunction<
          xmlAutomataStatePtr Function(
              xmlAutomataPtr,
              xmlAutomataStatePtr,
              xmlAutomataStatePtr,
              ffi.Pointer<xmlChar>,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Void>)>>('xmlAutomataNewCountTrans');
  late final _xmlAutomataNewCountTrans =
      _xmlAutomataNewCountTransPtr.asFunction<
          xmlAutomataStatePtr Function(
              xmlAutomataPtr,
              xmlAutomataStatePtr,
              xmlAutomataStatePtr,
              ffi.Pointer<xmlChar>,
              int,
              int,
              ffi.Pointer<ffi.Void>)>();

  xmlAutomataStatePtr xmlAutomataNewCountTrans2(
    xmlAutomataPtr am,
    xmlAutomataStatePtr from,
    xmlAutomataStatePtr to,
    ffi.Pointer<xmlChar> token,
    ffi.Pointer<xmlChar> token2,
    int min,
    int max,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _xmlAutomataNewCountTrans2(
      am,
      from,
      to,
      token,
      token2,
      min,
      max,
      data,
    );
  }

  late final _xmlAutomataNewCountTrans2Ptr = _lookup<
      ffi.NativeFunction<
          xmlAutomataStatePtr Function(
              xmlAutomataPtr,
              xmlAutomataStatePtr,
              xmlAutomataStatePtr,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Void>)>>('xmlAutomataNewCountTrans2');
  late final _xmlAutomataNewCountTrans2 =
      _xmlAutomataNewCountTrans2Ptr.asFunction<
          xmlAutomataStatePtr Function(
              xmlAutomataPtr,
              xmlAutomataStatePtr,
              xmlAutomataStatePtr,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>,
              int,
              int,
              ffi.Pointer<ffi.Void>)>();

  xmlAutomataStatePtr xmlAutomataNewOnceTrans(
    xmlAutomataPtr am,
    xmlAutomataStatePtr from,
    xmlAutomataStatePtr to,
    ffi.Pointer<xmlChar> token,
    int min,
    int max,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _xmlAutomataNewOnceTrans(
      am,
      from,
      to,
      token,
      min,
      max,
      data,
    );
  }

  late final _xmlAutomataNewOnceTransPtr = _lookup<
      ffi.NativeFunction<
          xmlAutomataStatePtr Function(
              xmlAutomataPtr,
              xmlAutomataStatePtr,
              xmlAutomataStatePtr,
              ffi.Pointer<xmlChar>,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Void>)>>('xmlAutomataNewOnceTrans');
  late final _xmlAutomataNewOnceTrans = _xmlAutomataNewOnceTransPtr.asFunction<
      xmlAutomataStatePtr Function(
          xmlAutomataPtr,
          xmlAutomataStatePtr,
          xmlAutomataStatePtr,
          ffi.Pointer<xmlChar>,
          int,
          int,
          ffi.Pointer<ffi.Void>)>();

  xmlAutomataStatePtr xmlAutomataNewOnceTrans2(
    xmlAutomataPtr am,
    xmlAutomataStatePtr from,
    xmlAutomataStatePtr to,
    ffi.Pointer<xmlChar> token,
    ffi.Pointer<xmlChar> token2,
    int min,
    int max,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _xmlAutomataNewOnceTrans2(
      am,
      from,
      to,
      token,
      token2,
      min,
      max,
      data,
    );
  }

  late final _xmlAutomataNewOnceTrans2Ptr = _lookup<
      ffi.NativeFunction<
          xmlAutomataStatePtr Function(
              xmlAutomataPtr,
              xmlAutomataStatePtr,
              xmlAutomataStatePtr,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Void>)>>('xmlAutomataNewOnceTrans2');
  late final _xmlAutomataNewOnceTrans2 =
      _xmlAutomataNewOnceTrans2Ptr.asFunction<
          xmlAutomataStatePtr Function(
              xmlAutomataPtr,
              xmlAutomataStatePtr,
              xmlAutomataStatePtr,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>,
              int,
              int,
              ffi.Pointer<ffi.Void>)>();

  xmlAutomataStatePtr xmlAutomataNewAllTrans(
    xmlAutomataPtr am,
    xmlAutomataStatePtr from,
    xmlAutomataStatePtr to,
    int lax,
  ) {
    return _xmlAutomataNewAllTrans(
      am,
      from,
      to,
      lax,
    );
  }

  late final _xmlAutomataNewAllTransPtr = _lookup<
      ffi.NativeFunction<
          xmlAutomataStatePtr Function(xmlAutomataPtr, xmlAutomataStatePtr,
              xmlAutomataStatePtr, ffi.Int)>>('xmlAutomataNewAllTrans');
  late final _xmlAutomataNewAllTrans = _xmlAutomataNewAllTransPtr.asFunction<
      xmlAutomataStatePtr Function(
          xmlAutomataPtr, xmlAutomataStatePtr, xmlAutomataStatePtr, int)>();

  xmlAutomataStatePtr xmlAutomataNewEpsilon(
    xmlAutomataPtr am,
    xmlAutomataStatePtr from,
    xmlAutomataStatePtr to,
  ) {
    return _xmlAutomataNewEpsilon(
      am,
      from,
      to,
    );
  }

  late final _xmlAutomataNewEpsilonPtr = _lookup<
      ffi.NativeFunction<
          xmlAutomataStatePtr Function(xmlAutomataPtr, xmlAutomataStatePtr,
              xmlAutomataStatePtr)>>('xmlAutomataNewEpsilon');
  late final _xmlAutomataNewEpsilon = _xmlAutomataNewEpsilonPtr.asFunction<
      xmlAutomataStatePtr Function(
          xmlAutomataPtr, xmlAutomataStatePtr, xmlAutomataStatePtr)>();

  xmlAutomataStatePtr xmlAutomataNewCountedTrans(
    xmlAutomataPtr am,
    xmlAutomataStatePtr from,
    xmlAutomataStatePtr to,
    int counter,
  ) {
    return _xmlAutomataNewCountedTrans(
      am,
      from,
      to,
      counter,
    );
  }

  late final _xmlAutomataNewCountedTransPtr = _lookup<
      ffi.NativeFunction<
          xmlAutomataStatePtr Function(xmlAutomataPtr, xmlAutomataStatePtr,
              xmlAutomataStatePtr, ffi.Int)>>('xmlAutomataNewCountedTrans');
  late final _xmlAutomataNewCountedTrans =
      _xmlAutomataNewCountedTransPtr.asFunction<
          xmlAutomataStatePtr Function(
              xmlAutomataPtr, xmlAutomataStatePtr, xmlAutomataStatePtr, int)>();

  xmlAutomataStatePtr xmlAutomataNewCounterTrans(
    xmlAutomataPtr am,
    xmlAutomataStatePtr from,
    xmlAutomataStatePtr to,
    int counter,
  ) {
    return _xmlAutomataNewCounterTrans(
      am,
      from,
      to,
      counter,
    );
  }

  late final _xmlAutomataNewCounterTransPtr = _lookup<
      ffi.NativeFunction<
          xmlAutomataStatePtr Function(xmlAutomataPtr, xmlAutomataStatePtr,
              xmlAutomataStatePtr, ffi.Int)>>('xmlAutomataNewCounterTrans');
  late final _xmlAutomataNewCounterTrans =
      _xmlAutomataNewCounterTransPtr.asFunction<
          xmlAutomataStatePtr Function(
              xmlAutomataPtr, xmlAutomataStatePtr, xmlAutomataStatePtr, int)>();

  int xmlAutomataNewCounter(
    xmlAutomataPtr am,
    int min,
    int max,
  ) {
    return _xmlAutomataNewCounter(
      am,
      min,
      max,
    );
  }

  late final _xmlAutomataNewCounterPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int Function(xmlAutomataPtr, ffi.Int, ffi.Int)>>(
      'xmlAutomataNewCounter');
  late final _xmlAutomataNewCounter = _xmlAutomataNewCounterPtr
      .asFunction<int Function(xmlAutomataPtr, int, int)>();

  xmlRegexpPtr xmlAutomataCompile(
    xmlAutomataPtr am,
  ) {
    return _xmlAutomataCompile(
      am,
    );
  }

  late final _xmlAutomataCompilePtr =
      _lookup<ffi.NativeFunction<xmlRegexpPtr Function(xmlAutomataPtr)>>(
          'xmlAutomataCompile');
  late final _xmlAutomataCompile = _xmlAutomataCompilePtr
      .asFunction<xmlRegexpPtr Function(xmlAutomataPtr)>();

  int xmlAutomataIsDeterminist(
    xmlAutomataPtr am,
  ) {
    return _xmlAutomataIsDeterminist(
      am,
    );
  }

  late final _xmlAutomataIsDeterministPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(xmlAutomataPtr)>>(
          'xmlAutomataIsDeterminist');
  late final _xmlAutomataIsDeterminist =
      _xmlAutomataIsDeterministPtr.asFunction<int Function(xmlAutomataPtr)>();

  xmlNotationPtr xmlAddNotationDecl(
    xmlValidCtxtPtr ctxt,
    xmlDtdPtr dtd,
    ffi.Pointer<xmlChar> name,
    ffi.Pointer<xmlChar> PublicID,
    ffi.Pointer<xmlChar> SystemID,
  ) {
    return _xmlAddNotationDecl(
      ctxt,
      dtd,
      name,
      PublicID,
      SystemID,
    );
  }

  late final _xmlAddNotationDeclPtr = _lookup<
      ffi.NativeFunction<
          xmlNotationPtr Function(
              xmlValidCtxtPtr,
              xmlDtdPtr,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>)>>('xmlAddNotationDecl');
  late final _xmlAddNotationDecl = _xmlAddNotationDeclPtr.asFunction<
      xmlNotationPtr Function(xmlValidCtxtPtr, xmlDtdPtr, ffi.Pointer<xmlChar>,
          ffi.Pointer<xmlChar>, ffi.Pointer<xmlChar>)>();

  xmlNotationTablePtr xmlCopyNotationTable(
    xmlNotationTablePtr table,
  ) {
    return _xmlCopyNotationTable(
      table,
    );
  }

  late final _xmlCopyNotationTablePtr = _lookup<
          ffi
          .NativeFunction<xmlNotationTablePtr Function(xmlNotationTablePtr)>>(
      'xmlCopyNotationTable');
  late final _xmlCopyNotationTable = _xmlCopyNotationTablePtr
      .asFunction<xmlNotationTablePtr Function(xmlNotationTablePtr)>();

  void xmlFreeNotationTable(
    xmlNotationTablePtr table,
  ) {
    return _xmlFreeNotationTable(
      table,
    );
  }

  late final _xmlFreeNotationTablePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(xmlNotationTablePtr)>>(
          'xmlFreeNotationTable');
  late final _xmlFreeNotationTable =
      _xmlFreeNotationTablePtr.asFunction<void Function(xmlNotationTablePtr)>();

  void xmlDumpNotationDecl(
    xmlBufferPtr buf,
    xmlNotationPtr nota,
  ) {
    return _xmlDumpNotationDecl(
      buf,
      nota,
    );
  }

  late final _xmlDumpNotationDeclPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(xmlBufferPtr, xmlNotationPtr)>>(
      'xmlDumpNotationDecl');
  late final _xmlDumpNotationDecl = _xmlDumpNotationDeclPtr
      .asFunction<void Function(xmlBufferPtr, xmlNotationPtr)>();

  void xmlDumpNotationTable(
    xmlBufferPtr buf,
    xmlNotationTablePtr table,
  ) {
    return _xmlDumpNotationTable(
      buf,
      table,
    );
  }

  late final _xmlDumpNotationTablePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              xmlBufferPtr, xmlNotationTablePtr)>>('xmlDumpNotationTable');
  late final _xmlDumpNotationTable = _xmlDumpNotationTablePtr
      .asFunction<void Function(xmlBufferPtr, xmlNotationTablePtr)>();

  xmlElementContentPtr xmlNewElementContent(
    ffi.Pointer<xmlChar> name,
    int type,
  ) {
    return _xmlNewElementContent(
      name,
      type,
    );
  }

  late final _xmlNewElementContentPtr = _lookup<
      ffi.NativeFunction<
          xmlElementContentPtr Function(
              ffi.Pointer<xmlChar>, ffi.Int32)>>('xmlNewElementContent');
  late final _xmlNewElementContent = _xmlNewElementContentPtr
      .asFunction<xmlElementContentPtr Function(ffi.Pointer<xmlChar>, int)>();

  xmlElementContentPtr xmlCopyElementContent(
    xmlElementContentPtr content,
  ) {
    return _xmlCopyElementContent(
      content,
    );
  }

  late final _xmlCopyElementContentPtr = _lookup<
          ffi
          .NativeFunction<xmlElementContentPtr Function(xmlElementContentPtr)>>(
      'xmlCopyElementContent');
  late final _xmlCopyElementContent = _xmlCopyElementContentPtr
      .asFunction<xmlElementContentPtr Function(xmlElementContentPtr)>();

  void xmlFreeElementContent(
    xmlElementContentPtr cur,
  ) {
    return _xmlFreeElementContent(
      cur,
    );
  }

  late final _xmlFreeElementContentPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(xmlElementContentPtr)>>(
          'xmlFreeElementContent');
  late final _xmlFreeElementContent = _xmlFreeElementContentPtr
      .asFunction<void Function(xmlElementContentPtr)>();

  xmlElementContentPtr xmlNewDocElementContent(
    xmlDocPtr doc,
    ffi.Pointer<xmlChar> name,
    int type,
  ) {
    return _xmlNewDocElementContent(
      doc,
      name,
      type,
    );
  }

  late final _xmlNewDocElementContentPtr = _lookup<
      ffi.NativeFunction<
          xmlElementContentPtr Function(xmlDocPtr, ffi.Pointer<xmlChar>,
              ffi.Int32)>>('xmlNewDocElementContent');
  late final _xmlNewDocElementContent = _xmlNewDocElementContentPtr.asFunction<
      xmlElementContentPtr Function(xmlDocPtr, ffi.Pointer<xmlChar>, int)>();

  xmlElementContentPtr xmlCopyDocElementContent(
    xmlDocPtr doc,
    xmlElementContentPtr content,
  ) {
    return _xmlCopyDocElementContent(
      doc,
      content,
    );
  }

  late final _xmlCopyDocElementContentPtr = _lookup<
      ffi.NativeFunction<
          xmlElementContentPtr Function(
              xmlDocPtr, xmlElementContentPtr)>>('xmlCopyDocElementContent');
  late final _xmlCopyDocElementContent =
      _xmlCopyDocElementContentPtr.asFunction<
          xmlElementContentPtr Function(xmlDocPtr, xmlElementContentPtr)>();

  void xmlFreeDocElementContent(
    xmlDocPtr doc,
    xmlElementContentPtr cur,
  ) {
    return _xmlFreeDocElementContent(
      doc,
      cur,
    );
  }

  late final _xmlFreeDocElementContentPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(xmlDocPtr, xmlElementContentPtr)>>(
      'xmlFreeDocElementContent');
  late final _xmlFreeDocElementContent = _xmlFreeDocElementContentPtr
      .asFunction<void Function(xmlDocPtr, xmlElementContentPtr)>();

  void xmlSnprintfElementContent(
    ffi.Pointer<ffi.Char> buf,
    int size,
    xmlElementContentPtr content,
    int englob,
  ) {
    return _xmlSnprintfElementContent(
      buf,
      size,
      content,
      englob,
    );
  }

  late final _xmlSnprintfElementContentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Char>, ffi.Int,
              xmlElementContentPtr, ffi.Int)>>('xmlSnprintfElementContent');
  late final _xmlSnprintfElementContent =
      _xmlSnprintfElementContentPtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Char>, int, xmlElementContentPtr, int)>();

  void xmlSprintfElementContent(
    ffi.Pointer<ffi.Char> buf,
    xmlElementContentPtr content,
    int englob,
  ) {
    return _xmlSprintfElementContent(
      buf,
      content,
      englob,
    );
  }

  late final _xmlSprintfElementContentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Char>, xmlElementContentPtr,
              ffi.Int)>>('xmlSprintfElementContent');
  late final _xmlSprintfElementContent =
      _xmlSprintfElementContentPtr.asFunction<
          void Function(ffi.Pointer<ffi.Char>, xmlElementContentPtr, int)>();

  xmlElementPtr xmlAddElementDecl(
    xmlValidCtxtPtr ctxt,
    xmlDtdPtr dtd,
    ffi.Pointer<xmlChar> name,
    int type,
    xmlElementContentPtr content,
  ) {
    return _xmlAddElementDecl(
      ctxt,
      dtd,
      name,
      type,
      content,
    );
  }

  late final _xmlAddElementDeclPtr = _lookup<
      ffi.NativeFunction<
          xmlElementPtr Function(
              xmlValidCtxtPtr,
              xmlDtdPtr,
              ffi.Pointer<xmlChar>,
              ffi.Int32,
              xmlElementContentPtr)>>('xmlAddElementDecl');
  late final _xmlAddElementDecl = _xmlAddElementDeclPtr.asFunction<
      xmlElementPtr Function(xmlValidCtxtPtr, xmlDtdPtr, ffi.Pointer<xmlChar>,
          int, xmlElementContentPtr)>();

  xmlElementTablePtr xmlCopyElementTable(
    xmlElementTablePtr table,
  ) {
    return _xmlCopyElementTable(
      table,
    );
  }

  late final _xmlCopyElementTablePtr = _lookup<
          ffi.NativeFunction<xmlElementTablePtr Function(xmlElementTablePtr)>>(
      'xmlCopyElementTable');
  late final _xmlCopyElementTable = _xmlCopyElementTablePtr
      .asFunction<xmlElementTablePtr Function(xmlElementTablePtr)>();

  void xmlFreeElementTable(
    xmlElementTablePtr table,
  ) {
    return _xmlFreeElementTable(
      table,
    );
  }

  late final _xmlFreeElementTablePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(xmlElementTablePtr)>>(
          'xmlFreeElementTable');
  late final _xmlFreeElementTable =
      _xmlFreeElementTablePtr.asFunction<void Function(xmlElementTablePtr)>();

  void xmlDumpElementTable(
    xmlBufferPtr buf,
    xmlElementTablePtr table,
  ) {
    return _xmlDumpElementTable(
      buf,
      table,
    );
  }

  late final _xmlDumpElementTablePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(xmlBufferPtr, xmlElementTablePtr)>>(
      'xmlDumpElementTable');
  late final _xmlDumpElementTable = _xmlDumpElementTablePtr
      .asFunction<void Function(xmlBufferPtr, xmlElementTablePtr)>();

  void xmlDumpElementDecl(
    xmlBufferPtr buf,
    xmlElementPtr elem,
  ) {
    return _xmlDumpElementDecl(
      buf,
      elem,
    );
  }

  late final _xmlDumpElementDeclPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(xmlBufferPtr, xmlElementPtr)>>(
      'xmlDumpElementDecl');
  late final _xmlDumpElementDecl = _xmlDumpElementDeclPtr
      .asFunction<void Function(xmlBufferPtr, xmlElementPtr)>();

  xmlEnumerationPtr xmlCreateEnumeration(
    ffi.Pointer<xmlChar> name,
  ) {
    return _xmlCreateEnumeration(
      name,
    );
  }

  late final _xmlCreateEnumerationPtr = _lookup<
          ffi.NativeFunction<xmlEnumerationPtr Function(ffi.Pointer<xmlChar>)>>(
      'xmlCreateEnumeration');
  late final _xmlCreateEnumeration = _xmlCreateEnumerationPtr
      .asFunction<xmlEnumerationPtr Function(ffi.Pointer<xmlChar>)>();

  void xmlFreeEnumeration(
    xmlEnumerationPtr cur,
  ) {
    return _xmlFreeEnumeration(
      cur,
    );
  }

  late final _xmlFreeEnumerationPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(xmlEnumerationPtr)>>(
          'xmlFreeEnumeration');
  late final _xmlFreeEnumeration =
      _xmlFreeEnumerationPtr.asFunction<void Function(xmlEnumerationPtr)>();

  xmlEnumerationPtr xmlCopyEnumeration(
    xmlEnumerationPtr cur,
  ) {
    return _xmlCopyEnumeration(
      cur,
    );
  }

  late final _xmlCopyEnumerationPtr = _lookup<
          ffi.NativeFunction<xmlEnumerationPtr Function(xmlEnumerationPtr)>>(
      'xmlCopyEnumeration');
  late final _xmlCopyEnumeration = _xmlCopyEnumerationPtr
      .asFunction<xmlEnumerationPtr Function(xmlEnumerationPtr)>();

  xmlAttributePtr xmlAddAttributeDecl(
    xmlValidCtxtPtr ctxt,
    xmlDtdPtr dtd,
    ffi.Pointer<xmlChar> elem,
    ffi.Pointer<xmlChar> name,
    ffi.Pointer<xmlChar> ns,
    int type,
    int def,
    ffi.Pointer<xmlChar> defaultValue,
    xmlEnumerationPtr tree,
  ) {
    return _xmlAddAttributeDecl(
      ctxt,
      dtd,
      elem,
      name,
      ns,
      type,
      def,
      defaultValue,
      tree,
    );
  }

  late final _xmlAddAttributeDeclPtr = _lookup<
      ffi.NativeFunction<
          xmlAttributePtr Function(
              xmlValidCtxtPtr,
              xmlDtdPtr,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>,
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<xmlChar>,
              xmlEnumerationPtr)>>('xmlAddAttributeDecl');
  late final _xmlAddAttributeDecl = _xmlAddAttributeDeclPtr.asFunction<
      xmlAttributePtr Function(
          xmlValidCtxtPtr,
          xmlDtdPtr,
          ffi.Pointer<xmlChar>,
          ffi.Pointer<xmlChar>,
          ffi.Pointer<xmlChar>,
          int,
          int,
          ffi.Pointer<xmlChar>,
          xmlEnumerationPtr)>();

  xmlAttributeTablePtr xmlCopyAttributeTable(
    xmlAttributeTablePtr table,
  ) {
    return _xmlCopyAttributeTable(
      table,
    );
  }

  late final _xmlCopyAttributeTablePtr = _lookup<
          ffi
          .NativeFunction<xmlAttributeTablePtr Function(xmlAttributeTablePtr)>>(
      'xmlCopyAttributeTable');
  late final _xmlCopyAttributeTable = _xmlCopyAttributeTablePtr
      .asFunction<xmlAttributeTablePtr Function(xmlAttributeTablePtr)>();

  void xmlFreeAttributeTable(
    xmlAttributeTablePtr table,
  ) {
    return _xmlFreeAttributeTable(
      table,
    );
  }

  late final _xmlFreeAttributeTablePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(xmlAttributeTablePtr)>>(
          'xmlFreeAttributeTable');
  late final _xmlFreeAttributeTable = _xmlFreeAttributeTablePtr
      .asFunction<void Function(xmlAttributeTablePtr)>();

  void xmlDumpAttributeTable(
    xmlBufferPtr buf,
    xmlAttributeTablePtr table,
  ) {
    return _xmlDumpAttributeTable(
      buf,
      table,
    );
  }

  late final _xmlDumpAttributeTablePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              xmlBufferPtr, xmlAttributeTablePtr)>>('xmlDumpAttributeTable');
  late final _xmlDumpAttributeTable = _xmlDumpAttributeTablePtr
      .asFunction<void Function(xmlBufferPtr, xmlAttributeTablePtr)>();

  void xmlDumpAttributeDecl(
    xmlBufferPtr buf,
    xmlAttributePtr attr,
  ) {
    return _xmlDumpAttributeDecl(
      buf,
      attr,
    );
  }

  late final _xmlDumpAttributeDeclPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(xmlBufferPtr, xmlAttributePtr)>>(
      'xmlDumpAttributeDecl');
  late final _xmlDumpAttributeDecl = _xmlDumpAttributeDeclPtr
      .asFunction<void Function(xmlBufferPtr, xmlAttributePtr)>();

  xmlIDPtr xmlAddID(
    xmlValidCtxtPtr ctxt,
    xmlDocPtr doc,
    ffi.Pointer<xmlChar> value,
    xmlAttrPtr attr,
  ) {
    return _xmlAddID(
      ctxt,
      doc,
      value,
      attr,
    );
  }

  late final _xmlAddIDPtr = _lookup<
      ffi.NativeFunction<
          xmlIDPtr Function(xmlValidCtxtPtr, xmlDocPtr, ffi.Pointer<xmlChar>,
              xmlAttrPtr)>>('xmlAddID');
  late final _xmlAddID = _xmlAddIDPtr.asFunction<
      xmlIDPtr Function(
          xmlValidCtxtPtr, xmlDocPtr, ffi.Pointer<xmlChar>, xmlAttrPtr)>();

  void xmlFreeIDTable(
    xmlIDTablePtr table,
  ) {
    return _xmlFreeIDTable(
      table,
    );
  }

  late final _xmlFreeIDTablePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(xmlIDTablePtr)>>(
          'xmlFreeIDTable');
  late final _xmlFreeIDTable =
      _xmlFreeIDTablePtr.asFunction<void Function(xmlIDTablePtr)>();

  xmlAttrPtr xmlGetID(
    xmlDocPtr doc,
    ffi.Pointer<xmlChar> ID,
  ) {
    return _xmlGetID(
      doc,
      ID,
    );
  }

  late final _xmlGetIDPtr = _lookup<
      ffi.NativeFunction<
          xmlAttrPtr Function(xmlDocPtr, ffi.Pointer<xmlChar>)>>('xmlGetID');
  late final _xmlGetID = _xmlGetIDPtr
      .asFunction<xmlAttrPtr Function(xmlDocPtr, ffi.Pointer<xmlChar>)>();

  int xmlIsID(
    xmlDocPtr doc,
    xmlNodePtr elem,
    xmlAttrPtr attr,
  ) {
    return _xmlIsID(
      doc,
      elem,
      attr,
    );
  }

  late final _xmlIsIDPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(xmlDocPtr, xmlNodePtr, xmlAttrPtr)>>('xmlIsID');
  late final _xmlIsID =
      _xmlIsIDPtr.asFunction<int Function(xmlDocPtr, xmlNodePtr, xmlAttrPtr)>();

  int xmlRemoveID(
    xmlDocPtr doc,
    xmlAttrPtr attr,
  ) {
    return _xmlRemoveID(
      doc,
      attr,
    );
  }

  late final _xmlRemoveIDPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(xmlDocPtr, xmlAttrPtr)>>(
          'xmlRemoveID');
  late final _xmlRemoveID =
      _xmlRemoveIDPtr.asFunction<int Function(xmlDocPtr, xmlAttrPtr)>();

  xmlRefPtr xmlAddRef(
    xmlValidCtxtPtr ctxt,
    xmlDocPtr doc,
    ffi.Pointer<xmlChar> value,
    xmlAttrPtr attr,
  ) {
    return _xmlAddRef(
      ctxt,
      doc,
      value,
      attr,
    );
  }

  late final _xmlAddRefPtr = _lookup<
      ffi.NativeFunction<
          xmlRefPtr Function(xmlValidCtxtPtr, xmlDocPtr, ffi.Pointer<xmlChar>,
              xmlAttrPtr)>>('xmlAddRef');
  late final _xmlAddRef = _xmlAddRefPtr.asFunction<
      xmlRefPtr Function(
          xmlValidCtxtPtr, xmlDocPtr, ffi.Pointer<xmlChar>, xmlAttrPtr)>();

  void xmlFreeRefTable(
    xmlRefTablePtr table,
  ) {
    return _xmlFreeRefTable(
      table,
    );
  }

  late final _xmlFreeRefTablePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(xmlRefTablePtr)>>(
          'xmlFreeRefTable');
  late final _xmlFreeRefTable =
      _xmlFreeRefTablePtr.asFunction<void Function(xmlRefTablePtr)>();

  int xmlIsRef(
    xmlDocPtr doc,
    xmlNodePtr elem,
    xmlAttrPtr attr,
  ) {
    return _xmlIsRef(
      doc,
      elem,
      attr,
    );
  }

  late final _xmlIsRefPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(xmlDocPtr, xmlNodePtr, xmlAttrPtr)>>('xmlIsRef');
  late final _xmlIsRef = _xmlIsRefPtr
      .asFunction<int Function(xmlDocPtr, xmlNodePtr, xmlAttrPtr)>();

  int xmlRemoveRef(
    xmlDocPtr doc,
    xmlAttrPtr attr,
  ) {
    return _xmlRemoveRef(
      doc,
      attr,
    );
  }

  late final _xmlRemoveRefPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(xmlDocPtr, xmlAttrPtr)>>(
          'xmlRemoveRef');
  late final _xmlRemoveRef =
      _xmlRemoveRefPtr.asFunction<int Function(xmlDocPtr, xmlAttrPtr)>();

  xmlListPtr xmlGetRefs(
    xmlDocPtr doc,
    ffi.Pointer<xmlChar> ID,
  ) {
    return _xmlGetRefs(
      doc,
      ID,
    );
  }

  late final _xmlGetRefsPtr = _lookup<
      ffi.NativeFunction<
          xmlListPtr Function(xmlDocPtr, ffi.Pointer<xmlChar>)>>('xmlGetRefs');
  late final _xmlGetRefs = _xmlGetRefsPtr
      .asFunction<xmlListPtr Function(xmlDocPtr, ffi.Pointer<xmlChar>)>();

  xmlValidCtxtPtr xmlNewValidCtxt() {
    return _xmlNewValidCtxt();
  }

  late final _xmlNewValidCtxtPtr =
      _lookup<ffi.NativeFunction<xmlValidCtxtPtr Function()>>(
          'xmlNewValidCtxt');
  late final _xmlNewValidCtxt =
      _xmlNewValidCtxtPtr.asFunction<xmlValidCtxtPtr Function()>();

  void xmlFreeValidCtxt(
    xmlValidCtxtPtr arg0,
  ) {
    return _xmlFreeValidCtxt(
      arg0,
    );
  }

  late final _xmlFreeValidCtxtPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(xmlValidCtxtPtr)>>(
          'xmlFreeValidCtxt');
  late final _xmlFreeValidCtxt =
      _xmlFreeValidCtxtPtr.asFunction<void Function(xmlValidCtxtPtr)>();

  int xmlValidateRoot(
    xmlValidCtxtPtr ctxt,
    xmlDocPtr doc,
  ) {
    return _xmlValidateRoot(
      ctxt,
      doc,
    );
  }

  late final _xmlValidateRootPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(xmlValidCtxtPtr, xmlDocPtr)>>(
          'xmlValidateRoot');
  late final _xmlValidateRoot = _xmlValidateRootPtr
      .asFunction<int Function(xmlValidCtxtPtr, xmlDocPtr)>();

  int xmlValidateElementDecl(
    xmlValidCtxtPtr ctxt,
    xmlDocPtr doc,
    xmlElementPtr elem,
  ) {
    return _xmlValidateElementDecl(
      ctxt,
      doc,
      elem,
    );
  }

  late final _xmlValidateElementDeclPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(xmlValidCtxtPtr, xmlDocPtr,
              xmlElementPtr)>>('xmlValidateElementDecl');
  late final _xmlValidateElementDecl = _xmlValidateElementDeclPtr
      .asFunction<int Function(xmlValidCtxtPtr, xmlDocPtr, xmlElementPtr)>();

  ffi.Pointer<xmlChar> xmlValidNormalizeAttributeValue(
    xmlDocPtr doc,
    xmlNodePtr elem,
    ffi.Pointer<xmlChar> name,
    ffi.Pointer<xmlChar> value,
  ) {
    return _xmlValidNormalizeAttributeValue(
      doc,
      elem,
      name,
      value,
    );
  }

  late final _xmlValidNormalizeAttributeValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<xmlChar> Function(
              xmlDocPtr,
              xmlNodePtr,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>)>>('xmlValidNormalizeAttributeValue');
  late final _xmlValidNormalizeAttributeValue =
      _xmlValidNormalizeAttributeValuePtr.asFunction<
          ffi.Pointer<xmlChar> Function(xmlDocPtr, xmlNodePtr,
              ffi.Pointer<xmlChar>, ffi.Pointer<xmlChar>)>();

  ffi.Pointer<xmlChar> xmlValidCtxtNormalizeAttributeValue(
    xmlValidCtxtPtr ctxt,
    xmlDocPtr doc,
    xmlNodePtr elem,
    ffi.Pointer<xmlChar> name,
    ffi.Pointer<xmlChar> value,
  ) {
    return _xmlValidCtxtNormalizeAttributeValue(
      ctxt,
      doc,
      elem,
      name,
      value,
    );
  }

  late final _xmlValidCtxtNormalizeAttributeValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<xmlChar> Function(
              xmlValidCtxtPtr,
              xmlDocPtr,
              xmlNodePtr,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>)>>('xmlValidCtxtNormalizeAttributeValue');
  late final _xmlValidCtxtNormalizeAttributeValue =
      _xmlValidCtxtNormalizeAttributeValuePtr.asFunction<
          ffi.Pointer<xmlChar> Function(xmlValidCtxtPtr, xmlDocPtr, xmlNodePtr,
              ffi.Pointer<xmlChar>, ffi.Pointer<xmlChar>)>();

  int xmlValidateAttributeDecl(
    xmlValidCtxtPtr ctxt,
    xmlDocPtr doc,
    xmlAttributePtr attr,
  ) {
    return _xmlValidateAttributeDecl(
      ctxt,
      doc,
      attr,
    );
  }

  late final _xmlValidateAttributeDeclPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(xmlValidCtxtPtr, xmlDocPtr,
              xmlAttributePtr)>>('xmlValidateAttributeDecl');
  late final _xmlValidateAttributeDecl = _xmlValidateAttributeDeclPtr
      .asFunction<int Function(xmlValidCtxtPtr, xmlDocPtr, xmlAttributePtr)>();

  int xmlValidateAttributeValue(
    int type,
    ffi.Pointer<xmlChar> value,
  ) {
    return _xmlValidateAttributeValue(
      type,
      value,
    );
  }

  late final _xmlValidateAttributeValuePtr = _lookup<
          ffi
          .NativeFunction<ffi.Int Function(ffi.Int32, ffi.Pointer<xmlChar>)>>(
      'xmlValidateAttributeValue');
  late final _xmlValidateAttributeValue = _xmlValidateAttributeValuePtr
      .asFunction<int Function(int, ffi.Pointer<xmlChar>)>();

  int xmlValidateNotationDecl(
    xmlValidCtxtPtr ctxt,
    xmlDocPtr doc,
    xmlNotationPtr nota,
  ) {
    return _xmlValidateNotationDecl(
      ctxt,
      doc,
      nota,
    );
  }

  late final _xmlValidateNotationDeclPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(xmlValidCtxtPtr, xmlDocPtr,
              xmlNotationPtr)>>('xmlValidateNotationDecl');
  late final _xmlValidateNotationDecl = _xmlValidateNotationDeclPtr
      .asFunction<int Function(xmlValidCtxtPtr, xmlDocPtr, xmlNotationPtr)>();

  int xmlValidateDtd(
    xmlValidCtxtPtr ctxt,
    xmlDocPtr doc,
    xmlDtdPtr dtd,
  ) {
    return _xmlValidateDtd(
      ctxt,
      doc,
      dtd,
    );
  }

  late final _xmlValidateDtdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              xmlValidCtxtPtr, xmlDocPtr, xmlDtdPtr)>>('xmlValidateDtd');
  late final _xmlValidateDtd = _xmlValidateDtdPtr
      .asFunction<int Function(xmlValidCtxtPtr, xmlDocPtr, xmlDtdPtr)>();

  int xmlValidateDtdFinal(
    xmlValidCtxtPtr ctxt,
    xmlDocPtr doc,
  ) {
    return _xmlValidateDtdFinal(
      ctxt,
      doc,
    );
  }

  late final _xmlValidateDtdFinalPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(xmlValidCtxtPtr, xmlDocPtr)>>(
          'xmlValidateDtdFinal');
  late final _xmlValidateDtdFinal = _xmlValidateDtdFinalPtr
      .asFunction<int Function(xmlValidCtxtPtr, xmlDocPtr)>();

  int xmlValidateDocument(
    xmlValidCtxtPtr ctxt,
    xmlDocPtr doc,
  ) {
    return _xmlValidateDocument(
      ctxt,
      doc,
    );
  }

  late final _xmlValidateDocumentPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(xmlValidCtxtPtr, xmlDocPtr)>>(
          'xmlValidateDocument');
  late final _xmlValidateDocument = _xmlValidateDocumentPtr
      .asFunction<int Function(xmlValidCtxtPtr, xmlDocPtr)>();

  int xmlValidateElement(
    xmlValidCtxtPtr ctxt,
    xmlDocPtr doc,
    xmlNodePtr elem,
  ) {
    return _xmlValidateElement(
      ctxt,
      doc,
      elem,
    );
  }

  late final _xmlValidateElementPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              xmlValidCtxtPtr, xmlDocPtr, xmlNodePtr)>>('xmlValidateElement');
  late final _xmlValidateElement = _xmlValidateElementPtr
      .asFunction<int Function(xmlValidCtxtPtr, xmlDocPtr, xmlNodePtr)>();

  int xmlValidateOneElement(
    xmlValidCtxtPtr ctxt,
    xmlDocPtr doc,
    xmlNodePtr elem,
  ) {
    return _xmlValidateOneElement(
      ctxt,
      doc,
      elem,
    );
  }

  late final _xmlValidateOneElementPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(xmlValidCtxtPtr, xmlDocPtr,
              xmlNodePtr)>>('xmlValidateOneElement');
  late final _xmlValidateOneElement = _xmlValidateOneElementPtr
      .asFunction<int Function(xmlValidCtxtPtr, xmlDocPtr, xmlNodePtr)>();

  int xmlValidateOneAttribute(
    xmlValidCtxtPtr ctxt,
    xmlDocPtr doc,
    xmlNodePtr elem,
    xmlAttrPtr attr,
    ffi.Pointer<xmlChar> value,
  ) {
    return _xmlValidateOneAttribute(
      ctxt,
      doc,
      elem,
      attr,
      value,
    );
  }

  late final _xmlValidateOneAttributePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(xmlValidCtxtPtr, xmlDocPtr, xmlNodePtr, xmlAttrPtr,
              ffi.Pointer<xmlChar>)>>('xmlValidateOneAttribute');
  late final _xmlValidateOneAttribute = _xmlValidateOneAttributePtr.asFunction<
      int Function(xmlValidCtxtPtr, xmlDocPtr, xmlNodePtr, xmlAttrPtr,
          ffi.Pointer<xmlChar>)>();

  int xmlValidateOneNamespace(
    xmlValidCtxtPtr ctxt,
    xmlDocPtr doc,
    xmlNodePtr elem,
    ffi.Pointer<xmlChar> prefix,
    xmlNsPtr ns,
    ffi.Pointer<xmlChar> value,
  ) {
    return _xmlValidateOneNamespace(
      ctxt,
      doc,
      elem,
      prefix,
      ns,
      value,
    );
  }

  late final _xmlValidateOneNamespacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              xmlValidCtxtPtr,
              xmlDocPtr,
              xmlNodePtr,
              ffi.Pointer<xmlChar>,
              xmlNsPtr,
              ffi.Pointer<xmlChar>)>>('xmlValidateOneNamespace');
  late final _xmlValidateOneNamespace = _xmlValidateOneNamespacePtr.asFunction<
      int Function(xmlValidCtxtPtr, xmlDocPtr, xmlNodePtr, ffi.Pointer<xmlChar>,
          xmlNsPtr, ffi.Pointer<xmlChar>)>();

  int xmlValidateDocumentFinal(
    xmlValidCtxtPtr ctxt,
    xmlDocPtr doc,
  ) {
    return _xmlValidateDocumentFinal(
      ctxt,
      doc,
    );
  }

  late final _xmlValidateDocumentFinalPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(xmlValidCtxtPtr, xmlDocPtr)>>(
          'xmlValidateDocumentFinal');
  late final _xmlValidateDocumentFinal = _xmlValidateDocumentFinalPtr
      .asFunction<int Function(xmlValidCtxtPtr, xmlDocPtr)>();

  int xmlValidateNotationUse(
    xmlValidCtxtPtr ctxt,
    xmlDocPtr doc,
    ffi.Pointer<xmlChar> notationName,
  ) {
    return _xmlValidateNotationUse(
      ctxt,
      doc,
      notationName,
    );
  }

  late final _xmlValidateNotationUsePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(xmlValidCtxtPtr, xmlDocPtr,
              ffi.Pointer<xmlChar>)>>('xmlValidateNotationUse');
  late final _xmlValidateNotationUse = _xmlValidateNotationUsePtr.asFunction<
      int Function(xmlValidCtxtPtr, xmlDocPtr, ffi.Pointer<xmlChar>)>();

  int xmlIsMixedElement(
    xmlDocPtr doc,
    ffi.Pointer<xmlChar> name,
  ) {
    return _xmlIsMixedElement(
      doc,
      name,
    );
  }

  late final _xmlIsMixedElementPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int Function(xmlDocPtr, ffi.Pointer<xmlChar>)>>(
      'xmlIsMixedElement');
  late final _xmlIsMixedElement = _xmlIsMixedElementPtr
      .asFunction<int Function(xmlDocPtr, ffi.Pointer<xmlChar>)>();

  xmlAttributePtr xmlGetDtdAttrDesc(
    xmlDtdPtr dtd,
    ffi.Pointer<xmlChar> elem,
    ffi.Pointer<xmlChar> name,
  ) {
    return _xmlGetDtdAttrDesc(
      dtd,
      elem,
      name,
    );
  }

  late final _xmlGetDtdAttrDescPtr = _lookup<
      ffi.NativeFunction<
          xmlAttributePtr Function(xmlDtdPtr, ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>)>>('xmlGetDtdAttrDesc');
  late final _xmlGetDtdAttrDesc = _xmlGetDtdAttrDescPtr.asFunction<
      xmlAttributePtr Function(
          xmlDtdPtr, ffi.Pointer<xmlChar>, ffi.Pointer<xmlChar>)>();

  xmlAttributePtr xmlGetDtdQAttrDesc(
    xmlDtdPtr dtd,
    ffi.Pointer<xmlChar> elem,
    ffi.Pointer<xmlChar> name,
    ffi.Pointer<xmlChar> prefix,
  ) {
    return _xmlGetDtdQAttrDesc(
      dtd,
      elem,
      name,
      prefix,
    );
  }

  late final _xmlGetDtdQAttrDescPtr = _lookup<
      ffi.NativeFunction<
          xmlAttributePtr Function(
              xmlDtdPtr,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>)>>('xmlGetDtdQAttrDesc');
  late final _xmlGetDtdQAttrDesc = _xmlGetDtdQAttrDescPtr.asFunction<
      xmlAttributePtr Function(xmlDtdPtr, ffi.Pointer<xmlChar>,
          ffi.Pointer<xmlChar>, ffi.Pointer<xmlChar>)>();

  xmlNotationPtr xmlGetDtdNotationDesc(
    xmlDtdPtr dtd,
    ffi.Pointer<xmlChar> name,
  ) {
    return _xmlGetDtdNotationDesc(
      dtd,
      name,
    );
  }

  late final _xmlGetDtdNotationDescPtr = _lookup<
      ffi.NativeFunction<
          xmlNotationPtr Function(
              xmlDtdPtr, ffi.Pointer<xmlChar>)>>('xmlGetDtdNotationDesc');
  late final _xmlGetDtdNotationDesc = _xmlGetDtdNotationDescPtr
      .asFunction<xmlNotationPtr Function(xmlDtdPtr, ffi.Pointer<xmlChar>)>();

  xmlElementPtr xmlGetDtdQElementDesc(
    xmlDtdPtr dtd,
    ffi.Pointer<xmlChar> name,
    ffi.Pointer<xmlChar> prefix,
  ) {
    return _xmlGetDtdQElementDesc(
      dtd,
      name,
      prefix,
    );
  }

  late final _xmlGetDtdQElementDescPtr = _lookup<
      ffi.NativeFunction<
          xmlElementPtr Function(xmlDtdPtr, ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>)>>('xmlGetDtdQElementDesc');
  late final _xmlGetDtdQElementDesc = _xmlGetDtdQElementDescPtr.asFunction<
      xmlElementPtr Function(
          xmlDtdPtr, ffi.Pointer<xmlChar>, ffi.Pointer<xmlChar>)>();

  xmlElementPtr xmlGetDtdElementDesc(
    xmlDtdPtr dtd,
    ffi.Pointer<xmlChar> name,
  ) {
    return _xmlGetDtdElementDesc(
      dtd,
      name,
    );
  }

  late final _xmlGetDtdElementDescPtr = _lookup<
      ffi.NativeFunction<
          xmlElementPtr Function(
              xmlDtdPtr, ffi.Pointer<xmlChar>)>>('xmlGetDtdElementDesc');
  late final _xmlGetDtdElementDesc = _xmlGetDtdElementDescPtr
      .asFunction<xmlElementPtr Function(xmlDtdPtr, ffi.Pointer<xmlChar>)>();

  int xmlValidGetPotentialChildren(
    ffi.Pointer<xmlElementContent> ctree,
    ffi.Pointer<ffi.Pointer<xmlChar>> names,
    ffi.Pointer<ffi.Int> len,
    int max,
  ) {
    return _xmlValidGetPotentialChildren(
      ctree,
      names,
      len,
      max,
    );
  }

  late final _xmlValidGetPotentialChildrenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<xmlElementContent>,
              ffi.Pointer<ffi.Pointer<xmlChar>>,
              ffi.Pointer<ffi.Int>,
              ffi.Int)>>('xmlValidGetPotentialChildren');
  late final _xmlValidGetPotentialChildren =
      _xmlValidGetPotentialChildrenPtr.asFunction<
          int Function(ffi.Pointer<xmlElementContent>,
              ffi.Pointer<ffi.Pointer<xmlChar>>, ffi.Pointer<ffi.Int>, int)>();

  int xmlValidGetValidElements(
    ffi.Pointer<xmlNode> prev,
    ffi.Pointer<xmlNode> next,
    ffi.Pointer<ffi.Pointer<xmlChar>> names,
    int max,
  ) {
    return _xmlValidGetValidElements(
      prev,
      next,
      names,
      max,
    );
  }

  late final _xmlValidGetValidElementsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<xmlNode>,
              ffi.Pointer<xmlNode>,
              ffi.Pointer<ffi.Pointer<xmlChar>>,
              ffi.Int)>>('xmlValidGetValidElements');
  late final _xmlValidGetValidElements =
      _xmlValidGetValidElementsPtr.asFunction<
          int Function(ffi.Pointer<xmlNode>, ffi.Pointer<xmlNode>,
              ffi.Pointer<ffi.Pointer<xmlChar>>, int)>();

  int xmlValidateNameValue(
    ffi.Pointer<xmlChar> value,
  ) {
    return _xmlValidateNameValue(
      value,
    );
  }

  late final _xmlValidateNameValuePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<xmlChar>)>>(
          'xmlValidateNameValue');
  late final _xmlValidateNameValue =
      _xmlValidateNameValuePtr.asFunction<int Function(ffi.Pointer<xmlChar>)>();

  int xmlValidateNamesValue(
    ffi.Pointer<xmlChar> value,
  ) {
    return _xmlValidateNamesValue(
      value,
    );
  }

  late final _xmlValidateNamesValuePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<xmlChar>)>>(
          'xmlValidateNamesValue');
  late final _xmlValidateNamesValue = _xmlValidateNamesValuePtr
      .asFunction<int Function(ffi.Pointer<xmlChar>)>();

  int xmlValidateNmtokenValue(
    ffi.Pointer<xmlChar> value,
  ) {
    return _xmlValidateNmtokenValue(
      value,
    );
  }

  late final _xmlValidateNmtokenValuePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<xmlChar>)>>(
          'xmlValidateNmtokenValue');
  late final _xmlValidateNmtokenValue = _xmlValidateNmtokenValuePtr
      .asFunction<int Function(ffi.Pointer<xmlChar>)>();

  int xmlValidateNmtokensValue(
    ffi.Pointer<xmlChar> value,
  ) {
    return _xmlValidateNmtokensValue(
      value,
    );
  }

  late final _xmlValidateNmtokensValuePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<xmlChar>)>>(
          'xmlValidateNmtokensValue');
  late final _xmlValidateNmtokensValue = _xmlValidateNmtokensValuePtr
      .asFunction<int Function(ffi.Pointer<xmlChar>)>();

  int xmlValidBuildContentModel(
    xmlValidCtxtPtr ctxt,
    xmlElementPtr elem,
  ) {
    return _xmlValidBuildContentModel(
      ctxt,
      elem,
    );
  }

  late final _xmlValidBuildContentModelPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(xmlValidCtxtPtr, xmlElementPtr)>>(
      'xmlValidBuildContentModel');
  late final _xmlValidBuildContentModel = _xmlValidBuildContentModelPtr
      .asFunction<int Function(xmlValidCtxtPtr, xmlElementPtr)>();

  int xmlValidatePushElement(
    xmlValidCtxtPtr ctxt,
    xmlDocPtr doc,
    xmlNodePtr elem,
    ffi.Pointer<xmlChar> qname,
  ) {
    return _xmlValidatePushElement(
      ctxt,
      doc,
      elem,
      qname,
    );
  }

  late final _xmlValidatePushElementPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(xmlValidCtxtPtr, xmlDocPtr, xmlNodePtr,
              ffi.Pointer<xmlChar>)>>('xmlValidatePushElement');
  late final _xmlValidatePushElement = _xmlValidatePushElementPtr.asFunction<
      int Function(
          xmlValidCtxtPtr, xmlDocPtr, xmlNodePtr, ffi.Pointer<xmlChar>)>();

  int xmlValidatePushCData(
    xmlValidCtxtPtr ctxt,
    ffi.Pointer<xmlChar> data,
    int len,
  ) {
    return _xmlValidatePushCData(
      ctxt,
      data,
      len,
    );
  }

  late final _xmlValidatePushCDataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(xmlValidCtxtPtr, ffi.Pointer<xmlChar>,
              ffi.Int)>>('xmlValidatePushCData');
  late final _xmlValidatePushCData = _xmlValidatePushCDataPtr
      .asFunction<int Function(xmlValidCtxtPtr, ffi.Pointer<xmlChar>, int)>();

  int xmlValidatePopElement(
    xmlValidCtxtPtr ctxt,
    xmlDocPtr doc,
    xmlNodePtr elem,
    ffi.Pointer<xmlChar> qname,
  ) {
    return _xmlValidatePopElement(
      ctxt,
      doc,
      elem,
      qname,
    );
  }

  late final _xmlValidatePopElementPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(xmlValidCtxtPtr, xmlDocPtr, xmlNodePtr,
              ffi.Pointer<xmlChar>)>>('xmlValidatePopElement');
  late final _xmlValidatePopElement = _xmlValidatePopElementPtr.asFunction<
      int Function(
          xmlValidCtxtPtr, xmlDocPtr, xmlNodePtr, ffi.Pointer<xmlChar>)>();

  void xmlInitializePredefinedEntities() {
    return _xmlInitializePredefinedEntities();
  }

  late final _xmlInitializePredefinedEntitiesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'xmlInitializePredefinedEntities');
  late final _xmlInitializePredefinedEntities =
      _xmlInitializePredefinedEntitiesPtr.asFunction<void Function()>();

  xmlEntityPtr xmlNewEntity(
    xmlDocPtr doc,
    ffi.Pointer<xmlChar> name,
    int type,
    ffi.Pointer<xmlChar> ExternalID,
    ffi.Pointer<xmlChar> SystemID,
    ffi.Pointer<xmlChar> content,
  ) {
    return _xmlNewEntity(
      doc,
      name,
      type,
      ExternalID,
      SystemID,
      content,
    );
  }

  late final _xmlNewEntityPtr = _lookup<
      ffi.NativeFunction<
          xmlEntityPtr Function(
              xmlDocPtr,
              ffi.Pointer<xmlChar>,
              ffi.Int,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>)>>('xmlNewEntity');
  late final _xmlNewEntity = _xmlNewEntityPtr.asFunction<
      xmlEntityPtr Function(xmlDocPtr, ffi.Pointer<xmlChar>, int,
          ffi.Pointer<xmlChar>, ffi.Pointer<xmlChar>, ffi.Pointer<xmlChar>)>();

  xmlEntityPtr xmlAddDocEntity(
    xmlDocPtr doc,
    ffi.Pointer<xmlChar> name,
    int type,
    ffi.Pointer<xmlChar> ExternalID,
    ffi.Pointer<xmlChar> SystemID,
    ffi.Pointer<xmlChar> content,
  ) {
    return _xmlAddDocEntity(
      doc,
      name,
      type,
      ExternalID,
      SystemID,
      content,
    );
  }

  late final _xmlAddDocEntityPtr = _lookup<
      ffi.NativeFunction<
          xmlEntityPtr Function(
              xmlDocPtr,
              ffi.Pointer<xmlChar>,
              ffi.Int,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>)>>('xmlAddDocEntity');
  late final _xmlAddDocEntity = _xmlAddDocEntityPtr.asFunction<
      xmlEntityPtr Function(xmlDocPtr, ffi.Pointer<xmlChar>, int,
          ffi.Pointer<xmlChar>, ffi.Pointer<xmlChar>, ffi.Pointer<xmlChar>)>();

  xmlEntityPtr xmlAddDtdEntity(
    xmlDocPtr doc,
    ffi.Pointer<xmlChar> name,
    int type,
    ffi.Pointer<xmlChar> ExternalID,
    ffi.Pointer<xmlChar> SystemID,
    ffi.Pointer<xmlChar> content,
  ) {
    return _xmlAddDtdEntity(
      doc,
      name,
      type,
      ExternalID,
      SystemID,
      content,
    );
  }

  late final _xmlAddDtdEntityPtr = _lookup<
      ffi.NativeFunction<
          xmlEntityPtr Function(
              xmlDocPtr,
              ffi.Pointer<xmlChar>,
              ffi.Int,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>)>>('xmlAddDtdEntity');
  late final _xmlAddDtdEntity = _xmlAddDtdEntityPtr.asFunction<
      xmlEntityPtr Function(xmlDocPtr, ffi.Pointer<xmlChar>, int,
          ffi.Pointer<xmlChar>, ffi.Pointer<xmlChar>, ffi.Pointer<xmlChar>)>();

  xmlEntityPtr xmlGetPredefinedEntity(
    ffi.Pointer<xmlChar> name,
  ) {
    return _xmlGetPredefinedEntity(
      name,
    );
  }

  late final _xmlGetPredefinedEntityPtr =
      _lookup<ffi.NativeFunction<xmlEntityPtr Function(ffi.Pointer<xmlChar>)>>(
          'xmlGetPredefinedEntity');
  late final _xmlGetPredefinedEntity = _xmlGetPredefinedEntityPtr
      .asFunction<xmlEntityPtr Function(ffi.Pointer<xmlChar>)>();

  xmlEntityPtr xmlGetDocEntity(
    ffi.Pointer<xmlDoc> doc,
    ffi.Pointer<xmlChar> name,
  ) {
    return _xmlGetDocEntity(
      doc,
      name,
    );
  }

  late final _xmlGetDocEntityPtr = _lookup<
      ffi.NativeFunction<
          xmlEntityPtr Function(
              ffi.Pointer<xmlDoc>, ffi.Pointer<xmlChar>)>>('xmlGetDocEntity');
  late final _xmlGetDocEntity = _xmlGetDocEntityPtr.asFunction<
      xmlEntityPtr Function(ffi.Pointer<xmlDoc>, ffi.Pointer<xmlChar>)>();

  xmlEntityPtr xmlGetDtdEntity(
    xmlDocPtr doc,
    ffi.Pointer<xmlChar> name,
  ) {
    return _xmlGetDtdEntity(
      doc,
      name,
    );
  }

  late final _xmlGetDtdEntityPtr = _lookup<
      ffi.NativeFunction<
          xmlEntityPtr Function(
              xmlDocPtr, ffi.Pointer<xmlChar>)>>('xmlGetDtdEntity');
  late final _xmlGetDtdEntity = _xmlGetDtdEntityPtr
      .asFunction<xmlEntityPtr Function(xmlDocPtr, ffi.Pointer<xmlChar>)>();

  xmlEntityPtr xmlGetParameterEntity(
    xmlDocPtr doc,
    ffi.Pointer<xmlChar> name,
  ) {
    return _xmlGetParameterEntity(
      doc,
      name,
    );
  }

  late final _xmlGetParameterEntityPtr = _lookup<
      ffi.NativeFunction<
          xmlEntityPtr Function(
              xmlDocPtr, ffi.Pointer<xmlChar>)>>('xmlGetParameterEntity');
  late final _xmlGetParameterEntity = _xmlGetParameterEntityPtr
      .asFunction<xmlEntityPtr Function(xmlDocPtr, ffi.Pointer<xmlChar>)>();

  ffi.Pointer<xmlChar> xmlEncodeEntities(
    xmlDocPtr doc,
    ffi.Pointer<xmlChar> input,
  ) {
    return _xmlEncodeEntities(
      doc,
      input,
    );
  }

  late final _xmlEncodeEntitiesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<xmlChar> Function(
              xmlDocPtr, ffi.Pointer<xmlChar>)>>('xmlEncodeEntities');
  late final _xmlEncodeEntities = _xmlEncodeEntitiesPtr.asFunction<
      ffi.Pointer<xmlChar> Function(xmlDocPtr, ffi.Pointer<xmlChar>)>();

  ffi.Pointer<xmlChar> xmlEncodeEntitiesReentrant(
    xmlDocPtr doc,
    ffi.Pointer<xmlChar> input,
  ) {
    return _xmlEncodeEntitiesReentrant(
      doc,
      input,
    );
  }

  late final _xmlEncodeEntitiesReentrantPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<xmlChar> Function(
              xmlDocPtr, ffi.Pointer<xmlChar>)>>('xmlEncodeEntitiesReentrant');
  late final _xmlEncodeEntitiesReentrant =
      _xmlEncodeEntitiesReentrantPtr.asFunction<
          ffi.Pointer<xmlChar> Function(xmlDocPtr, ffi.Pointer<xmlChar>)>();

  ffi.Pointer<xmlChar> xmlEncodeSpecialChars(
    ffi.Pointer<xmlDoc> doc,
    ffi.Pointer<xmlChar> input,
  ) {
    return _xmlEncodeSpecialChars(
      doc,
      input,
    );
  }

  late final _xmlEncodeSpecialCharsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<xmlChar> Function(ffi.Pointer<xmlDoc>,
              ffi.Pointer<xmlChar>)>>('xmlEncodeSpecialChars');
  late final _xmlEncodeSpecialChars = _xmlEncodeSpecialCharsPtr.asFunction<
      ffi.Pointer<xmlChar> Function(
          ffi.Pointer<xmlDoc>, ffi.Pointer<xmlChar>)>();

  xmlEntitiesTablePtr xmlCreateEntitiesTable() {
    return _xmlCreateEntitiesTable();
  }

  late final _xmlCreateEntitiesTablePtr =
      _lookup<ffi.NativeFunction<xmlEntitiesTablePtr Function()>>(
          'xmlCreateEntitiesTable');
  late final _xmlCreateEntitiesTable =
      _xmlCreateEntitiesTablePtr.asFunction<xmlEntitiesTablePtr Function()>();

  xmlEntitiesTablePtr xmlCopyEntitiesTable(
    xmlEntitiesTablePtr table,
  ) {
    return _xmlCopyEntitiesTable(
      table,
    );
  }

  late final _xmlCopyEntitiesTablePtr = _lookup<
          ffi
          .NativeFunction<xmlEntitiesTablePtr Function(xmlEntitiesTablePtr)>>(
      'xmlCopyEntitiesTable');
  late final _xmlCopyEntitiesTable = _xmlCopyEntitiesTablePtr
      .asFunction<xmlEntitiesTablePtr Function(xmlEntitiesTablePtr)>();

  void xmlFreeEntitiesTable(
    xmlEntitiesTablePtr table,
  ) {
    return _xmlFreeEntitiesTable(
      table,
    );
  }

  late final _xmlFreeEntitiesTablePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(xmlEntitiesTablePtr)>>(
          'xmlFreeEntitiesTable');
  late final _xmlFreeEntitiesTable =
      _xmlFreeEntitiesTablePtr.asFunction<void Function(xmlEntitiesTablePtr)>();

  void xmlDumpEntitiesTable(
    xmlBufferPtr buf,
    xmlEntitiesTablePtr table,
  ) {
    return _xmlDumpEntitiesTable(
      buf,
      table,
    );
  }

  late final _xmlDumpEntitiesTablePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              xmlBufferPtr, xmlEntitiesTablePtr)>>('xmlDumpEntitiesTable');
  late final _xmlDumpEntitiesTable = _xmlDumpEntitiesTablePtr
      .asFunction<void Function(xmlBufferPtr, xmlEntitiesTablePtr)>();

  void xmlDumpEntityDecl(
    xmlBufferPtr buf,
    xmlEntityPtr ent,
  ) {
    return _xmlDumpEntityDecl(
      buf,
      ent,
    );
  }

  late final _xmlDumpEntityDeclPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(xmlBufferPtr, xmlEntityPtr)>>(
      'xmlDumpEntityDecl');
  late final _xmlDumpEntityDecl = _xmlDumpEntityDeclPtr
      .asFunction<void Function(xmlBufferPtr, xmlEntityPtr)>();

  void xmlCleanupPredefinedEntities() {
    return _xmlCleanupPredefinedEntities();
  }

  late final _xmlCleanupPredefinedEntitiesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'xmlCleanupPredefinedEntities');
  late final _xmlCleanupPredefinedEntities =
      _xmlCleanupPredefinedEntitiesPtr.asFunction<void Function()>();

  void xmlInitCharEncodingHandlers() {
    return _xmlInitCharEncodingHandlers();
  }

  late final _xmlInitCharEncodingHandlersPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'xmlInitCharEncodingHandlers');
  late final _xmlInitCharEncodingHandlers =
      _xmlInitCharEncodingHandlersPtr.asFunction<void Function()>();

  void xmlCleanupCharEncodingHandlers() {
    return _xmlCleanupCharEncodingHandlers();
  }

  late final _xmlCleanupCharEncodingHandlersPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'xmlCleanupCharEncodingHandlers');
  late final _xmlCleanupCharEncodingHandlers =
      _xmlCleanupCharEncodingHandlersPtr.asFunction<void Function()>();

  void xmlRegisterCharEncodingHandler(
    xmlCharEncodingHandlerPtr handler,
  ) {
    return _xmlRegisterCharEncodingHandler(
      handler,
    );
  }

  late final _xmlRegisterCharEncodingHandlerPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(xmlCharEncodingHandlerPtr)>>(
          'xmlRegisterCharEncodingHandler');
  late final _xmlRegisterCharEncodingHandler =
      _xmlRegisterCharEncodingHandlerPtr
          .asFunction<void Function(xmlCharEncodingHandlerPtr)>();

  xmlCharEncodingHandlerPtr xmlGetCharEncodingHandler(
    int enc,
  ) {
    return _xmlGetCharEncodingHandler(
      enc,
    );
  }

  late final _xmlGetCharEncodingHandlerPtr = _lookup<
          ffi.NativeFunction<xmlCharEncodingHandlerPtr Function(ffi.Int32)>>(
      'xmlGetCharEncodingHandler');
  late final _xmlGetCharEncodingHandler = _xmlGetCharEncodingHandlerPtr
      .asFunction<xmlCharEncodingHandlerPtr Function(int)>();

  xmlCharEncodingHandlerPtr xmlFindCharEncodingHandler(
    ffi.Pointer<ffi.Char> name,
  ) {
    return _xmlFindCharEncodingHandler(
      name,
    );
  }

  late final _xmlFindCharEncodingHandlerPtr = _lookup<
      ffi.NativeFunction<
          xmlCharEncodingHandlerPtr Function(
              ffi.Pointer<ffi.Char>)>>('xmlFindCharEncodingHandler');
  late final _xmlFindCharEncodingHandler = _xmlFindCharEncodingHandlerPtr
      .asFunction<xmlCharEncodingHandlerPtr Function(ffi.Pointer<ffi.Char>)>();

  xmlCharEncodingHandlerPtr xmlNewCharEncodingHandler(
    ffi.Pointer<ffi.Char> name,
    xmlCharEncodingInputFunc input,
    xmlCharEncodingOutputFunc output,
  ) {
    return _xmlNewCharEncodingHandler(
      name,
      input,
      output,
    );
  }

  late final _xmlNewCharEncodingHandlerPtr = _lookup<
      ffi.NativeFunction<
          xmlCharEncodingHandlerPtr Function(
              ffi.Pointer<ffi.Char>,
              xmlCharEncodingInputFunc,
              xmlCharEncodingOutputFunc)>>('xmlNewCharEncodingHandler');
  late final _xmlNewCharEncodingHandler =
      _xmlNewCharEncodingHandlerPtr.asFunction<
          xmlCharEncodingHandlerPtr Function(ffi.Pointer<ffi.Char>,
              xmlCharEncodingInputFunc, xmlCharEncodingOutputFunc)>();

  int xmlAddEncodingAlias(
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Char> alias,
  ) {
    return _xmlAddEncodingAlias(
      name,
      alias,
    );
  }

  late final _xmlAddEncodingAliasPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('xmlAddEncodingAlias');
  late final _xmlAddEncodingAlias = _xmlAddEncodingAliasPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int xmlDelEncodingAlias(
    ffi.Pointer<ffi.Char> alias,
  ) {
    return _xmlDelEncodingAlias(
      alias,
    );
  }

  late final _xmlDelEncodingAliasPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'xmlDelEncodingAlias');
  late final _xmlDelEncodingAlias =
      _xmlDelEncodingAliasPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> xmlGetEncodingAlias(
    ffi.Pointer<ffi.Char> alias,
  ) {
    return _xmlGetEncodingAlias(
      alias,
    );
  }

  late final _xmlGetEncodingAliasPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('xmlGetEncodingAlias');
  late final _xmlGetEncodingAlias = _xmlGetEncodingAliasPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  void xmlCleanupEncodingAliases() {
    return _xmlCleanupEncodingAliases();
  }

  late final _xmlCleanupEncodingAliasesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'xmlCleanupEncodingAliases');
  late final _xmlCleanupEncodingAliases =
      _xmlCleanupEncodingAliasesPtr.asFunction<void Function()>();

  int xmlParseCharEncoding(
    ffi.Pointer<ffi.Char> name,
  ) {
    return _xmlParseCharEncoding(
      name,
    );
  }

  late final _xmlParseCharEncodingPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Char>)>>(
          'xmlParseCharEncoding');
  late final _xmlParseCharEncoding = _xmlParseCharEncodingPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> xmlGetCharEncodingName(
    int enc,
  ) {
    return _xmlGetCharEncodingName(
      enc,
    );
  }

  late final _xmlGetCharEncodingNamePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int32)>>(
          'xmlGetCharEncodingName');
  late final _xmlGetCharEncodingName = _xmlGetCharEncodingNamePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int xmlDetectCharEncoding(
    ffi.Pointer<ffi.UnsignedChar> in1,
    int len,
  ) {
    return _xmlDetectCharEncoding(
      in1,
      len,
    );
  }

  late final _xmlDetectCharEncodingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>>('xmlDetectCharEncoding');
  late final _xmlDetectCharEncoding = _xmlDetectCharEncodingPtr
      .asFunction<int Function(ffi.Pointer<ffi.UnsignedChar>, int)>();

  int xmlCharEncOutFunc(
    ffi.Pointer<xmlCharEncodingHandler> handler,
    xmlBufferPtr out,
    xmlBufferPtr in1,
  ) {
    return _xmlCharEncOutFunc(
      handler,
      out,
      in1,
    );
  }

  late final _xmlCharEncOutFuncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<xmlCharEncodingHandler>, xmlBufferPtr,
              xmlBufferPtr)>>('xmlCharEncOutFunc');
  late final _xmlCharEncOutFunc = _xmlCharEncOutFuncPtr.asFunction<
      int Function(
          ffi.Pointer<xmlCharEncodingHandler>, xmlBufferPtr, xmlBufferPtr)>();

  int xmlCharEncInFunc(
    ffi.Pointer<xmlCharEncodingHandler> handler,
    xmlBufferPtr out,
    xmlBufferPtr in1,
  ) {
    return _xmlCharEncInFunc(
      handler,
      out,
      in1,
    );
  }

  late final _xmlCharEncInFuncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<xmlCharEncodingHandler>, xmlBufferPtr,
              xmlBufferPtr)>>('xmlCharEncInFunc');
  late final _xmlCharEncInFunc = _xmlCharEncInFuncPtr.asFunction<
      int Function(
          ffi.Pointer<xmlCharEncodingHandler>, xmlBufferPtr, xmlBufferPtr)>();

  int xmlCharEncFirstLine(
    ffi.Pointer<xmlCharEncodingHandler> handler,
    xmlBufferPtr out,
    xmlBufferPtr in1,
  ) {
    return _xmlCharEncFirstLine(
      handler,
      out,
      in1,
    );
  }

  late final _xmlCharEncFirstLinePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<xmlCharEncodingHandler>, xmlBufferPtr,
              xmlBufferPtr)>>('xmlCharEncFirstLine');
  late final _xmlCharEncFirstLine = _xmlCharEncFirstLinePtr.asFunction<
      int Function(
          ffi.Pointer<xmlCharEncodingHandler>, xmlBufferPtr, xmlBufferPtr)>();

  int xmlCharEncCloseFunc(
    ffi.Pointer<xmlCharEncodingHandler> handler,
  ) {
    return _xmlCharEncCloseFunc(
      handler,
    );
  }

  late final _xmlCharEncCloseFuncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<xmlCharEncodingHandler>)>>('xmlCharEncCloseFunc');
  late final _xmlCharEncCloseFunc = _xmlCharEncCloseFuncPtr
      .asFunction<int Function(ffi.Pointer<xmlCharEncodingHandler>)>();

  int UTF8Toisolat1(
    ffi.Pointer<ffi.UnsignedChar> out,
    ffi.Pointer<ffi.Int> outlen,
    ffi.Pointer<ffi.UnsignedChar> in1,
    ffi.Pointer<ffi.Int> inlen,
  ) {
    return _UTF8Toisolat1(
      out,
      outlen,
      in1,
      inlen,
    );
  }

  late final _UTF8Toisolat1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.Int>)>>('UTF8Toisolat1');
  late final _UTF8Toisolat1 = _UTF8Toisolat1Ptr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedChar>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.UnsignedChar>, ffi.Pointer<ffi.Int>)>();

  int isolat1ToUTF8(
    ffi.Pointer<ffi.UnsignedChar> out,
    ffi.Pointer<ffi.Int> outlen,
    ffi.Pointer<ffi.UnsignedChar> in1,
    ffi.Pointer<ffi.Int> inlen,
  ) {
    return _isolat1ToUTF8(
      out,
      outlen,
      in1,
      inlen,
    );
  }

  late final _isolat1ToUTF8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.Int>)>>('isolat1ToUTF8');
  late final _isolat1ToUTF8 = _isolat1ToUTF8Ptr.asFunction<
      int Function(ffi.Pointer<ffi.UnsignedChar>, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.UnsignedChar>, ffi.Pointer<ffi.Int>)>();

  void xmlCleanupInputCallbacks() {
    return _xmlCleanupInputCallbacks();
  }

  late final _xmlCleanupInputCallbacksPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'xmlCleanupInputCallbacks');
  late final _xmlCleanupInputCallbacks =
      _xmlCleanupInputCallbacksPtr.asFunction<void Function()>();

  int xmlPopInputCallbacks() {
    return _xmlPopInputCallbacks();
  }

  late final _xmlPopInputCallbacksPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('xmlPopInputCallbacks');
  late final _xmlPopInputCallbacks =
      _xmlPopInputCallbacksPtr.asFunction<int Function()>();

  void xmlRegisterDefaultInputCallbacks() {
    return _xmlRegisterDefaultInputCallbacks();
  }

  late final _xmlRegisterDefaultInputCallbacksPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'xmlRegisterDefaultInputCallbacks');
  late final _xmlRegisterDefaultInputCallbacks =
      _xmlRegisterDefaultInputCallbacksPtr.asFunction<void Function()>();

  xmlParserInputBufferPtr xmlAllocParserInputBuffer(
    int enc,
  ) {
    return _xmlAllocParserInputBuffer(
      enc,
    );
  }

  late final _xmlAllocParserInputBufferPtr =
      _lookup<ffi.NativeFunction<xmlParserInputBufferPtr Function(ffi.Int32)>>(
          'xmlAllocParserInputBuffer');
  late final _xmlAllocParserInputBuffer = _xmlAllocParserInputBufferPtr
      .asFunction<xmlParserInputBufferPtr Function(int)>();

  xmlParserInputBufferPtr xmlParserInputBufferCreateFilename(
    ffi.Pointer<ffi.Char> URI,
    int enc,
  ) {
    return _xmlParserInputBufferCreateFilename(
      URI,
      enc,
    );
  }

  late final _xmlParserInputBufferCreateFilenamePtr = _lookup<
      ffi.NativeFunction<
          xmlParserInputBufferPtr Function(ffi.Pointer<ffi.Char>,
              ffi.Int32)>>('xmlParserInputBufferCreateFilename');
  late final _xmlParserInputBufferCreateFilename =
      _xmlParserInputBufferCreateFilenamePtr.asFunction<
          xmlParserInputBufferPtr Function(ffi.Pointer<ffi.Char>, int)>();

  xmlParserInputBufferPtr xmlParserInputBufferCreateFile(
    ffi.Pointer<FILE> file,
    int enc,
  ) {
    return _xmlParserInputBufferCreateFile(
      file,
      enc,
    );
  }

  late final _xmlParserInputBufferCreateFilePtr = _lookup<
      ffi.NativeFunction<
          xmlParserInputBufferPtr Function(
              ffi.Pointer<FILE>, ffi.Int32)>>('xmlParserInputBufferCreateFile');
  late final _xmlParserInputBufferCreateFile =
      _xmlParserInputBufferCreateFilePtr.asFunction<
          xmlParserInputBufferPtr Function(ffi.Pointer<FILE>, int)>();

  xmlParserInputBufferPtr xmlParserInputBufferCreateFd(
    int fd,
    int enc,
  ) {
    return _xmlParserInputBufferCreateFd(
      fd,
      enc,
    );
  }

  late final _xmlParserInputBufferCreateFdPtr = _lookup<
      ffi.NativeFunction<
          xmlParserInputBufferPtr Function(
              ffi.Int, ffi.Int32)>>('xmlParserInputBufferCreateFd');
  late final _xmlParserInputBufferCreateFd = _xmlParserInputBufferCreateFdPtr
      .asFunction<xmlParserInputBufferPtr Function(int, int)>();

  xmlParserInputBufferPtr xmlParserInputBufferCreateMem(
    ffi.Pointer<ffi.Char> mem,
    int size,
    int enc,
  ) {
    return _xmlParserInputBufferCreateMem(
      mem,
      size,
      enc,
    );
  }

  late final _xmlParserInputBufferCreateMemPtr = _lookup<
      ffi.NativeFunction<
          xmlParserInputBufferPtr Function(ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Int32)>>('xmlParserInputBufferCreateMem');
  late final _xmlParserInputBufferCreateMem =
      _xmlParserInputBufferCreateMemPtr.asFunction<
          xmlParserInputBufferPtr Function(ffi.Pointer<ffi.Char>, int, int)>();

  xmlParserInputBufferPtr xmlParserInputBufferCreateStatic(
    ffi.Pointer<ffi.Char> mem,
    int size,
    int enc,
  ) {
    return _xmlParserInputBufferCreateStatic(
      mem,
      size,
      enc,
    );
  }

  late final _xmlParserInputBufferCreateStaticPtr = _lookup<
      ffi.NativeFunction<
          xmlParserInputBufferPtr Function(ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Int32)>>('xmlParserInputBufferCreateStatic');
  late final _xmlParserInputBufferCreateStatic =
      _xmlParserInputBufferCreateStaticPtr.asFunction<
          xmlParserInputBufferPtr Function(ffi.Pointer<ffi.Char>, int, int)>();

  xmlParserInputBufferPtr xmlParserInputBufferCreateIO(
    xmlInputReadCallback ioread,
    xmlInputCloseCallback ioclose,
    ffi.Pointer<ffi.Void> ioctx,
    int enc,
  ) {
    return _xmlParserInputBufferCreateIO(
      ioread,
      ioclose,
      ioctx,
      enc,
    );
  }

  late final _xmlParserInputBufferCreateIOPtr = _lookup<
      ffi.NativeFunction<
          xmlParserInputBufferPtr Function(
              xmlInputReadCallback,
              xmlInputCloseCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Int32)>>('xmlParserInputBufferCreateIO');
  late final _xmlParserInputBufferCreateIO =
      _xmlParserInputBufferCreateIOPtr.asFunction<
          xmlParserInputBufferPtr Function(xmlInputReadCallback,
              xmlInputCloseCallback, ffi.Pointer<ffi.Void>, int)>();

  int xmlParserInputBufferRead(
    xmlParserInputBufferPtr in1,
    int len,
  ) {
    return _xmlParserInputBufferRead(
      in1,
      len,
    );
  }

  late final _xmlParserInputBufferReadPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int Function(xmlParserInputBufferPtr, ffi.Int)>>(
      'xmlParserInputBufferRead');
  late final _xmlParserInputBufferRead = _xmlParserInputBufferReadPtr
      .asFunction<int Function(xmlParserInputBufferPtr, int)>();

  int xmlParserInputBufferGrow(
    xmlParserInputBufferPtr in1,
    int len,
  ) {
    return _xmlParserInputBufferGrow(
      in1,
      len,
    );
  }

  late final _xmlParserInputBufferGrowPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int Function(xmlParserInputBufferPtr, ffi.Int)>>(
      'xmlParserInputBufferGrow');
  late final _xmlParserInputBufferGrow = _xmlParserInputBufferGrowPtr
      .asFunction<int Function(xmlParserInputBufferPtr, int)>();

  int xmlParserInputBufferPush(
    xmlParserInputBufferPtr in1,
    int len,
    ffi.Pointer<ffi.Char> buf,
  ) {
    return _xmlParserInputBufferPush(
      in1,
      len,
      buf,
    );
  }

  late final _xmlParserInputBufferPushPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(xmlParserInputBufferPtr, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('xmlParserInputBufferPush');
  late final _xmlParserInputBufferPush =
      _xmlParserInputBufferPushPtr.asFunction<
          int Function(xmlParserInputBufferPtr, int, ffi.Pointer<ffi.Char>)>();

  void xmlFreeParserInputBuffer(
    xmlParserInputBufferPtr in1,
  ) {
    return _xmlFreeParserInputBuffer(
      in1,
    );
  }

  late final _xmlFreeParserInputBufferPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(xmlParserInputBufferPtr)>>(
          'xmlFreeParserInputBuffer');
  late final _xmlFreeParserInputBuffer = _xmlFreeParserInputBufferPtr
      .asFunction<void Function(xmlParserInputBufferPtr)>();

  ffi.Pointer<ffi.Char> xmlParserGetDirectory(
    ffi.Pointer<ffi.Char> filename,
  ) {
    return _xmlParserGetDirectory(
      filename,
    );
  }

  late final _xmlParserGetDirectoryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('xmlParserGetDirectory');
  late final _xmlParserGetDirectory = _xmlParserGetDirectoryPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int xmlRegisterInputCallbacks(
    xmlInputMatchCallback matchFunc,
    xmlInputOpenCallback openFunc,
    xmlInputReadCallback readFunc,
    xmlInputCloseCallback closeFunc,
  ) {
    return _xmlRegisterInputCallbacks(
      matchFunc,
      openFunc,
      readFunc,
      closeFunc,
    );
  }

  late final _xmlRegisterInputCallbacksPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              xmlInputMatchCallback,
              xmlInputOpenCallback,
              xmlInputReadCallback,
              xmlInputCloseCallback)>>('xmlRegisterInputCallbacks');
  late final _xmlRegisterInputCallbacks =
      _xmlRegisterInputCallbacksPtr.asFunction<
          int Function(xmlInputMatchCallback, xmlInputOpenCallback,
              xmlInputReadCallback, xmlInputCloseCallback)>();

  xmlParserInputBufferPtr __xmlParserInputBufferCreateFilename(
    ffi.Pointer<ffi.Char> URI,
    int enc,
  ) {
    return ___xmlParserInputBufferCreateFilename(
      URI,
      enc,
    );
  }

  late final ___xmlParserInputBufferCreateFilenamePtr = _lookup<
      ffi.NativeFunction<
          xmlParserInputBufferPtr Function(ffi.Pointer<ffi.Char>,
              ffi.Int32)>>('__xmlParserInputBufferCreateFilename');
  late final ___xmlParserInputBufferCreateFilename =
      ___xmlParserInputBufferCreateFilenamePtr.asFunction<
          xmlParserInputBufferPtr Function(ffi.Pointer<ffi.Char>, int)>();

  void xmlCleanupOutputCallbacks() {
    return _xmlCleanupOutputCallbacks();
  }

  late final _xmlCleanupOutputCallbacksPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'xmlCleanupOutputCallbacks');
  late final _xmlCleanupOutputCallbacks =
      _xmlCleanupOutputCallbacksPtr.asFunction<void Function()>();

  int xmlPopOutputCallbacks() {
    return _xmlPopOutputCallbacks();
  }

  late final _xmlPopOutputCallbacksPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('xmlPopOutputCallbacks');
  late final _xmlPopOutputCallbacks =
      _xmlPopOutputCallbacksPtr.asFunction<int Function()>();

  void xmlRegisterDefaultOutputCallbacks() {
    return _xmlRegisterDefaultOutputCallbacks();
  }

  late final _xmlRegisterDefaultOutputCallbacksPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'xmlRegisterDefaultOutputCallbacks');
  late final _xmlRegisterDefaultOutputCallbacks =
      _xmlRegisterDefaultOutputCallbacksPtr.asFunction<void Function()>();

  xmlOutputBufferPtr xmlAllocOutputBuffer(
    xmlCharEncodingHandlerPtr encoder,
  ) {
    return _xmlAllocOutputBuffer(
      encoder,
    );
  }

  late final _xmlAllocOutputBufferPtr = _lookup<
      ffi.NativeFunction<
          xmlOutputBufferPtr Function(
              xmlCharEncodingHandlerPtr)>>('xmlAllocOutputBuffer');
  late final _xmlAllocOutputBuffer = _xmlAllocOutputBufferPtr
      .asFunction<xmlOutputBufferPtr Function(xmlCharEncodingHandlerPtr)>();

  xmlOutputBufferPtr xmlOutputBufferCreateFilename(
    ffi.Pointer<ffi.Char> URI,
    xmlCharEncodingHandlerPtr encoder,
    int compression,
  ) {
    return _xmlOutputBufferCreateFilename(
      URI,
      encoder,
      compression,
    );
  }

  late final _xmlOutputBufferCreateFilenamePtr = _lookup<
      ffi.NativeFunction<
          xmlOutputBufferPtr Function(
              ffi.Pointer<ffi.Char>,
              xmlCharEncodingHandlerPtr,
              ffi.Int)>>('xmlOutputBufferCreateFilename');
  late final _xmlOutputBufferCreateFilename =
      _xmlOutputBufferCreateFilenamePtr.asFunction<
          xmlOutputBufferPtr Function(
              ffi.Pointer<ffi.Char>, xmlCharEncodingHandlerPtr, int)>();

  xmlOutputBufferPtr xmlOutputBufferCreateFile(
    ffi.Pointer<FILE> file,
    xmlCharEncodingHandlerPtr encoder,
  ) {
    return _xmlOutputBufferCreateFile(
      file,
      encoder,
    );
  }

  late final _xmlOutputBufferCreateFilePtr = _lookup<
      ffi.NativeFunction<
          xmlOutputBufferPtr Function(ffi.Pointer<FILE>,
              xmlCharEncodingHandlerPtr)>>('xmlOutputBufferCreateFile');
  late final _xmlOutputBufferCreateFile =
      _xmlOutputBufferCreateFilePtr.asFunction<
          xmlOutputBufferPtr Function(
              ffi.Pointer<FILE>, xmlCharEncodingHandlerPtr)>();

  xmlOutputBufferPtr xmlOutputBufferCreateBuffer(
    xmlBufferPtr buffer,
    xmlCharEncodingHandlerPtr encoder,
  ) {
    return _xmlOutputBufferCreateBuffer(
      buffer,
      encoder,
    );
  }

  late final _xmlOutputBufferCreateBufferPtr = _lookup<
      ffi.NativeFunction<
          xmlOutputBufferPtr Function(xmlBufferPtr,
              xmlCharEncodingHandlerPtr)>>('xmlOutputBufferCreateBuffer');
  late final _xmlOutputBufferCreateBuffer =
      _xmlOutputBufferCreateBufferPtr.asFunction<
          xmlOutputBufferPtr Function(
              xmlBufferPtr, xmlCharEncodingHandlerPtr)>();

  xmlOutputBufferPtr xmlOutputBufferCreateFd(
    int fd,
    xmlCharEncodingHandlerPtr encoder,
  ) {
    return _xmlOutputBufferCreateFd(
      fd,
      encoder,
    );
  }

  late final _xmlOutputBufferCreateFdPtr = _lookup<
      ffi.NativeFunction<
          xmlOutputBufferPtr Function(
              ffi.Int, xmlCharEncodingHandlerPtr)>>('xmlOutputBufferCreateFd');
  late final _xmlOutputBufferCreateFd = _xmlOutputBufferCreateFdPtr.asFunction<
      xmlOutputBufferPtr Function(int, xmlCharEncodingHandlerPtr)>();

  xmlOutputBufferPtr xmlOutputBufferCreateIO(
    xmlOutputWriteCallback iowrite,
    xmlOutputCloseCallback ioclose,
    ffi.Pointer<ffi.Void> ioctx,
    xmlCharEncodingHandlerPtr encoder,
  ) {
    return _xmlOutputBufferCreateIO(
      iowrite,
      ioclose,
      ioctx,
      encoder,
    );
  }

  late final _xmlOutputBufferCreateIOPtr = _lookup<
      ffi.NativeFunction<
          xmlOutputBufferPtr Function(
              xmlOutputWriteCallback,
              xmlOutputCloseCallback,
              ffi.Pointer<ffi.Void>,
              xmlCharEncodingHandlerPtr)>>('xmlOutputBufferCreateIO');
  late final _xmlOutputBufferCreateIO = _xmlOutputBufferCreateIOPtr.asFunction<
      xmlOutputBufferPtr Function(
          xmlOutputWriteCallback,
          xmlOutputCloseCallback,
          ffi.Pointer<ffi.Void>,
          xmlCharEncodingHandlerPtr)>();

  ffi.Pointer<xmlChar> xmlOutputBufferGetContent(
    xmlOutputBufferPtr out,
  ) {
    return _xmlOutputBufferGetContent(
      out,
    );
  }

  late final _xmlOutputBufferGetContentPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<xmlChar> Function(xmlOutputBufferPtr)>>(
      'xmlOutputBufferGetContent');
  late final _xmlOutputBufferGetContent = _xmlOutputBufferGetContentPtr
      .asFunction<ffi.Pointer<xmlChar> Function(xmlOutputBufferPtr)>();

  int xmlOutputBufferGetSize(
    xmlOutputBufferPtr out,
  ) {
    return _xmlOutputBufferGetSize(
      out,
    );
  }

  late final _xmlOutputBufferGetSizePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(xmlOutputBufferPtr)>>(
          'xmlOutputBufferGetSize');
  late final _xmlOutputBufferGetSize =
      _xmlOutputBufferGetSizePtr.asFunction<int Function(xmlOutputBufferPtr)>();

  int xmlOutputBufferWrite(
    xmlOutputBufferPtr out,
    int len,
    ffi.Pointer<ffi.Char> buf,
  ) {
    return _xmlOutputBufferWrite(
      out,
      len,
      buf,
    );
  }

  late final _xmlOutputBufferWritePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(xmlOutputBufferPtr, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('xmlOutputBufferWrite');
  late final _xmlOutputBufferWrite = _xmlOutputBufferWritePtr.asFunction<
      int Function(xmlOutputBufferPtr, int, ffi.Pointer<ffi.Char>)>();

  int xmlOutputBufferWriteString(
    xmlOutputBufferPtr out,
    ffi.Pointer<ffi.Char> str,
  ) {
    return _xmlOutputBufferWriteString(
      out,
      str,
    );
  }

  late final _xmlOutputBufferWriteStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(xmlOutputBufferPtr,
              ffi.Pointer<ffi.Char>)>>('xmlOutputBufferWriteString');
  late final _xmlOutputBufferWriteString = _xmlOutputBufferWriteStringPtr
      .asFunction<int Function(xmlOutputBufferPtr, ffi.Pointer<ffi.Char>)>();

  int xmlOutputBufferWriteEscape(
    xmlOutputBufferPtr out,
    ffi.Pointer<xmlChar> str,
    xmlCharEncodingOutputFunc escaping,
  ) {
    return _xmlOutputBufferWriteEscape(
      out,
      str,
      escaping,
    );
  }

  late final _xmlOutputBufferWriteEscapePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(xmlOutputBufferPtr, ffi.Pointer<xmlChar>,
              xmlCharEncodingOutputFunc)>>('xmlOutputBufferWriteEscape');
  late final _xmlOutputBufferWriteEscape =
      _xmlOutputBufferWriteEscapePtr.asFunction<
          int Function(xmlOutputBufferPtr, ffi.Pointer<xmlChar>,
              xmlCharEncodingOutputFunc)>();

  int xmlOutputBufferFlush(
    xmlOutputBufferPtr out,
  ) {
    return _xmlOutputBufferFlush(
      out,
    );
  }

  late final _xmlOutputBufferFlushPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(xmlOutputBufferPtr)>>(
          'xmlOutputBufferFlush');
  late final _xmlOutputBufferFlush =
      _xmlOutputBufferFlushPtr.asFunction<int Function(xmlOutputBufferPtr)>();

  int xmlOutputBufferClose(
    xmlOutputBufferPtr out,
  ) {
    return _xmlOutputBufferClose(
      out,
    );
  }

  late final _xmlOutputBufferClosePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(xmlOutputBufferPtr)>>(
          'xmlOutputBufferClose');
  late final _xmlOutputBufferClose =
      _xmlOutputBufferClosePtr.asFunction<int Function(xmlOutputBufferPtr)>();

  int xmlRegisterOutputCallbacks(
    xmlOutputMatchCallback matchFunc,
    xmlOutputOpenCallback openFunc,
    xmlOutputWriteCallback writeFunc,
    xmlOutputCloseCallback closeFunc,
  ) {
    return _xmlRegisterOutputCallbacks(
      matchFunc,
      openFunc,
      writeFunc,
      closeFunc,
    );
  }

  late final _xmlRegisterOutputCallbacksPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              xmlOutputMatchCallback,
              xmlOutputOpenCallback,
              xmlOutputWriteCallback,
              xmlOutputCloseCallback)>>('xmlRegisterOutputCallbacks');
  late final _xmlRegisterOutputCallbacks =
      _xmlRegisterOutputCallbacksPtr.asFunction<
          int Function(xmlOutputMatchCallback, xmlOutputOpenCallback,
              xmlOutputWriteCallback, xmlOutputCloseCallback)>();

  xmlOutputBufferPtr __xmlOutputBufferCreateFilename(
    ffi.Pointer<ffi.Char> URI,
    xmlCharEncodingHandlerPtr encoder,
    int compression,
  ) {
    return ___xmlOutputBufferCreateFilename(
      URI,
      encoder,
      compression,
    );
  }

  late final ___xmlOutputBufferCreateFilenamePtr = _lookup<
      ffi.NativeFunction<
          xmlOutputBufferPtr Function(
              ffi.Pointer<ffi.Char>,
              xmlCharEncodingHandlerPtr,
              ffi.Int)>>('__xmlOutputBufferCreateFilename');
  late final ___xmlOutputBufferCreateFilename =
      ___xmlOutputBufferCreateFilenamePtr.asFunction<
          xmlOutputBufferPtr Function(
              ffi.Pointer<ffi.Char>, xmlCharEncodingHandlerPtr, int)>();

  void xmlRegisterHTTPPostCallbacks() {
    return _xmlRegisterHTTPPostCallbacks();
  }

  late final _xmlRegisterHTTPPostCallbacksPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'xmlRegisterHTTPPostCallbacks');
  late final _xmlRegisterHTTPPostCallbacks =
      _xmlRegisterHTTPPostCallbacksPtr.asFunction<void Function()>();

  xmlParserInputPtr xmlCheckHTTPInput(
    xmlParserCtxtPtr ctxt,
    xmlParserInputPtr ret,
  ) {
    return _xmlCheckHTTPInput(
      ctxt,
      ret,
    );
  }

  late final _xmlCheckHTTPInputPtr = _lookup<
      ffi.NativeFunction<
          xmlParserInputPtr Function(
              xmlParserCtxtPtr, xmlParserInputPtr)>>('xmlCheckHTTPInput');
  late final _xmlCheckHTTPInput = _xmlCheckHTTPInputPtr.asFunction<
      xmlParserInputPtr Function(xmlParserCtxtPtr, xmlParserInputPtr)>();

  xmlParserInputPtr xmlNoNetExternalEntityLoader(
    ffi.Pointer<ffi.Char> URL,
    ffi.Pointer<ffi.Char> ID,
    xmlParserCtxtPtr ctxt,
  ) {
    return _xmlNoNetExternalEntityLoader(
      URL,
      ID,
      ctxt,
    );
  }

  late final _xmlNoNetExternalEntityLoaderPtr = _lookup<
      ffi.NativeFunction<
          xmlParserInputPtr Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              xmlParserCtxtPtr)>>('xmlNoNetExternalEntityLoader');
  late final _xmlNoNetExternalEntityLoader =
      _xmlNoNetExternalEntityLoaderPtr.asFunction<
          xmlParserInputPtr Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, xmlParserCtxtPtr)>();

  ffi.Pointer<xmlChar> xmlNormalizeWindowsPath(
    ffi.Pointer<xmlChar> path,
  ) {
    return _xmlNormalizeWindowsPath(
      path,
    );
  }

  late final _xmlNormalizeWindowsPathPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<xmlChar> Function(ffi.Pointer<xmlChar>)>>(
      'xmlNormalizeWindowsPath');
  late final _xmlNormalizeWindowsPath = _xmlNormalizeWindowsPathPtr
      .asFunction<ffi.Pointer<xmlChar> Function(ffi.Pointer<xmlChar>)>();

  int xmlCheckFilename(
    ffi.Pointer<ffi.Char> path,
  ) {
    return _xmlCheckFilename(
      path,
    );
  }

  late final _xmlCheckFilenamePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'xmlCheckFilename');
  late final _xmlCheckFilename =
      _xmlCheckFilenamePtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  /// Default 'file://' protocol callbacks
  int xmlFileMatch(
    ffi.Pointer<ffi.Char> filename,
  ) {
    return _xmlFileMatch(
      filename,
    );
  }

  late final _xmlFileMatchPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'xmlFileMatch');
  late final _xmlFileMatch =
      _xmlFileMatchPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Void> xmlFileOpen(
    ffi.Pointer<ffi.Char> filename,
  ) {
    return _xmlFileOpen(
      filename,
    );
  }

  late final _xmlFileOpenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Char>)>>('xmlFileOpen');
  late final _xmlFileOpen = _xmlFileOpenPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Char>)>();

  int xmlFileRead(
    ffi.Pointer<ffi.Void> context,
    ffi.Pointer<ffi.Char> buffer,
    int len,
  ) {
    return _xmlFileRead(
      context,
      buffer,
      len,
    );
  }

  late final _xmlFileReadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('xmlFileRead');
  late final _xmlFileRead = _xmlFileReadPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>, int)>();

  int xmlFileClose(
    ffi.Pointer<ffi.Void> context,
  ) {
    return _xmlFileClose(
      context,
    );
  }

  late final _xmlFileClosePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>(
          'xmlFileClose');
  late final _xmlFileClose =
      _xmlFileClosePtr.asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  int xmlIOHTTPMatch(
    ffi.Pointer<ffi.Char> filename,
  ) {
    return _xmlIOHTTPMatch(
      filename,
    );
  }

  late final _xmlIOHTTPMatchPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'xmlIOHTTPMatch');
  late final _xmlIOHTTPMatch =
      _xmlIOHTTPMatchPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Void> xmlIOHTTPOpen(
    ffi.Pointer<ffi.Char> filename,
  ) {
    return _xmlIOHTTPOpen(
      filename,
    );
  }

  late final _xmlIOHTTPOpenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Char>)>>('xmlIOHTTPOpen');
  late final _xmlIOHTTPOpen = _xmlIOHTTPOpenPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Void> xmlIOHTTPOpenW(
    ffi.Pointer<ffi.Char> post_uri,
    int compression,
  ) {
    return _xmlIOHTTPOpenW(
      post_uri,
      compression,
    );
  }

  late final _xmlIOHTTPOpenWPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('xmlIOHTTPOpenW');
  late final _xmlIOHTTPOpenW = _xmlIOHTTPOpenWPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Char>, int)>();

  int xmlIOHTTPRead(
    ffi.Pointer<ffi.Void> context,
    ffi.Pointer<ffi.Char> buffer,
    int len,
  ) {
    return _xmlIOHTTPRead(
      context,
      buffer,
      len,
    );
  }

  late final _xmlIOHTTPReadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('xmlIOHTTPRead');
  late final _xmlIOHTTPRead = _xmlIOHTTPReadPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>, int)>();

  int xmlIOHTTPClose(
    ffi.Pointer<ffi.Void> context,
  ) {
    return _xmlIOHTTPClose(
      context,
    );
  }

  late final _xmlIOHTTPClosePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>(
          'xmlIOHTTPClose');
  late final _xmlIOHTTPClose =
      _xmlIOHTTPClosePtr.asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  int xmlIOFTPMatch(
    ffi.Pointer<ffi.Char> filename,
  ) {
    return _xmlIOFTPMatch(
      filename,
    );
  }

  late final _xmlIOFTPMatchPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'xmlIOFTPMatch');
  late final _xmlIOFTPMatch =
      _xmlIOFTPMatchPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Void> xmlIOFTPOpen(
    ffi.Pointer<ffi.Char> filename,
  ) {
    return _xmlIOFTPOpen(
      filename,
    );
  }

  late final _xmlIOFTPOpenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Char>)>>('xmlIOFTPOpen');
  late final _xmlIOFTPOpen = _xmlIOFTPOpenPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Char>)>();

  int xmlIOFTPRead(
    ffi.Pointer<ffi.Void> context,
    ffi.Pointer<ffi.Char> buffer,
    int len,
  ) {
    return _xmlIOFTPRead(
      context,
      buffer,
      len,
    );
  }

  late final _xmlIOFTPReadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('xmlIOFTPRead');
  late final _xmlIOFTPRead = _xmlIOFTPReadPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>, int)>();

  int xmlIOFTPClose(
    ffi.Pointer<ffi.Void> context,
  ) {
    return _xmlIOFTPClose(
      context,
    );
  }

  late final _xmlIOFTPClosePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>(
          'xmlIOFTPClose');
  late final _xmlIOFTPClose =
      _xmlIOFTPClosePtr.asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  void xmlInitParser() {
    return _xmlInitParser();
  }

  late final _xmlInitParserPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('xmlInitParser');
  late final _xmlInitParser = _xmlInitParserPtr.asFunction<void Function()>();

  void xmlCleanupParser() {
    return _xmlCleanupParser();
  }

  late final _xmlCleanupParserPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('xmlCleanupParser');
  late final _xmlCleanupParser =
      _xmlCleanupParserPtr.asFunction<void Function()>();

  int xmlParserInputRead(
    xmlParserInputPtr in1,
    int len,
  ) {
    return _xmlParserInputRead(
      in1,
      len,
    );
  }

  late final _xmlParserInputReadPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(xmlParserInputPtr, ffi.Int)>>(
          'xmlParserInputRead');
  late final _xmlParserInputRead =
      _xmlParserInputReadPtr.asFunction<int Function(xmlParserInputPtr, int)>();

  int xmlParserInputGrow(
    xmlParserInputPtr in1,
    int len,
  ) {
    return _xmlParserInputGrow(
      in1,
      len,
    );
  }

  late final _xmlParserInputGrowPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(xmlParserInputPtr, ffi.Int)>>(
          'xmlParserInputGrow');
  late final _xmlParserInputGrow =
      _xmlParserInputGrowPtr.asFunction<int Function(xmlParserInputPtr, int)>();

  xmlDocPtr xmlParseDoc(
    ffi.Pointer<xmlChar> cur,
  ) {
    return _xmlParseDoc(
      cur,
    );
  }

  late final _xmlParseDocPtr =
      _lookup<ffi.NativeFunction<xmlDocPtr Function(ffi.Pointer<xmlChar>)>>(
          'xmlParseDoc');
  late final _xmlParseDoc =
      _xmlParseDocPtr.asFunction<xmlDocPtr Function(ffi.Pointer<xmlChar>)>();

  xmlDocPtr xmlParseFile(
    ffi.Pointer<ffi.Char> filename,
  ) {
    return _xmlParseFile(
      filename,
    );
  }

  late final _xmlParseFilePtr =
      _lookup<ffi.NativeFunction<xmlDocPtr Function(ffi.Pointer<ffi.Char>)>>(
          'xmlParseFile');
  late final _xmlParseFile =
      _xmlParseFilePtr.asFunction<xmlDocPtr Function(ffi.Pointer<ffi.Char>)>();

  xmlDocPtr xmlParseMemory(
    ffi.Pointer<ffi.Char> buffer,
    int size,
  ) {
    return _xmlParseMemory(
      buffer,
      size,
    );
  }

  late final _xmlParseMemoryPtr = _lookup<
          ffi
          .NativeFunction<xmlDocPtr Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'xmlParseMemory');
  late final _xmlParseMemory = _xmlParseMemoryPtr
      .asFunction<xmlDocPtr Function(ffi.Pointer<ffi.Char>, int)>();

  int xmlSubstituteEntitiesDefault(
    int val,
  ) {
    return _xmlSubstituteEntitiesDefault(
      val,
    );
  }

  late final _xmlSubstituteEntitiesDefaultPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'xmlSubstituteEntitiesDefault');
  late final _xmlSubstituteEntitiesDefault =
      _xmlSubstituteEntitiesDefaultPtr.asFunction<int Function(int)>();

  int xmlKeepBlanksDefault(
    int val,
  ) {
    return _xmlKeepBlanksDefault(
      val,
    );
  }

  late final _xmlKeepBlanksDefaultPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'xmlKeepBlanksDefault');
  late final _xmlKeepBlanksDefault =
      _xmlKeepBlanksDefaultPtr.asFunction<int Function(int)>();

  void xmlStopParser(
    xmlParserCtxtPtr ctxt,
  ) {
    return _xmlStopParser(
      ctxt,
    );
  }

  late final _xmlStopParserPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(xmlParserCtxtPtr)>>(
          'xmlStopParser');
  late final _xmlStopParser =
      _xmlStopParserPtr.asFunction<void Function(xmlParserCtxtPtr)>();

  int xmlPedanticParserDefault(
    int val,
  ) {
    return _xmlPedanticParserDefault(
      val,
    );
  }

  late final _xmlPedanticParserDefaultPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'xmlPedanticParserDefault');
  late final _xmlPedanticParserDefault =
      _xmlPedanticParserDefaultPtr.asFunction<int Function(int)>();

  int xmlLineNumbersDefault(
    int val,
  ) {
    return _xmlLineNumbersDefault(
      val,
    );
  }

  late final _xmlLineNumbersDefaultPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'xmlLineNumbersDefault');
  late final _xmlLineNumbersDefault =
      _xmlLineNumbersDefaultPtr.asFunction<int Function(int)>();

  xmlDocPtr xmlRecoverDoc(
    ffi.Pointer<xmlChar> cur,
  ) {
    return _xmlRecoverDoc(
      cur,
    );
  }

  late final _xmlRecoverDocPtr =
      _lookup<ffi.NativeFunction<xmlDocPtr Function(ffi.Pointer<xmlChar>)>>(
          'xmlRecoverDoc');
  late final _xmlRecoverDoc =
      _xmlRecoverDocPtr.asFunction<xmlDocPtr Function(ffi.Pointer<xmlChar>)>();

  xmlDocPtr xmlRecoverMemory(
    ffi.Pointer<ffi.Char> buffer,
    int size,
  ) {
    return _xmlRecoverMemory(
      buffer,
      size,
    );
  }

  late final _xmlRecoverMemoryPtr = _lookup<
          ffi
          .NativeFunction<xmlDocPtr Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'xmlRecoverMemory');
  late final _xmlRecoverMemory = _xmlRecoverMemoryPtr
      .asFunction<xmlDocPtr Function(ffi.Pointer<ffi.Char>, int)>();

  xmlDocPtr xmlRecoverFile(
    ffi.Pointer<ffi.Char> filename,
  ) {
    return _xmlRecoverFile(
      filename,
    );
  }

  late final _xmlRecoverFilePtr =
      _lookup<ffi.NativeFunction<xmlDocPtr Function(ffi.Pointer<ffi.Char>)>>(
          'xmlRecoverFile');
  late final _xmlRecoverFile = _xmlRecoverFilePtr
      .asFunction<xmlDocPtr Function(ffi.Pointer<ffi.Char>)>();

  int xmlParseDocument(
    xmlParserCtxtPtr ctxt,
  ) {
    return _xmlParseDocument(
      ctxt,
    );
  }

  late final _xmlParseDocumentPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(xmlParserCtxtPtr)>>(
          'xmlParseDocument');
  late final _xmlParseDocument =
      _xmlParseDocumentPtr.asFunction<int Function(xmlParserCtxtPtr)>();

  int xmlParseExtParsedEnt(
    xmlParserCtxtPtr ctxt,
  ) {
    return _xmlParseExtParsedEnt(
      ctxt,
    );
  }

  late final _xmlParseExtParsedEntPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(xmlParserCtxtPtr)>>(
          'xmlParseExtParsedEnt');
  late final _xmlParseExtParsedEnt =
      _xmlParseExtParsedEntPtr.asFunction<int Function(xmlParserCtxtPtr)>();

  int xmlSAXUserParseFile(
    xmlSAXHandlerPtr sax,
    ffi.Pointer<ffi.Void> user_data,
    ffi.Pointer<ffi.Char> filename,
  ) {
    return _xmlSAXUserParseFile(
      sax,
      user_data,
      filename,
    );
  }

  late final _xmlSAXUserParseFilePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(xmlSAXHandlerPtr, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>)>>('xmlSAXUserParseFile');
  late final _xmlSAXUserParseFile = _xmlSAXUserParseFilePtr.asFunction<
      int Function(
          xmlSAXHandlerPtr, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>)>();

  int xmlSAXUserParseMemory(
    xmlSAXHandlerPtr sax,
    ffi.Pointer<ffi.Void> user_data,
    ffi.Pointer<ffi.Char> buffer,
    int size,
  ) {
    return _xmlSAXUserParseMemory(
      sax,
      user_data,
      buffer,
      size,
    );
  }

  late final _xmlSAXUserParseMemoryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(xmlSAXHandlerPtr, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('xmlSAXUserParseMemory');
  late final _xmlSAXUserParseMemory = _xmlSAXUserParseMemoryPtr.asFunction<
      int Function(xmlSAXHandlerPtr, ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Char>, int)>();

  xmlDocPtr xmlSAXParseDoc(
    xmlSAXHandlerPtr sax,
    ffi.Pointer<xmlChar> cur,
    int recovery,
  ) {
    return _xmlSAXParseDoc(
      sax,
      cur,
      recovery,
    );
  }

  late final _xmlSAXParseDocPtr = _lookup<
      ffi.NativeFunction<
          xmlDocPtr Function(xmlSAXHandlerPtr, ffi.Pointer<xmlChar>,
              ffi.Int)>>('xmlSAXParseDoc');
  late final _xmlSAXParseDoc = _xmlSAXParseDocPtr.asFunction<
      xmlDocPtr Function(xmlSAXHandlerPtr, ffi.Pointer<xmlChar>, int)>();

  xmlDocPtr xmlSAXParseMemory(
    xmlSAXHandlerPtr sax,
    ffi.Pointer<ffi.Char> buffer,
    int size,
    int recovery,
  ) {
    return _xmlSAXParseMemory(
      sax,
      buffer,
      size,
      recovery,
    );
  }

  late final _xmlSAXParseMemoryPtr = _lookup<
      ffi.NativeFunction<
          xmlDocPtr Function(xmlSAXHandlerPtr, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Int)>>('xmlSAXParseMemory');
  late final _xmlSAXParseMemory = _xmlSAXParseMemoryPtr.asFunction<
      xmlDocPtr Function(xmlSAXHandlerPtr, ffi.Pointer<ffi.Char>, int, int)>();

  xmlDocPtr xmlSAXParseMemoryWithData(
    xmlSAXHandlerPtr sax,
    ffi.Pointer<ffi.Char> buffer,
    int size,
    int recovery,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _xmlSAXParseMemoryWithData(
      sax,
      buffer,
      size,
      recovery,
      data,
    );
  }

  late final _xmlSAXParseMemoryWithDataPtr = _lookup<
      ffi.NativeFunction<
          xmlDocPtr Function(xmlSAXHandlerPtr, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Int, ffi.Pointer<ffi.Void>)>>('xmlSAXParseMemoryWithData');
  late final _xmlSAXParseMemoryWithData =
      _xmlSAXParseMemoryWithDataPtr.asFunction<
          xmlDocPtr Function(xmlSAXHandlerPtr, ffi.Pointer<ffi.Char>, int, int,
              ffi.Pointer<ffi.Void>)>();

  xmlDocPtr xmlSAXParseFile(
    xmlSAXHandlerPtr sax,
    ffi.Pointer<ffi.Char> filename,
    int recovery,
  ) {
    return _xmlSAXParseFile(
      sax,
      filename,
      recovery,
    );
  }

  late final _xmlSAXParseFilePtr = _lookup<
      ffi.NativeFunction<
          xmlDocPtr Function(xmlSAXHandlerPtr, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('xmlSAXParseFile');
  late final _xmlSAXParseFile = _xmlSAXParseFilePtr.asFunction<
      xmlDocPtr Function(xmlSAXHandlerPtr, ffi.Pointer<ffi.Char>, int)>();

  xmlDocPtr xmlSAXParseFileWithData(
    xmlSAXHandlerPtr sax,
    ffi.Pointer<ffi.Char> filename,
    int recovery,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _xmlSAXParseFileWithData(
      sax,
      filename,
      recovery,
      data,
    );
  }

  late final _xmlSAXParseFileWithDataPtr = _lookup<
      ffi.NativeFunction<
          xmlDocPtr Function(xmlSAXHandlerPtr, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Void>)>>('xmlSAXParseFileWithData');
  late final _xmlSAXParseFileWithData = _xmlSAXParseFileWithDataPtr.asFunction<
      xmlDocPtr Function(xmlSAXHandlerPtr, ffi.Pointer<ffi.Char>, int,
          ffi.Pointer<ffi.Void>)>();

  xmlDocPtr xmlSAXParseEntity(
    xmlSAXHandlerPtr sax,
    ffi.Pointer<ffi.Char> filename,
  ) {
    return _xmlSAXParseEntity(
      sax,
      filename,
    );
  }

  late final _xmlSAXParseEntityPtr = _lookup<
      ffi.NativeFunction<
          xmlDocPtr Function(
              xmlSAXHandlerPtr, ffi.Pointer<ffi.Char>)>>('xmlSAXParseEntity');
  late final _xmlSAXParseEntity = _xmlSAXParseEntityPtr.asFunction<
      xmlDocPtr Function(xmlSAXHandlerPtr, ffi.Pointer<ffi.Char>)>();

  xmlDocPtr xmlParseEntity(
    ffi.Pointer<ffi.Char> filename,
  ) {
    return _xmlParseEntity(
      filename,
    );
  }

  late final _xmlParseEntityPtr =
      _lookup<ffi.NativeFunction<xmlDocPtr Function(ffi.Pointer<ffi.Char>)>>(
          'xmlParseEntity');
  late final _xmlParseEntity = _xmlParseEntityPtr
      .asFunction<xmlDocPtr Function(ffi.Pointer<ffi.Char>)>();

  xmlDtdPtr xmlSAXParseDTD(
    xmlSAXHandlerPtr sax,
    ffi.Pointer<xmlChar> ExternalID,
    ffi.Pointer<xmlChar> SystemID,
  ) {
    return _xmlSAXParseDTD(
      sax,
      ExternalID,
      SystemID,
    );
  }

  late final _xmlSAXParseDTDPtr = _lookup<
      ffi.NativeFunction<
          xmlDtdPtr Function(xmlSAXHandlerPtr, ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>)>>('xmlSAXParseDTD');
  late final _xmlSAXParseDTD = _xmlSAXParseDTDPtr.asFunction<
      xmlDtdPtr Function(
          xmlSAXHandlerPtr, ffi.Pointer<xmlChar>, ffi.Pointer<xmlChar>)>();

  xmlDtdPtr xmlParseDTD(
    ffi.Pointer<xmlChar> ExternalID,
    ffi.Pointer<xmlChar> SystemID,
  ) {
    return _xmlParseDTD(
      ExternalID,
      SystemID,
    );
  }

  late final _xmlParseDTDPtr = _lookup<
      ffi.NativeFunction<
          xmlDtdPtr Function(
              ffi.Pointer<xmlChar>, ffi.Pointer<xmlChar>)>>('xmlParseDTD');
  late final _xmlParseDTD = _xmlParseDTDPtr.asFunction<
      xmlDtdPtr Function(ffi.Pointer<xmlChar>, ffi.Pointer<xmlChar>)>();

  xmlDtdPtr xmlIOParseDTD(
    xmlSAXHandlerPtr sax,
    xmlParserInputBufferPtr input,
    int enc,
  ) {
    return _xmlIOParseDTD(
      sax,
      input,
      enc,
    );
  }

  late final _xmlIOParseDTDPtr = _lookup<
      ffi.NativeFunction<
          xmlDtdPtr Function(xmlSAXHandlerPtr, xmlParserInputBufferPtr,
              ffi.Int32)>>('xmlIOParseDTD');
  late final _xmlIOParseDTD = _xmlIOParseDTDPtr.asFunction<
      xmlDtdPtr Function(xmlSAXHandlerPtr, xmlParserInputBufferPtr, int)>();

  int xmlParseBalancedChunkMemory(
    xmlDocPtr doc,
    xmlSAXHandlerPtr sax,
    ffi.Pointer<ffi.Void> user_data,
    int depth,
    ffi.Pointer<xmlChar> string,
    ffi.Pointer<xmlNodePtr> lst,
  ) {
    return _xmlParseBalancedChunkMemory(
      doc,
      sax,
      user_data,
      depth,
      string,
      lst,
    );
  }

  late final _xmlParseBalancedChunkMemoryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              xmlDocPtr,
              xmlSAXHandlerPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Int,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlNodePtr>)>>('xmlParseBalancedChunkMemory');
  late final _xmlParseBalancedChunkMemory =
      _xmlParseBalancedChunkMemoryPtr.asFunction<
          int Function(xmlDocPtr, xmlSAXHandlerPtr, ffi.Pointer<ffi.Void>, int,
              ffi.Pointer<xmlChar>, ffi.Pointer<xmlNodePtr>)>();

  int xmlParseInNodeContext(
    xmlNodePtr node,
    ffi.Pointer<ffi.Char> data,
    int datalen,
    int options,
    ffi.Pointer<xmlNodePtr> lst,
  ) {
    return _xmlParseInNodeContext(
      node,
      data,
      datalen,
      options,
      lst,
    );
  }

  late final _xmlParseInNodeContextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(xmlNodePtr, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Int, ffi.Pointer<xmlNodePtr>)>>('xmlParseInNodeContext');
  late final _xmlParseInNodeContext = _xmlParseInNodeContextPtr.asFunction<
      int Function(xmlNodePtr, ffi.Pointer<ffi.Char>, int, int,
          ffi.Pointer<xmlNodePtr>)>();

  int xmlParseBalancedChunkMemoryRecover(
    xmlDocPtr doc,
    xmlSAXHandlerPtr sax,
    ffi.Pointer<ffi.Void> user_data,
    int depth,
    ffi.Pointer<xmlChar> string,
    ffi.Pointer<xmlNodePtr> lst,
    int recover,
  ) {
    return _xmlParseBalancedChunkMemoryRecover(
      doc,
      sax,
      user_data,
      depth,
      string,
      lst,
      recover,
    );
  }

  late final _xmlParseBalancedChunkMemoryRecoverPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              xmlDocPtr,
              xmlSAXHandlerPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Int,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlNodePtr>,
              ffi.Int)>>('xmlParseBalancedChunkMemoryRecover');
  late final _xmlParseBalancedChunkMemoryRecover =
      _xmlParseBalancedChunkMemoryRecoverPtr.asFunction<
          int Function(xmlDocPtr, xmlSAXHandlerPtr, ffi.Pointer<ffi.Void>, int,
              ffi.Pointer<xmlChar>, ffi.Pointer<xmlNodePtr>, int)>();

  int xmlParseExternalEntity(
    xmlDocPtr doc,
    xmlSAXHandlerPtr sax,
    ffi.Pointer<ffi.Void> user_data,
    int depth,
    ffi.Pointer<xmlChar> URL,
    ffi.Pointer<xmlChar> ID,
    ffi.Pointer<xmlNodePtr> lst,
  ) {
    return _xmlParseExternalEntity(
      doc,
      sax,
      user_data,
      depth,
      URL,
      ID,
      lst,
    );
  }

  late final _xmlParseExternalEntityPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              xmlDocPtr,
              xmlSAXHandlerPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Int,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlNodePtr>)>>('xmlParseExternalEntity');
  late final _xmlParseExternalEntity = _xmlParseExternalEntityPtr.asFunction<
      int Function(
          xmlDocPtr,
          xmlSAXHandlerPtr,
          ffi.Pointer<ffi.Void>,
          int,
          ffi.Pointer<xmlChar>,
          ffi.Pointer<xmlChar>,
          ffi.Pointer<xmlNodePtr>)>();

  int xmlParseCtxtExternalEntity(
    xmlParserCtxtPtr ctx,
    ffi.Pointer<xmlChar> URL,
    ffi.Pointer<xmlChar> ID,
    ffi.Pointer<xmlNodePtr> lst,
  ) {
    return _xmlParseCtxtExternalEntity(
      ctx,
      URL,
      ID,
      lst,
    );
  }

  late final _xmlParseCtxtExternalEntityPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              xmlParserCtxtPtr,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlNodePtr>)>>('xmlParseCtxtExternalEntity');
  late final _xmlParseCtxtExternalEntity =
      _xmlParseCtxtExternalEntityPtr.asFunction<
          int Function(xmlParserCtxtPtr, ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>, ffi.Pointer<xmlNodePtr>)>();

  xmlParserCtxtPtr xmlNewParserCtxt() {
    return _xmlNewParserCtxt();
  }

  late final _xmlNewParserCtxtPtr =
      _lookup<ffi.NativeFunction<xmlParserCtxtPtr Function()>>(
          'xmlNewParserCtxt');
  late final _xmlNewParserCtxt =
      _xmlNewParserCtxtPtr.asFunction<xmlParserCtxtPtr Function()>();

  int xmlInitParserCtxt(
    xmlParserCtxtPtr ctxt,
  ) {
    return _xmlInitParserCtxt(
      ctxt,
    );
  }

  late final _xmlInitParserCtxtPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(xmlParserCtxtPtr)>>(
          'xmlInitParserCtxt');
  late final _xmlInitParserCtxt =
      _xmlInitParserCtxtPtr.asFunction<int Function(xmlParserCtxtPtr)>();

  void xmlClearParserCtxt(
    xmlParserCtxtPtr ctxt,
  ) {
    return _xmlClearParserCtxt(
      ctxt,
    );
  }

  late final _xmlClearParserCtxtPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(xmlParserCtxtPtr)>>(
          'xmlClearParserCtxt');
  late final _xmlClearParserCtxt =
      _xmlClearParserCtxtPtr.asFunction<void Function(xmlParserCtxtPtr)>();

  void xmlFreeParserCtxt(
    xmlParserCtxtPtr ctxt,
  ) {
    return _xmlFreeParserCtxt(
      ctxt,
    );
  }

  late final _xmlFreeParserCtxtPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(xmlParserCtxtPtr)>>(
          'xmlFreeParserCtxt');
  late final _xmlFreeParserCtxt =
      _xmlFreeParserCtxtPtr.asFunction<void Function(xmlParserCtxtPtr)>();

  void xmlSetupParserForBuffer(
    xmlParserCtxtPtr ctxt,
    ffi.Pointer<xmlChar> buffer,
    ffi.Pointer<ffi.Char> filename,
  ) {
    return _xmlSetupParserForBuffer(
      ctxt,
      buffer,
      filename,
    );
  }

  late final _xmlSetupParserForBufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(xmlParserCtxtPtr, ffi.Pointer<xmlChar>,
              ffi.Pointer<ffi.Char>)>>('xmlSetupParserForBuffer');
  late final _xmlSetupParserForBuffer = _xmlSetupParserForBufferPtr.asFunction<
      void Function(
          xmlParserCtxtPtr, ffi.Pointer<xmlChar>, ffi.Pointer<ffi.Char>)>();

  xmlParserCtxtPtr xmlCreateDocParserCtxt(
    ffi.Pointer<xmlChar> cur,
  ) {
    return _xmlCreateDocParserCtxt(
      cur,
    );
  }

  late final _xmlCreateDocParserCtxtPtr = _lookup<
          ffi.NativeFunction<xmlParserCtxtPtr Function(ffi.Pointer<xmlChar>)>>(
      'xmlCreateDocParserCtxt');
  late final _xmlCreateDocParserCtxt = _xmlCreateDocParserCtxtPtr
      .asFunction<xmlParserCtxtPtr Function(ffi.Pointer<xmlChar>)>();

  int xmlGetFeaturesList(
    ffi.Pointer<ffi.Int> len,
    ffi.Pointer<ffi.Pointer<ffi.Char>> result,
  ) {
    return _xmlGetFeaturesList(
      len,
      result,
    );
  }

  late final _xmlGetFeaturesListPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('xmlGetFeaturesList');
  late final _xmlGetFeaturesList = _xmlGetFeaturesListPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int xmlGetFeature(
    xmlParserCtxtPtr ctxt,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Void> result,
  ) {
    return _xmlGetFeature(
      ctxt,
      name,
      result,
    );
  }

  late final _xmlGetFeaturePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(xmlParserCtxtPtr, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>)>>('xmlGetFeature');
  late final _xmlGetFeature = _xmlGetFeaturePtr.asFunction<
      int Function(
          xmlParserCtxtPtr, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>)>();

  int xmlSetFeature(
    xmlParserCtxtPtr ctxt,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _xmlSetFeature(
      ctxt,
      name,
      value,
    );
  }

  late final _xmlSetFeaturePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(xmlParserCtxtPtr, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>)>>('xmlSetFeature');
  late final _xmlSetFeature = _xmlSetFeaturePtr.asFunction<
      int Function(
          xmlParserCtxtPtr, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>)>();

  xmlParserCtxtPtr xmlCreatePushParserCtxt(
    xmlSAXHandlerPtr sax,
    ffi.Pointer<ffi.Void> user_data,
    ffi.Pointer<ffi.Char> chunk,
    int size,
    ffi.Pointer<ffi.Char> filename,
  ) {
    return _xmlCreatePushParserCtxt(
      sax,
      user_data,
      chunk,
      size,
      filename,
    );
  }

  late final _xmlCreatePushParserCtxtPtr = _lookup<
      ffi.NativeFunction<
          xmlParserCtxtPtr Function(
              xmlSAXHandlerPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<ffi.Char>)>>('xmlCreatePushParserCtxt');
  late final _xmlCreatePushParserCtxt = _xmlCreatePushParserCtxtPtr.asFunction<
      xmlParserCtxtPtr Function(xmlSAXHandlerPtr, ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  int xmlParseChunk(
    xmlParserCtxtPtr ctxt,
    ffi.Pointer<ffi.Char> chunk,
    int size,
    int terminate,
  ) {
    return _xmlParseChunk(
      ctxt,
      chunk,
      size,
      terminate,
    );
  }

  late final _xmlParseChunkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(xmlParserCtxtPtr, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Int)>>('xmlParseChunk');
  late final _xmlParseChunk = _xmlParseChunkPtr.asFunction<
      int Function(xmlParserCtxtPtr, ffi.Pointer<ffi.Char>, int, int)>();

  xmlParserCtxtPtr xmlCreateIOParserCtxt(
    xmlSAXHandlerPtr sax,
    ffi.Pointer<ffi.Void> user_data,
    xmlInputReadCallback ioread,
    xmlInputCloseCallback ioclose,
    ffi.Pointer<ffi.Void> ioctx,
    int enc,
  ) {
    return _xmlCreateIOParserCtxt(
      sax,
      user_data,
      ioread,
      ioclose,
      ioctx,
      enc,
    );
  }

  late final _xmlCreateIOParserCtxtPtr = _lookup<
      ffi.NativeFunction<
          xmlParserCtxtPtr Function(
              xmlSAXHandlerPtr,
              ffi.Pointer<ffi.Void>,
              xmlInputReadCallback,
              xmlInputCloseCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Int32)>>('xmlCreateIOParserCtxt');
  late final _xmlCreateIOParserCtxt = _xmlCreateIOParserCtxtPtr.asFunction<
      xmlParserCtxtPtr Function(
          xmlSAXHandlerPtr,
          ffi.Pointer<ffi.Void>,
          xmlInputReadCallback,
          xmlInputCloseCallback,
          ffi.Pointer<ffi.Void>,
          int)>();

  xmlParserInputPtr xmlNewIOInputStream(
    xmlParserCtxtPtr ctxt,
    xmlParserInputBufferPtr input,
    int enc,
  ) {
    return _xmlNewIOInputStream(
      ctxt,
      input,
      enc,
    );
  }

  late final _xmlNewIOInputStreamPtr = _lookup<
      ffi.NativeFunction<
          xmlParserInputPtr Function(xmlParserCtxtPtr, xmlParserInputBufferPtr,
              ffi.Int32)>>('xmlNewIOInputStream');
  late final _xmlNewIOInputStream = _xmlNewIOInputStreamPtr.asFunction<
      xmlParserInputPtr Function(
          xmlParserCtxtPtr, xmlParserInputBufferPtr, int)>();

  ffi.Pointer<xmlParserNodeInfo> xmlParserFindNodeInfo(
    xmlParserCtxtPtr ctxt,
    xmlNodePtr node,
  ) {
    return _xmlParserFindNodeInfo(
      ctxt,
      node,
    );
  }

  late final _xmlParserFindNodeInfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<xmlParserNodeInfo> Function(
              xmlParserCtxtPtr, xmlNodePtr)>>('xmlParserFindNodeInfo');
  late final _xmlParserFindNodeInfo = _xmlParserFindNodeInfoPtr.asFunction<
      ffi.Pointer<xmlParserNodeInfo> Function(xmlParserCtxtPtr, xmlNodePtr)>();

  void xmlInitNodeInfoSeq(
    xmlParserNodeInfoSeqPtr seq,
  ) {
    return _xmlInitNodeInfoSeq(
      seq,
    );
  }

  late final _xmlInitNodeInfoSeqPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(xmlParserNodeInfoSeqPtr)>>(
          'xmlInitNodeInfoSeq');
  late final _xmlInitNodeInfoSeq = _xmlInitNodeInfoSeqPtr
      .asFunction<void Function(xmlParserNodeInfoSeqPtr)>();

  void xmlClearNodeInfoSeq(
    xmlParserNodeInfoSeqPtr seq,
  ) {
    return _xmlClearNodeInfoSeq(
      seq,
    );
  }

  late final _xmlClearNodeInfoSeqPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(xmlParserNodeInfoSeqPtr)>>(
          'xmlClearNodeInfoSeq');
  late final _xmlClearNodeInfoSeq = _xmlClearNodeInfoSeqPtr
      .asFunction<void Function(xmlParserNodeInfoSeqPtr)>();

  int xmlParserFindNodeInfoIndex(
    xmlParserNodeInfoSeqPtr seq,
    xmlNodePtr node,
  ) {
    return _xmlParserFindNodeInfoIndex(
      seq,
      node,
    );
  }

  late final _xmlParserFindNodeInfoIndexPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(xmlParserNodeInfoSeqPtr,
              xmlNodePtr)>>('xmlParserFindNodeInfoIndex');
  late final _xmlParserFindNodeInfoIndex = _xmlParserFindNodeInfoIndexPtr
      .asFunction<int Function(xmlParserNodeInfoSeqPtr, xmlNodePtr)>();

  void xmlParserAddNodeInfo(
    xmlParserCtxtPtr ctxt,
    xmlParserNodeInfoPtr info,
  ) {
    return _xmlParserAddNodeInfo(
      ctxt,
      info,
    );
  }

  late final _xmlParserAddNodeInfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              xmlParserCtxtPtr, xmlParserNodeInfoPtr)>>('xmlParserAddNodeInfo');
  late final _xmlParserAddNodeInfo = _xmlParserAddNodeInfoPtr
      .asFunction<void Function(xmlParserCtxtPtr, xmlParserNodeInfoPtr)>();

  void xmlSetExternalEntityLoader(
    xmlExternalEntityLoader f,
  ) {
    return _xmlSetExternalEntityLoader(
      f,
    );
  }

  late final _xmlSetExternalEntityLoaderPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(xmlExternalEntityLoader)>>(
          'xmlSetExternalEntityLoader');
  late final _xmlSetExternalEntityLoader = _xmlSetExternalEntityLoaderPtr
      .asFunction<void Function(xmlExternalEntityLoader)>();

  xmlExternalEntityLoader xmlGetExternalEntityLoader() {
    return _xmlGetExternalEntityLoader();
  }

  late final _xmlGetExternalEntityLoaderPtr =
      _lookup<ffi.NativeFunction<xmlExternalEntityLoader Function()>>(
          'xmlGetExternalEntityLoader');
  late final _xmlGetExternalEntityLoader = _xmlGetExternalEntityLoaderPtr
      .asFunction<xmlExternalEntityLoader Function()>();

  xmlParserInputPtr xmlLoadExternalEntity(
    ffi.Pointer<ffi.Char> URL,
    ffi.Pointer<ffi.Char> ID,
    xmlParserCtxtPtr ctxt,
  ) {
    return _xmlLoadExternalEntity(
      URL,
      ID,
      ctxt,
    );
  }

  late final _xmlLoadExternalEntityPtr = _lookup<
      ffi.NativeFunction<
          xmlParserInputPtr Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              xmlParserCtxtPtr)>>('xmlLoadExternalEntity');
  late final _xmlLoadExternalEntity = _xmlLoadExternalEntityPtr.asFunction<
      xmlParserInputPtr Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, xmlParserCtxtPtr)>();

  int xmlByteConsumed(
    xmlParserCtxtPtr ctxt,
  ) {
    return _xmlByteConsumed(
      ctxt,
    );
  }

  late final _xmlByteConsumedPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(xmlParserCtxtPtr)>>(
          'xmlByteConsumed');
  late final _xmlByteConsumed =
      _xmlByteConsumedPtr.asFunction<int Function(xmlParserCtxtPtr)>();

  void xmlCtxtReset(
    xmlParserCtxtPtr ctxt,
  ) {
    return _xmlCtxtReset(
      ctxt,
    );
  }

  late final _xmlCtxtResetPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(xmlParserCtxtPtr)>>(
          'xmlCtxtReset');
  late final _xmlCtxtReset =
      _xmlCtxtResetPtr.asFunction<void Function(xmlParserCtxtPtr)>();

  int xmlCtxtResetPush(
    xmlParserCtxtPtr ctxt,
    ffi.Pointer<ffi.Char> chunk,
    int size,
    ffi.Pointer<ffi.Char> filename,
    ffi.Pointer<ffi.Char> encoding,
  ) {
    return _xmlCtxtResetPush(
      ctxt,
      chunk,
      size,
      filename,
      encoding,
    );
  }

  late final _xmlCtxtResetPushPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              xmlParserCtxtPtr,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('xmlCtxtResetPush');
  late final _xmlCtxtResetPush = _xmlCtxtResetPushPtr.asFunction<
      int Function(xmlParserCtxtPtr, ffi.Pointer<ffi.Char>, int,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int xmlCtxtUseOptions(
    xmlParserCtxtPtr ctxt,
    int options,
  ) {
    return _xmlCtxtUseOptions(
      ctxt,
      options,
    );
  }

  late final _xmlCtxtUseOptionsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(xmlParserCtxtPtr, ffi.Int)>>(
          'xmlCtxtUseOptions');
  late final _xmlCtxtUseOptions =
      _xmlCtxtUseOptionsPtr.asFunction<int Function(xmlParserCtxtPtr, int)>();

  xmlDocPtr xmlReadDoc(
    ffi.Pointer<xmlChar> cur,
    ffi.Pointer<ffi.Char> URL,
    ffi.Pointer<ffi.Char> encoding,
    int options,
  ) {
    return _xmlReadDoc(
      cur,
      URL,
      encoding,
      options,
    );
  }

  late final _xmlReadDocPtr = _lookup<
      ffi.NativeFunction<
          xmlDocPtr Function(ffi.Pointer<xmlChar>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('xmlReadDoc');
  late final _xmlReadDoc = _xmlReadDocPtr.asFunction<
      xmlDocPtr Function(ffi.Pointer<xmlChar>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, int)>();

  xmlDocPtr xmlReadFile(
    ffi.Pointer<ffi.Char> URL,
    ffi.Pointer<ffi.Char> encoding,
    int options,
  ) {
    return _xmlReadFile(
      URL,
      encoding,
      options,
    );
  }

  late final _xmlReadFilePtr = _lookup<
      ffi.NativeFunction<
          xmlDocPtr Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('xmlReadFile');
  late final _xmlReadFile = _xmlReadFilePtr.asFunction<
      xmlDocPtr Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  xmlDocPtr xmlReadMemory(
    ffi.Pointer<ffi.Char> buffer,
    int size,
    ffi.Pointer<ffi.Char> URL,
    ffi.Pointer<ffi.Char> encoding,
    int options,
  ) {
    return _xmlReadMemory(
      buffer,
      size,
      URL,
      encoding,
      options,
    );
  }

  late final _xmlReadMemoryPtr = _lookup<
      ffi.NativeFunction<
          xmlDocPtr Function(
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Int)>>('xmlReadMemory');
  late final _xmlReadMemory = _xmlReadMemoryPtr.asFunction<
      xmlDocPtr Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, int)>();

  xmlDocPtr xmlReadFd(
    int fd,
    ffi.Pointer<ffi.Char> URL,
    ffi.Pointer<ffi.Char> encoding,
    int options,
  ) {
    return _xmlReadFd(
      fd,
      URL,
      encoding,
      options,
    );
  }

  late final _xmlReadFdPtr = _lookup<
      ffi.NativeFunction<
          xmlDocPtr Function(ffi.Int, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('xmlReadFd');
  late final _xmlReadFd = _xmlReadFdPtr.asFunction<
      xmlDocPtr Function(
          int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  xmlDocPtr xmlReadIO(
    xmlInputReadCallback ioread,
    xmlInputCloseCallback ioclose,
    ffi.Pointer<ffi.Void> ioctx,
    ffi.Pointer<ffi.Char> URL,
    ffi.Pointer<ffi.Char> encoding,
    int options,
  ) {
    return _xmlReadIO(
      ioread,
      ioclose,
      ioctx,
      URL,
      encoding,
      options,
    );
  }

  late final _xmlReadIOPtr = _lookup<
      ffi.NativeFunction<
          xmlDocPtr Function(
              xmlInputReadCallback,
              xmlInputCloseCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Int)>>('xmlReadIO');
  late final _xmlReadIO = _xmlReadIOPtr.asFunction<
      xmlDocPtr Function(
          xmlInputReadCallback,
          xmlInputCloseCallback,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          int)>();

  xmlDocPtr xmlCtxtReadDoc(
    xmlParserCtxtPtr ctxt,
    ffi.Pointer<xmlChar> cur,
    ffi.Pointer<ffi.Char> URL,
    ffi.Pointer<ffi.Char> encoding,
    int options,
  ) {
    return _xmlCtxtReadDoc(
      ctxt,
      cur,
      URL,
      encoding,
      options,
    );
  }

  late final _xmlCtxtReadDocPtr = _lookup<
      ffi.NativeFunction<
          xmlDocPtr Function(
              xmlParserCtxtPtr,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Int)>>('xmlCtxtReadDoc');
  late final _xmlCtxtReadDoc = _xmlCtxtReadDocPtr.asFunction<
      xmlDocPtr Function(xmlParserCtxtPtr, ffi.Pointer<xmlChar>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  xmlDocPtr xmlCtxtReadFile(
    xmlParserCtxtPtr ctxt,
    ffi.Pointer<ffi.Char> filename,
    ffi.Pointer<ffi.Char> encoding,
    int options,
  ) {
    return _xmlCtxtReadFile(
      ctxt,
      filename,
      encoding,
      options,
    );
  }

  late final _xmlCtxtReadFilePtr = _lookup<
      ffi.NativeFunction<
          xmlDocPtr Function(xmlParserCtxtPtr, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('xmlCtxtReadFile');
  late final _xmlCtxtReadFile = _xmlCtxtReadFilePtr.asFunction<
      xmlDocPtr Function(xmlParserCtxtPtr, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, int)>();

  xmlDocPtr xmlCtxtReadMemory(
    xmlParserCtxtPtr ctxt,
    ffi.Pointer<ffi.Char> buffer,
    int size,
    ffi.Pointer<ffi.Char> URL,
    ffi.Pointer<ffi.Char> encoding,
    int options,
  ) {
    return _xmlCtxtReadMemory(
      ctxt,
      buffer,
      size,
      URL,
      encoding,
      options,
    );
  }

  late final _xmlCtxtReadMemoryPtr = _lookup<
      ffi.NativeFunction<
          xmlDocPtr Function(
              xmlParserCtxtPtr,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Int)>>('xmlCtxtReadMemory');
  late final _xmlCtxtReadMemory = _xmlCtxtReadMemoryPtr.asFunction<
      xmlDocPtr Function(xmlParserCtxtPtr, ffi.Pointer<ffi.Char>, int,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  xmlDocPtr xmlCtxtReadFd(
    xmlParserCtxtPtr ctxt,
    int fd,
    ffi.Pointer<ffi.Char> URL,
    ffi.Pointer<ffi.Char> encoding,
    int options,
  ) {
    return _xmlCtxtReadFd(
      ctxt,
      fd,
      URL,
      encoding,
      options,
    );
  }

  late final _xmlCtxtReadFdPtr = _lookup<
      ffi.NativeFunction<
          xmlDocPtr Function(xmlParserCtxtPtr, ffi.Int, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('xmlCtxtReadFd');
  late final _xmlCtxtReadFd = _xmlCtxtReadFdPtr.asFunction<
      xmlDocPtr Function(xmlParserCtxtPtr, int, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, int)>();

  xmlDocPtr xmlCtxtReadIO(
    xmlParserCtxtPtr ctxt,
    xmlInputReadCallback ioread,
    xmlInputCloseCallback ioclose,
    ffi.Pointer<ffi.Void> ioctx,
    ffi.Pointer<ffi.Char> URL,
    ffi.Pointer<ffi.Char> encoding,
    int options,
  ) {
    return _xmlCtxtReadIO(
      ctxt,
      ioread,
      ioclose,
      ioctx,
      URL,
      encoding,
      options,
    );
  }

  late final _xmlCtxtReadIOPtr = _lookup<
      ffi.NativeFunction<
          xmlDocPtr Function(
              xmlParserCtxtPtr,
              xmlInputReadCallback,
              xmlInputCloseCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Int)>>('xmlCtxtReadIO');
  late final _xmlCtxtReadIO = _xmlCtxtReadIOPtr.asFunction<
      xmlDocPtr Function(
          xmlParserCtxtPtr,
          xmlInputReadCallback,
          xmlInputCloseCallback,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          int)>();

  int xmlHasFeature(
    int feature,
  ) {
    return _xmlHasFeature(
      feature,
    );
  }

  late final _xmlHasFeaturePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int32)>>('xmlHasFeature');
  late final _xmlHasFeature = _xmlHasFeaturePtr.asFunction<int Function(int)>();

  xlinkNodeDetectFunc xlinkGetDefaultDetect() {
    return _xlinkGetDefaultDetect();
  }

  late final _xlinkGetDefaultDetectPtr =
      _lookup<ffi.NativeFunction<xlinkNodeDetectFunc Function()>>(
          'xlinkGetDefaultDetect');
  late final _xlinkGetDefaultDetect =
      _xlinkGetDefaultDetectPtr.asFunction<xlinkNodeDetectFunc Function()>();

  void xlinkSetDefaultDetect(
    xlinkNodeDetectFunc func,
  ) {
    return _xlinkSetDefaultDetect(
      func,
    );
  }

  late final _xlinkSetDefaultDetectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(xlinkNodeDetectFunc)>>(
          'xlinkSetDefaultDetect');
  late final _xlinkSetDefaultDetect = _xlinkSetDefaultDetectPtr
      .asFunction<void Function(xlinkNodeDetectFunc)>();

  xlinkHandlerPtr xlinkGetDefaultHandler() {
    return _xlinkGetDefaultHandler();
  }

  late final _xlinkGetDefaultHandlerPtr =
      _lookup<ffi.NativeFunction<xlinkHandlerPtr Function()>>(
          'xlinkGetDefaultHandler');
  late final _xlinkGetDefaultHandler =
      _xlinkGetDefaultHandlerPtr.asFunction<xlinkHandlerPtr Function()>();

  void xlinkSetDefaultHandler(
    xlinkHandlerPtr handler,
  ) {
    return _xlinkSetDefaultHandler(
      handler,
    );
  }

  late final _xlinkSetDefaultHandlerPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(xlinkHandlerPtr)>>(
          'xlinkSetDefaultHandler');
  late final _xlinkSetDefaultHandler =
      _xlinkSetDefaultHandlerPtr.asFunction<void Function(xlinkHandlerPtr)>();

  int xlinkIsLink(
    xmlDocPtr doc,
    xmlNodePtr node,
  ) {
    return _xlinkIsLink(
      doc,
      node,
    );
  }

  late final _xlinkIsLinkPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(xmlDocPtr, xmlNodePtr)>>(
          'xlinkIsLink');
  late final _xlinkIsLink =
      _xlinkIsLinkPtr.asFunction<int Function(xmlDocPtr, xmlNodePtr)>();

  ffi.Pointer<xmlChar> xmlSAX2GetPublicId(
    ffi.Pointer<ffi.Void> ctx,
  ) {
    return _xmlSAX2GetPublicId(
      ctx,
    );
  }

  late final _xmlSAX2GetPublicIdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<xmlChar> Function(
              ffi.Pointer<ffi.Void>)>>('xmlSAX2GetPublicId');
  late final _xmlSAX2GetPublicId = _xmlSAX2GetPublicIdPtr
      .asFunction<ffi.Pointer<xmlChar> Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<xmlChar> xmlSAX2GetSystemId(
    ffi.Pointer<ffi.Void> ctx,
  ) {
    return _xmlSAX2GetSystemId(
      ctx,
    );
  }

  late final _xmlSAX2GetSystemIdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<xmlChar> Function(
              ffi.Pointer<ffi.Void>)>>('xmlSAX2GetSystemId');
  late final _xmlSAX2GetSystemId = _xmlSAX2GetSystemIdPtr
      .asFunction<ffi.Pointer<xmlChar> Function(ffi.Pointer<ffi.Void>)>();

  void xmlSAX2SetDocumentLocator(
    ffi.Pointer<ffi.Void> ctx,
    xmlSAXLocatorPtr loc,
  ) {
    return _xmlSAX2SetDocumentLocator(
      ctx,
      loc,
    );
  }

  late final _xmlSAX2SetDocumentLocatorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>,
              xmlSAXLocatorPtr)>>('xmlSAX2SetDocumentLocator');
  late final _xmlSAX2SetDocumentLocator = _xmlSAX2SetDocumentLocatorPtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>, xmlSAXLocatorPtr)>();

  int xmlSAX2GetLineNumber(
    ffi.Pointer<ffi.Void> ctx,
  ) {
    return _xmlSAX2GetLineNumber(
      ctx,
    );
  }

  late final _xmlSAX2GetLineNumberPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>(
          'xmlSAX2GetLineNumber');
  late final _xmlSAX2GetLineNumber = _xmlSAX2GetLineNumberPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  int xmlSAX2GetColumnNumber(
    ffi.Pointer<ffi.Void> ctx,
  ) {
    return _xmlSAX2GetColumnNumber(
      ctx,
    );
  }

  late final _xmlSAX2GetColumnNumberPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>(
          'xmlSAX2GetColumnNumber');
  late final _xmlSAX2GetColumnNumber = _xmlSAX2GetColumnNumberPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  int xmlSAX2IsStandalone(
    ffi.Pointer<ffi.Void> ctx,
  ) {
    return _xmlSAX2IsStandalone(
      ctx,
    );
  }

  late final _xmlSAX2IsStandalonePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>(
          'xmlSAX2IsStandalone');
  late final _xmlSAX2IsStandalone =
      _xmlSAX2IsStandalonePtr.asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  int xmlSAX2HasInternalSubset(
    ffi.Pointer<ffi.Void> ctx,
  ) {
    return _xmlSAX2HasInternalSubset(
      ctx,
    );
  }

  late final _xmlSAX2HasInternalSubsetPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>(
          'xmlSAX2HasInternalSubset');
  late final _xmlSAX2HasInternalSubset = _xmlSAX2HasInternalSubsetPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  int xmlSAX2HasExternalSubset(
    ffi.Pointer<ffi.Void> ctx,
  ) {
    return _xmlSAX2HasExternalSubset(
      ctx,
    );
  }

  late final _xmlSAX2HasExternalSubsetPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>(
          'xmlSAX2HasExternalSubset');
  late final _xmlSAX2HasExternalSubset = _xmlSAX2HasExternalSubsetPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  void xmlSAX2InternalSubset(
    ffi.Pointer<ffi.Void> ctx,
    ffi.Pointer<xmlChar> name,
    ffi.Pointer<xmlChar> ExternalID,
    ffi.Pointer<xmlChar> SystemID,
  ) {
    return _xmlSAX2InternalSubset(
      ctx,
      name,
      ExternalID,
      SystemID,
    );
  }

  late final _xmlSAX2InternalSubsetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>)>>('xmlSAX2InternalSubset');
  late final _xmlSAX2InternalSubset = _xmlSAX2InternalSubsetPtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<xmlChar>,
          ffi.Pointer<xmlChar>, ffi.Pointer<xmlChar>)>();

  void xmlSAX2ExternalSubset(
    ffi.Pointer<ffi.Void> ctx,
    ffi.Pointer<xmlChar> name,
    ffi.Pointer<xmlChar> ExternalID,
    ffi.Pointer<xmlChar> SystemID,
  ) {
    return _xmlSAX2ExternalSubset(
      ctx,
      name,
      ExternalID,
      SystemID,
    );
  }

  late final _xmlSAX2ExternalSubsetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>)>>('xmlSAX2ExternalSubset');
  late final _xmlSAX2ExternalSubset = _xmlSAX2ExternalSubsetPtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<xmlChar>,
          ffi.Pointer<xmlChar>, ffi.Pointer<xmlChar>)>();

  xmlEntityPtr xmlSAX2GetEntity(
    ffi.Pointer<ffi.Void> ctx,
    ffi.Pointer<xmlChar> name,
  ) {
    return _xmlSAX2GetEntity(
      ctx,
      name,
    );
  }

  late final _xmlSAX2GetEntityPtr = _lookup<
      ffi.NativeFunction<
          xmlEntityPtr Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<xmlChar>)>>('xmlSAX2GetEntity');
  late final _xmlSAX2GetEntity = _xmlSAX2GetEntityPtr.asFunction<
      xmlEntityPtr Function(ffi.Pointer<ffi.Void>, ffi.Pointer<xmlChar>)>();

  xmlEntityPtr xmlSAX2GetParameterEntity(
    ffi.Pointer<ffi.Void> ctx,
    ffi.Pointer<xmlChar> name,
  ) {
    return _xmlSAX2GetParameterEntity(
      ctx,
      name,
    );
  }

  late final _xmlSAX2GetParameterEntityPtr = _lookup<
      ffi.NativeFunction<
          xmlEntityPtr Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<xmlChar>)>>('xmlSAX2GetParameterEntity');
  late final _xmlSAX2GetParameterEntity =
      _xmlSAX2GetParameterEntityPtr.asFunction<
          xmlEntityPtr Function(ffi.Pointer<ffi.Void>, ffi.Pointer<xmlChar>)>();

  xmlParserInputPtr xmlSAX2ResolveEntity(
    ffi.Pointer<ffi.Void> ctx,
    ffi.Pointer<xmlChar> publicId,
    ffi.Pointer<xmlChar> systemId,
  ) {
    return _xmlSAX2ResolveEntity(
      ctx,
      publicId,
      systemId,
    );
  }

  late final _xmlSAX2ResolveEntityPtr = _lookup<
      ffi.NativeFunction<
          xmlParserInputPtr Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>)>>('xmlSAX2ResolveEntity');
  late final _xmlSAX2ResolveEntity = _xmlSAX2ResolveEntityPtr.asFunction<
      xmlParserInputPtr Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<xmlChar>, ffi.Pointer<xmlChar>)>();

  void xmlSAX2EntityDecl(
    ffi.Pointer<ffi.Void> ctx,
    ffi.Pointer<xmlChar> name,
    int type,
    ffi.Pointer<xmlChar> publicId,
    ffi.Pointer<xmlChar> systemId,
    ffi.Pointer<xmlChar> content,
  ) {
    return _xmlSAX2EntityDecl(
      ctx,
      name,
      type,
      publicId,
      systemId,
      content,
    );
  }

  late final _xmlSAX2EntityDeclPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<xmlChar>,
              ffi.Int,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>)>>('xmlSAX2EntityDecl');
  late final _xmlSAX2EntityDecl = _xmlSAX2EntityDeclPtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<xmlChar>, int,
          ffi.Pointer<xmlChar>, ffi.Pointer<xmlChar>, ffi.Pointer<xmlChar>)>();

  void xmlSAX2AttributeDecl(
    ffi.Pointer<ffi.Void> ctx,
    ffi.Pointer<xmlChar> elem,
    ffi.Pointer<xmlChar> fullname,
    int type,
    int def,
    ffi.Pointer<xmlChar> defaultValue,
    xmlEnumerationPtr tree,
  ) {
    return _xmlSAX2AttributeDecl(
      ctx,
      elem,
      fullname,
      type,
      def,
      defaultValue,
      tree,
    );
  }

  late final _xmlSAX2AttributeDeclPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<xmlChar>,
              xmlEnumerationPtr)>>('xmlSAX2AttributeDecl');
  late final _xmlSAX2AttributeDecl = _xmlSAX2AttributeDeclPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<xmlChar>,
          ffi.Pointer<xmlChar>,
          int,
          int,
          ffi.Pointer<xmlChar>,
          xmlEnumerationPtr)>();

  void xmlSAX2ElementDecl(
    ffi.Pointer<ffi.Void> ctx,
    ffi.Pointer<xmlChar> name,
    int type,
    xmlElementContentPtr content,
  ) {
    return _xmlSAX2ElementDecl(
      ctx,
      name,
      type,
      content,
    );
  }

  late final _xmlSAX2ElementDeclPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<xmlChar>,
              ffi.Int, xmlElementContentPtr)>>('xmlSAX2ElementDecl');
  late final _xmlSAX2ElementDecl = _xmlSAX2ElementDeclPtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<xmlChar>, int,
          xmlElementContentPtr)>();

  void xmlSAX2NotationDecl(
    ffi.Pointer<ffi.Void> ctx,
    ffi.Pointer<xmlChar> name,
    ffi.Pointer<xmlChar> publicId,
    ffi.Pointer<xmlChar> systemId,
  ) {
    return _xmlSAX2NotationDecl(
      ctx,
      name,
      publicId,
      systemId,
    );
  }

  late final _xmlSAX2NotationDeclPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>)>>('xmlSAX2NotationDecl');
  late final _xmlSAX2NotationDecl = _xmlSAX2NotationDeclPtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<xmlChar>,
          ffi.Pointer<xmlChar>, ffi.Pointer<xmlChar>)>();

  void xmlSAX2UnparsedEntityDecl(
    ffi.Pointer<ffi.Void> ctx,
    ffi.Pointer<xmlChar> name,
    ffi.Pointer<xmlChar> publicId,
    ffi.Pointer<xmlChar> systemId,
    ffi.Pointer<xmlChar> notationName,
  ) {
    return _xmlSAX2UnparsedEntityDecl(
      ctx,
      name,
      publicId,
      systemId,
      notationName,
    );
  }

  late final _xmlSAX2UnparsedEntityDeclPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>)>>('xmlSAX2UnparsedEntityDecl');
  late final _xmlSAX2UnparsedEntityDecl =
      _xmlSAX2UnparsedEntityDeclPtr.asFunction<
          void Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>)>();

  void xmlSAX2StartDocument(
    ffi.Pointer<ffi.Void> ctx,
  ) {
    return _xmlSAX2StartDocument(
      ctx,
    );
  }

  late final _xmlSAX2StartDocumentPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'xmlSAX2StartDocument');
  late final _xmlSAX2StartDocument = _xmlSAX2StartDocumentPtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void xmlSAX2EndDocument(
    ffi.Pointer<ffi.Void> ctx,
  ) {
    return _xmlSAX2EndDocument(
      ctx,
    );
  }

  late final _xmlSAX2EndDocumentPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'xmlSAX2EndDocument');
  late final _xmlSAX2EndDocument =
      _xmlSAX2EndDocumentPtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void xmlSAX2StartElement(
    ffi.Pointer<ffi.Void> ctx,
    ffi.Pointer<xmlChar> fullname,
    ffi.Pointer<ffi.Pointer<xmlChar>> atts,
  ) {
    return _xmlSAX2StartElement(
      ctx,
      fullname,
      atts,
    );
  }

  late final _xmlSAX2StartElementPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<xmlChar>,
              ffi.Pointer<ffi.Pointer<xmlChar>>)>>('xmlSAX2StartElement');
  late final _xmlSAX2StartElement = _xmlSAX2StartElementPtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<xmlChar>,
          ffi.Pointer<ffi.Pointer<xmlChar>>)>();

  void xmlSAX2EndElement(
    ffi.Pointer<ffi.Void> ctx,
    ffi.Pointer<xmlChar> name,
  ) {
    return _xmlSAX2EndElement(
      ctx,
      name,
    );
  }

  late final _xmlSAX2EndElementPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<xmlChar>)>>('xmlSAX2EndElement');
  late final _xmlSAX2EndElement = _xmlSAX2EndElementPtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<xmlChar>)>();

  void xmlSAX2StartElementNs(
    ffi.Pointer<ffi.Void> ctx,
    ffi.Pointer<xmlChar> localname,
    ffi.Pointer<xmlChar> prefix,
    ffi.Pointer<xmlChar> URI,
    int nb_namespaces,
    ffi.Pointer<ffi.Pointer<xmlChar>> namespaces,
    int nb_attributes,
    int nb_defaulted,
    ffi.Pointer<ffi.Pointer<xmlChar>> attributes,
  ) {
    return _xmlSAX2StartElementNs(
      ctx,
      localname,
      prefix,
      URI,
      nb_namespaces,
      namespaces,
      nb_attributes,
      nb_defaulted,
      attributes,
    );
  }

  late final _xmlSAX2StartElementNsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>,
              ffi.Int,
              ffi.Pointer<ffi.Pointer<xmlChar>>,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Pointer<xmlChar>>)>>('xmlSAX2StartElementNs');
  late final _xmlSAX2StartElementNs = _xmlSAX2StartElementNsPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<xmlChar>,
          ffi.Pointer<xmlChar>,
          ffi.Pointer<xmlChar>,
          int,
          ffi.Pointer<ffi.Pointer<xmlChar>>,
          int,
          int,
          ffi.Pointer<ffi.Pointer<xmlChar>>)>();

  void xmlSAX2EndElementNs(
    ffi.Pointer<ffi.Void> ctx,
    ffi.Pointer<xmlChar> localname,
    ffi.Pointer<xmlChar> prefix,
    ffi.Pointer<xmlChar> URI,
  ) {
    return _xmlSAX2EndElementNs(
      ctx,
      localname,
      prefix,
      URI,
    );
  }

  late final _xmlSAX2EndElementNsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>)>>('xmlSAX2EndElementNs');
  late final _xmlSAX2EndElementNs = _xmlSAX2EndElementNsPtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<xmlChar>,
          ffi.Pointer<xmlChar>, ffi.Pointer<xmlChar>)>();

  void xmlSAX2Reference(
    ffi.Pointer<ffi.Void> ctx,
    ffi.Pointer<xmlChar> name,
  ) {
    return _xmlSAX2Reference(
      ctx,
      name,
    );
  }

  late final _xmlSAX2ReferencePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<xmlChar>)>>('xmlSAX2Reference');
  late final _xmlSAX2Reference = _xmlSAX2ReferencePtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<xmlChar>)>();

  void xmlSAX2Characters(
    ffi.Pointer<ffi.Void> ctx,
    ffi.Pointer<xmlChar> ch,
    int len,
  ) {
    return _xmlSAX2Characters(
      ctx,
      ch,
      len,
    );
  }

  late final _xmlSAX2CharactersPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<xmlChar>,
              ffi.Int)>>('xmlSAX2Characters');
  late final _xmlSAX2Characters = _xmlSAX2CharactersPtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<xmlChar>, int)>();

  void xmlSAX2IgnorableWhitespace(
    ffi.Pointer<ffi.Void> ctx,
    ffi.Pointer<xmlChar> ch,
    int len,
  ) {
    return _xmlSAX2IgnorableWhitespace(
      ctx,
      ch,
      len,
    );
  }

  late final _xmlSAX2IgnorableWhitespacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<xmlChar>,
              ffi.Int)>>('xmlSAX2IgnorableWhitespace');
  late final _xmlSAX2IgnorableWhitespace =
      _xmlSAX2IgnorableWhitespacePtr.asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<xmlChar>, int)>();

  void xmlSAX2ProcessingInstruction(
    ffi.Pointer<ffi.Void> ctx,
    ffi.Pointer<xmlChar> target,
    ffi.Pointer<xmlChar> data,
  ) {
    return _xmlSAX2ProcessingInstruction(
      ctx,
      target,
      data,
    );
  }

  late final _xmlSAX2ProcessingInstructionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>)>>('xmlSAX2ProcessingInstruction');
  late final _xmlSAX2ProcessingInstruction =
      _xmlSAX2ProcessingInstructionPtr.asFunction<
          void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>)>();

  void xmlSAX2Comment(
    ffi.Pointer<ffi.Void> ctx,
    ffi.Pointer<xmlChar> value,
  ) {
    return _xmlSAX2Comment(
      ctx,
      value,
    );
  }

  late final _xmlSAX2CommentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<xmlChar>)>>('xmlSAX2Comment');
  late final _xmlSAX2Comment = _xmlSAX2CommentPtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<xmlChar>)>();

  void xmlSAX2CDataBlock(
    ffi.Pointer<ffi.Void> ctx,
    ffi.Pointer<xmlChar> value,
    int len,
  ) {
    return _xmlSAX2CDataBlock(
      ctx,
      value,
      len,
    );
  }

  late final _xmlSAX2CDataBlockPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<xmlChar>,
              ffi.Int)>>('xmlSAX2CDataBlock');
  late final _xmlSAX2CDataBlock = _xmlSAX2CDataBlockPtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<xmlChar>, int)>();

  int xmlSAXDefaultVersion(
    int version,
  ) {
    return _xmlSAXDefaultVersion(
      version,
    );
  }

  late final _xmlSAXDefaultVersionPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'xmlSAXDefaultVersion');
  late final _xmlSAXDefaultVersion =
      _xmlSAXDefaultVersionPtr.asFunction<int Function(int)>();

  int xmlSAXVersion(
    ffi.Pointer<xmlSAXHandler> hdlr,
    int version,
  ) {
    return _xmlSAXVersion(
      hdlr,
      version,
    );
  }

  late final _xmlSAXVersionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<xmlSAXHandler>, ffi.Int)>>('xmlSAXVersion');
  late final _xmlSAXVersion = _xmlSAXVersionPtr
      .asFunction<int Function(ffi.Pointer<xmlSAXHandler>, int)>();

  void xmlSAX2InitDefaultSAXHandler(
    ffi.Pointer<xmlSAXHandler> hdlr,
    int warning,
  ) {
    return _xmlSAX2InitDefaultSAXHandler(
      hdlr,
      warning,
    );
  }

  late final _xmlSAX2InitDefaultSAXHandlerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<xmlSAXHandler>,
              ffi.Int)>>('xmlSAX2InitDefaultSAXHandler');
  late final _xmlSAX2InitDefaultSAXHandler = _xmlSAX2InitDefaultSAXHandlerPtr
      .asFunction<void Function(ffi.Pointer<xmlSAXHandler>, int)>();

  void xmlSAX2InitHtmlDefaultSAXHandler(
    ffi.Pointer<xmlSAXHandler> hdlr,
  ) {
    return _xmlSAX2InitHtmlDefaultSAXHandler(
      hdlr,
    );
  }

  late final _xmlSAX2InitHtmlDefaultSAXHandlerPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<xmlSAXHandler>)>>(
      'xmlSAX2InitHtmlDefaultSAXHandler');
  late final _xmlSAX2InitHtmlDefaultSAXHandler =
      _xmlSAX2InitHtmlDefaultSAXHandlerPtr
          .asFunction<void Function(ffi.Pointer<xmlSAXHandler>)>();

  void htmlDefaultSAXHandlerInit() {
    return _htmlDefaultSAXHandlerInit();
  }

  late final _htmlDefaultSAXHandlerInitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'htmlDefaultSAXHandlerInit');
  late final _htmlDefaultSAXHandlerInit =
      _htmlDefaultSAXHandlerInitPtr.asFunction<void Function()>();

  void xmlSAX2InitDocbDefaultSAXHandler(
    ffi.Pointer<xmlSAXHandler> hdlr,
  ) {
    return _xmlSAX2InitDocbDefaultSAXHandler(
      hdlr,
    );
  }

  late final _xmlSAX2InitDocbDefaultSAXHandlerPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<xmlSAXHandler>)>>(
      'xmlSAX2InitDocbDefaultSAXHandler');
  late final _xmlSAX2InitDocbDefaultSAXHandler =
      _xmlSAX2InitDocbDefaultSAXHandlerPtr
          .asFunction<void Function(ffi.Pointer<xmlSAXHandler>)>();

  void docbDefaultSAXHandlerInit() {
    return _docbDefaultSAXHandlerInit();
  }

  late final _docbDefaultSAXHandlerInitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'docbDefaultSAXHandlerInit');
  late final _docbDefaultSAXHandlerInit =
      _docbDefaultSAXHandlerInitPtr.asFunction<void Function()>();

  void xmlDefaultSAXHandlerInit() {
    return _xmlDefaultSAXHandlerInit();
  }

  late final _xmlDefaultSAXHandlerInitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'xmlDefaultSAXHandlerInit');
  late final _xmlDefaultSAXHandlerInit =
      _xmlDefaultSAXHandlerInitPtr.asFunction<void Function()>();

  void xmlInitGlobals() {
    return _xmlInitGlobals();
  }

  late final _xmlInitGlobalsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('xmlInitGlobals');
  late final _xmlInitGlobals = _xmlInitGlobalsPtr.asFunction<void Function()>();

  void xmlCleanupGlobals() {
    return _xmlCleanupGlobals();
  }

  late final _xmlCleanupGlobalsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('xmlCleanupGlobals');
  late final _xmlCleanupGlobals =
      _xmlCleanupGlobalsPtr.asFunction<void Function()>();

  xmlParserInputBufferCreateFilenameFunc
      xmlParserInputBufferCreateFilenameDefault(
    xmlParserInputBufferCreateFilenameFunc func,
  ) {
    return _xmlParserInputBufferCreateFilenameDefault(
      func,
    );
  }

  late final _xmlParserInputBufferCreateFilenameDefaultPtr = _lookup<
          ffi.NativeFunction<
              xmlParserInputBufferCreateFilenameFunc Function(
                  xmlParserInputBufferCreateFilenameFunc)>>(
      'xmlParserInputBufferCreateFilenameDefault');
  late final _xmlParserInputBufferCreateFilenameDefault =
      _xmlParserInputBufferCreateFilenameDefaultPtr.asFunction<
          xmlParserInputBufferCreateFilenameFunc Function(
              xmlParserInputBufferCreateFilenameFunc)>();

  xmlOutputBufferCreateFilenameFunc xmlOutputBufferCreateFilenameDefault(
    xmlOutputBufferCreateFilenameFunc func,
  ) {
    return _xmlOutputBufferCreateFilenameDefault(
      func,
    );
  }

  late final _xmlOutputBufferCreateFilenameDefaultPtr = _lookup<
          ffi.NativeFunction<
              xmlOutputBufferCreateFilenameFunc Function(
                  xmlOutputBufferCreateFilenameFunc)>>(
      'xmlOutputBufferCreateFilenameDefault');
  late final _xmlOutputBufferCreateFilenameDefault =
      _xmlOutputBufferCreateFilenameDefaultPtr.asFunction<
          xmlOutputBufferCreateFilenameFunc Function(
              xmlOutputBufferCreateFilenameFunc)>();

  void xmlInitializeGlobalState(
    xmlGlobalStatePtr gs,
  ) {
    return _xmlInitializeGlobalState(
      gs,
    );
  }

  late final _xmlInitializeGlobalStatePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(xmlGlobalStatePtr)>>(
          'xmlInitializeGlobalState');
  late final _xmlInitializeGlobalState = _xmlInitializeGlobalStatePtr
      .asFunction<void Function(xmlGlobalStatePtr)>();

  void xmlThrDefSetGenericErrorFunc(
    ffi.Pointer<ffi.Void> ctx,
    xmlGenericErrorFunc handler,
  ) {
    return _xmlThrDefSetGenericErrorFunc(
      ctx,
      handler,
    );
  }

  late final _xmlThrDefSetGenericErrorFuncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>,
              xmlGenericErrorFunc)>>('xmlThrDefSetGenericErrorFunc');
  late final _xmlThrDefSetGenericErrorFunc = _xmlThrDefSetGenericErrorFuncPtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>, xmlGenericErrorFunc)>();

  void xmlThrDefSetStructuredErrorFunc(
    ffi.Pointer<ffi.Void> ctx,
    xmlStructuredErrorFunc handler,
  ) {
    return _xmlThrDefSetStructuredErrorFunc(
      ctx,
      handler,
    );
  }

  late final _xmlThrDefSetStructuredErrorFuncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>,
              xmlStructuredErrorFunc)>>('xmlThrDefSetStructuredErrorFunc');
  late final _xmlThrDefSetStructuredErrorFunc =
      _xmlThrDefSetStructuredErrorFuncPtr.asFunction<
          void Function(ffi.Pointer<ffi.Void>, xmlStructuredErrorFunc)>();

  xmlRegisterNodeFunc xmlRegisterNodeDefault(
    xmlRegisterNodeFunc func,
  ) {
    return _xmlRegisterNodeDefault(
      func,
    );
  }

  late final _xmlRegisterNodeDefaultPtr = _lookup<
          ffi
          .NativeFunction<xmlRegisterNodeFunc Function(xmlRegisterNodeFunc)>>(
      'xmlRegisterNodeDefault');
  late final _xmlRegisterNodeDefault = _xmlRegisterNodeDefaultPtr
      .asFunction<xmlRegisterNodeFunc Function(xmlRegisterNodeFunc)>();

  xmlRegisterNodeFunc xmlThrDefRegisterNodeDefault(
    xmlRegisterNodeFunc func,
  ) {
    return _xmlThrDefRegisterNodeDefault(
      func,
    );
  }

  late final _xmlThrDefRegisterNodeDefaultPtr = _lookup<
          ffi
          .NativeFunction<xmlRegisterNodeFunc Function(xmlRegisterNodeFunc)>>(
      'xmlThrDefRegisterNodeDefault');
  late final _xmlThrDefRegisterNodeDefault = _xmlThrDefRegisterNodeDefaultPtr
      .asFunction<xmlRegisterNodeFunc Function(xmlRegisterNodeFunc)>();

  xmlDeregisterNodeFunc xmlDeregisterNodeDefault(
    xmlDeregisterNodeFunc func,
  ) {
    return _xmlDeregisterNodeDefault(
      func,
    );
  }

  late final _xmlDeregisterNodeDefaultPtr = _lookup<
      ffi.NativeFunction<
          xmlDeregisterNodeFunc Function(
              xmlDeregisterNodeFunc)>>('xmlDeregisterNodeDefault');
  late final _xmlDeregisterNodeDefault = _xmlDeregisterNodeDefaultPtr
      .asFunction<xmlDeregisterNodeFunc Function(xmlDeregisterNodeFunc)>();

  xmlDeregisterNodeFunc xmlThrDefDeregisterNodeDefault(
    xmlDeregisterNodeFunc func,
  ) {
    return _xmlThrDefDeregisterNodeDefault(
      func,
    );
  }

  late final _xmlThrDefDeregisterNodeDefaultPtr = _lookup<
      ffi.NativeFunction<
          xmlDeregisterNodeFunc Function(
              xmlDeregisterNodeFunc)>>('xmlThrDefDeregisterNodeDefault');
  late final _xmlThrDefDeregisterNodeDefault =
      _xmlThrDefDeregisterNodeDefaultPtr
          .asFunction<xmlDeregisterNodeFunc Function(xmlDeregisterNodeFunc)>();

  xmlOutputBufferCreateFilenameFunc xmlThrDefOutputBufferCreateFilenameDefault(
    xmlOutputBufferCreateFilenameFunc func,
  ) {
    return _xmlThrDefOutputBufferCreateFilenameDefault(
      func,
    );
  }

  late final _xmlThrDefOutputBufferCreateFilenameDefaultPtr = _lookup<
          ffi.NativeFunction<
              xmlOutputBufferCreateFilenameFunc Function(
                  xmlOutputBufferCreateFilenameFunc)>>(
      'xmlThrDefOutputBufferCreateFilenameDefault');
  late final _xmlThrDefOutputBufferCreateFilenameDefault =
      _xmlThrDefOutputBufferCreateFilenameDefaultPtr.asFunction<
          xmlOutputBufferCreateFilenameFunc Function(
              xmlOutputBufferCreateFilenameFunc)>();

  xmlParserInputBufferCreateFilenameFunc
      xmlThrDefParserInputBufferCreateFilenameDefault(
    xmlParserInputBufferCreateFilenameFunc func,
  ) {
    return _xmlThrDefParserInputBufferCreateFilenameDefault(
      func,
    );
  }

  late final _xmlThrDefParserInputBufferCreateFilenameDefaultPtr = _lookup<
          ffi.NativeFunction<
              xmlParserInputBufferCreateFilenameFunc Function(
                  xmlParserInputBufferCreateFilenameFunc)>>(
      'xmlThrDefParserInputBufferCreateFilenameDefault');
  late final _xmlThrDefParserInputBufferCreateFilenameDefault =
      _xmlThrDefParserInputBufferCreateFilenameDefaultPtr.asFunction<
          xmlParserInputBufferCreateFilenameFunc Function(
              xmlParserInputBufferCreateFilenameFunc)>();

  late final ffi.Pointer<xmlMallocFunc> _xmlMalloc =
      _lookup<xmlMallocFunc>('xmlMalloc');

  xmlMallocFunc get xmlMalloc => _xmlMalloc.value;

  set xmlMalloc(xmlMallocFunc value) => _xmlMalloc.value = value;

  late final ffi.Pointer<xmlMallocFunc> _xmlMallocAtomic =
      _lookup<xmlMallocFunc>('xmlMallocAtomic');

  xmlMallocFunc get xmlMallocAtomic => _xmlMallocAtomic.value;

  set xmlMallocAtomic(xmlMallocFunc value) => _xmlMallocAtomic.value = value;

  late final ffi.Pointer<xmlReallocFunc> _xmlRealloc =
      _lookup<xmlReallocFunc>('xmlRealloc');

  xmlReallocFunc get xmlRealloc => _xmlRealloc.value;

  set xmlRealloc(xmlReallocFunc value) => _xmlRealloc.value = value;

  late final ffi.Pointer<xmlFreeFunc> _xmlFree =
      _lookup<xmlFreeFunc>('xmlFree');

  xmlFreeFunc get xmlFree => _xmlFree.value;

  set xmlFree(xmlFreeFunc value) => _xmlFree.value = value;

  late final ffi.Pointer<xmlStrdupFunc> _xmlMemStrdup =
      _lookup<xmlStrdupFunc>('xmlMemStrdup');

  xmlStrdupFunc get xmlMemStrdup => _xmlMemStrdup.value;

  set xmlMemStrdup(xmlStrdupFunc value) => _xmlMemStrdup.value = value;

  ffi.Pointer<xmlSAXHandlerV1> __docbDefaultSAXHandler() {
    return ___docbDefaultSAXHandler();
  }

  late final ___docbDefaultSAXHandlerPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<xmlSAXHandlerV1> Function()>>(
          '__docbDefaultSAXHandler');
  late final ___docbDefaultSAXHandler = ___docbDefaultSAXHandlerPtr
      .asFunction<ffi.Pointer<xmlSAXHandlerV1> Function()>();

  ffi.Pointer<xmlSAXHandlerV1> __htmlDefaultSAXHandler() {
    return ___htmlDefaultSAXHandler();
  }

  late final ___htmlDefaultSAXHandlerPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<xmlSAXHandlerV1> Function()>>(
          '__htmlDefaultSAXHandler');
  late final ___htmlDefaultSAXHandler = ___htmlDefaultSAXHandlerPtr
      .asFunction<ffi.Pointer<xmlSAXHandlerV1> Function()>();

  ffi.Pointer<xmlError> __xmlLastError() {
    return ___xmlLastError();
  }

  late final ___xmlLastErrorPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<xmlError> Function()>>(
          '__xmlLastError');
  late final ___xmlLastError =
      ___xmlLastErrorPtr.asFunction<ffi.Pointer<xmlError> Function()>();

  ffi.Pointer<ffi.Int> __oldXMLWDcompatibility() {
    return ___oldXMLWDcompatibility();
  }

  late final ___oldXMLWDcompatibilityPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int> Function()>>(
          '__oldXMLWDcompatibility');
  late final ___oldXMLWDcompatibility =
      ___oldXMLWDcompatibilityPtr.asFunction<ffi.Pointer<ffi.Int> Function()>();

  ffi.Pointer<ffi.Int32> __xmlBufferAllocScheme() {
    return ___xmlBufferAllocScheme();
  }

  late final ___xmlBufferAllocSchemePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int32> Function()>>(
          '__xmlBufferAllocScheme');
  late final ___xmlBufferAllocScheme = ___xmlBufferAllocSchemePtr
      .asFunction<ffi.Pointer<ffi.Int32> Function()>();

  int xmlThrDefBufferAllocScheme(
    int v,
  ) {
    return _xmlThrDefBufferAllocScheme(
      v,
    );
  }

  late final _xmlThrDefBufferAllocSchemePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>(
          'xmlThrDefBufferAllocScheme');
  late final _xmlThrDefBufferAllocScheme =
      _xmlThrDefBufferAllocSchemePtr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Int> __xmlDefaultBufferSize() {
    return ___xmlDefaultBufferSize();
  }

  late final ___xmlDefaultBufferSizePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int> Function()>>(
          '__xmlDefaultBufferSize');
  late final ___xmlDefaultBufferSize =
      ___xmlDefaultBufferSizePtr.asFunction<ffi.Pointer<ffi.Int> Function()>();

  int xmlThrDefDefaultBufferSize(
    int v,
  ) {
    return _xmlThrDefDefaultBufferSize(
      v,
    );
  }

  late final _xmlThrDefDefaultBufferSizePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'xmlThrDefDefaultBufferSize');
  late final _xmlThrDefDefaultBufferSize =
      _xmlThrDefDefaultBufferSizePtr.asFunction<int Function(int)>();

  ffi.Pointer<xmlSAXHandlerV1> __xmlDefaultSAXHandler() {
    return ___xmlDefaultSAXHandler();
  }

  late final ___xmlDefaultSAXHandlerPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<xmlSAXHandlerV1> Function()>>(
          '__xmlDefaultSAXHandler');
  late final ___xmlDefaultSAXHandler = ___xmlDefaultSAXHandlerPtr
      .asFunction<ffi.Pointer<xmlSAXHandlerV1> Function()>();

  ffi.Pointer<xmlSAXLocator> __xmlDefaultSAXLocator() {
    return ___xmlDefaultSAXLocator();
  }

  late final ___xmlDefaultSAXLocatorPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<xmlSAXLocator> Function()>>(
          '__xmlDefaultSAXLocator');
  late final ___xmlDefaultSAXLocator = ___xmlDefaultSAXLocatorPtr
      .asFunction<ffi.Pointer<xmlSAXLocator> Function()>();

  ffi.Pointer<ffi.Int> __xmlDoValidityCheckingDefaultValue() {
    return ___xmlDoValidityCheckingDefaultValue();
  }

  late final ___xmlDoValidityCheckingDefaultValuePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int> Function()>>(
          '__xmlDoValidityCheckingDefaultValue');
  late final ___xmlDoValidityCheckingDefaultValue =
      ___xmlDoValidityCheckingDefaultValuePtr
          .asFunction<ffi.Pointer<ffi.Int> Function()>();

  int xmlThrDefDoValidityCheckingDefaultValue(
    int v,
  ) {
    return _xmlThrDefDoValidityCheckingDefaultValue(
      v,
    );
  }

  late final _xmlThrDefDoValidityCheckingDefaultValuePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'xmlThrDefDoValidityCheckingDefaultValue');
  late final _xmlThrDefDoValidityCheckingDefaultValue =
      _xmlThrDefDoValidityCheckingDefaultValuePtr
          .asFunction<int Function(int)>();

  ffi.Pointer<xmlGenericErrorFunc> __xmlGenericError() {
    return ___xmlGenericError();
  }

  late final ___xmlGenericErrorPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<xmlGenericErrorFunc> Function()>>(
          '__xmlGenericError');
  late final ___xmlGenericError = ___xmlGenericErrorPtr
      .asFunction<ffi.Pointer<xmlGenericErrorFunc> Function()>();

  ffi.Pointer<xmlStructuredErrorFunc> __xmlStructuredError() {
    return ___xmlStructuredError();
  }

  late final ___xmlStructuredErrorPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<xmlStructuredErrorFunc> Function()>>(
      '__xmlStructuredError');
  late final ___xmlStructuredError = ___xmlStructuredErrorPtr
      .asFunction<ffi.Pointer<xmlStructuredErrorFunc> Function()>();

  ffi.Pointer<ffi.Pointer<ffi.Void>> __xmlGenericErrorContext() {
    return ___xmlGenericErrorContext();
  }

  late final ___xmlGenericErrorContextPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Pointer<ffi.Void>> Function()>>(
      '__xmlGenericErrorContext');
  late final ___xmlGenericErrorContext = ___xmlGenericErrorContextPtr
      .asFunction<ffi.Pointer<ffi.Pointer<ffi.Void>> Function()>();

  ffi.Pointer<ffi.Pointer<ffi.Void>> __xmlStructuredErrorContext() {
    return ___xmlStructuredErrorContext();
  }

  late final ___xmlStructuredErrorContextPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Pointer<ffi.Void>> Function()>>(
      '__xmlStructuredErrorContext');
  late final ___xmlStructuredErrorContext = ___xmlStructuredErrorContextPtr
      .asFunction<ffi.Pointer<ffi.Pointer<ffi.Void>> Function()>();

  ffi.Pointer<ffi.Int> __xmlGetWarningsDefaultValue() {
    return ___xmlGetWarningsDefaultValue();
  }

  late final ___xmlGetWarningsDefaultValuePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int> Function()>>(
          '__xmlGetWarningsDefaultValue');
  late final ___xmlGetWarningsDefaultValue = ___xmlGetWarningsDefaultValuePtr
      .asFunction<ffi.Pointer<ffi.Int> Function()>();

  int xmlThrDefGetWarningsDefaultValue(
    int v,
  ) {
    return _xmlThrDefGetWarningsDefaultValue(
      v,
    );
  }

  late final _xmlThrDefGetWarningsDefaultValuePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'xmlThrDefGetWarningsDefaultValue');
  late final _xmlThrDefGetWarningsDefaultValue =
      _xmlThrDefGetWarningsDefaultValuePtr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Int> __xmlIndentTreeOutput() {
    return ___xmlIndentTreeOutput();
  }

  late final ___xmlIndentTreeOutputPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int> Function()>>(
          '__xmlIndentTreeOutput');
  late final ___xmlIndentTreeOutput =
      ___xmlIndentTreeOutputPtr.asFunction<ffi.Pointer<ffi.Int> Function()>();

  int xmlThrDefIndentTreeOutput(
    int v,
  ) {
    return _xmlThrDefIndentTreeOutput(
      v,
    );
  }

  late final _xmlThrDefIndentTreeOutputPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'xmlThrDefIndentTreeOutput');
  late final _xmlThrDefIndentTreeOutput =
      _xmlThrDefIndentTreeOutputPtr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Pointer<ffi.Char>> __xmlTreeIndentString() {
    return ___xmlTreeIndentString();
  }

  late final ___xmlTreeIndentStringPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Pointer<ffi.Char>> Function()>>(
      '__xmlTreeIndentString');
  late final ___xmlTreeIndentString = ___xmlTreeIndentStringPtr
      .asFunction<ffi.Pointer<ffi.Pointer<ffi.Char>> Function()>();

  ffi.Pointer<ffi.Char> xmlThrDefTreeIndentString(
    ffi.Pointer<ffi.Char> v,
  ) {
    return _xmlThrDefTreeIndentString(
      v,
    );
  }

  late final _xmlThrDefTreeIndentStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('xmlThrDefTreeIndentString');
  late final _xmlThrDefTreeIndentString = _xmlThrDefTreeIndentStringPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Int> __xmlKeepBlanksDefaultValue() {
    return ___xmlKeepBlanksDefaultValue();
  }

  late final ___xmlKeepBlanksDefaultValuePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int> Function()>>(
          '__xmlKeepBlanksDefaultValue');
  late final ___xmlKeepBlanksDefaultValue = ___xmlKeepBlanksDefaultValuePtr
      .asFunction<ffi.Pointer<ffi.Int> Function()>();

  int xmlThrDefKeepBlanksDefaultValue(
    int v,
  ) {
    return _xmlThrDefKeepBlanksDefaultValue(
      v,
    );
  }

  late final _xmlThrDefKeepBlanksDefaultValuePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'xmlThrDefKeepBlanksDefaultValue');
  late final _xmlThrDefKeepBlanksDefaultValue =
      _xmlThrDefKeepBlanksDefaultValuePtr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Int> __xmlLineNumbersDefaultValue() {
    return ___xmlLineNumbersDefaultValue();
  }

  late final ___xmlLineNumbersDefaultValuePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int> Function()>>(
          '__xmlLineNumbersDefaultValue');
  late final ___xmlLineNumbersDefaultValue = ___xmlLineNumbersDefaultValuePtr
      .asFunction<ffi.Pointer<ffi.Int> Function()>();

  int xmlThrDefLineNumbersDefaultValue(
    int v,
  ) {
    return _xmlThrDefLineNumbersDefaultValue(
      v,
    );
  }

  late final _xmlThrDefLineNumbersDefaultValuePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'xmlThrDefLineNumbersDefaultValue');
  late final _xmlThrDefLineNumbersDefaultValue =
      _xmlThrDefLineNumbersDefaultValuePtr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Int> __xmlLoadExtDtdDefaultValue() {
    return ___xmlLoadExtDtdDefaultValue();
  }

  late final ___xmlLoadExtDtdDefaultValuePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int> Function()>>(
          '__xmlLoadExtDtdDefaultValue');
  late final ___xmlLoadExtDtdDefaultValue = ___xmlLoadExtDtdDefaultValuePtr
      .asFunction<ffi.Pointer<ffi.Int> Function()>();

  int xmlThrDefLoadExtDtdDefaultValue(
    int v,
  ) {
    return _xmlThrDefLoadExtDtdDefaultValue(
      v,
    );
  }

  late final _xmlThrDefLoadExtDtdDefaultValuePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'xmlThrDefLoadExtDtdDefaultValue');
  late final _xmlThrDefLoadExtDtdDefaultValue =
      _xmlThrDefLoadExtDtdDefaultValuePtr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Int> __xmlParserDebugEntities() {
    return ___xmlParserDebugEntities();
  }

  late final ___xmlParserDebugEntitiesPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int> Function()>>(
          '__xmlParserDebugEntities');
  late final ___xmlParserDebugEntities = ___xmlParserDebugEntitiesPtr
      .asFunction<ffi.Pointer<ffi.Int> Function()>();

  int xmlThrDefParserDebugEntities(
    int v,
  ) {
    return _xmlThrDefParserDebugEntities(
      v,
    );
  }

  late final _xmlThrDefParserDebugEntitiesPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'xmlThrDefParserDebugEntities');
  late final _xmlThrDefParserDebugEntities =
      _xmlThrDefParserDebugEntitiesPtr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Pointer<ffi.Char>> __xmlParserVersion() {
    return ___xmlParserVersion();
  }

  late final ___xmlParserVersionPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Pointer<ffi.Char>> Function()>>(
      '__xmlParserVersion');
  late final ___xmlParserVersion = ___xmlParserVersionPtr
      .asFunction<ffi.Pointer<ffi.Pointer<ffi.Char>> Function()>();

  ffi.Pointer<ffi.Int> __xmlPedanticParserDefaultValue() {
    return ___xmlPedanticParserDefaultValue();
  }

  late final ___xmlPedanticParserDefaultValuePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int> Function()>>(
          '__xmlPedanticParserDefaultValue');
  late final ___xmlPedanticParserDefaultValue =
      ___xmlPedanticParserDefaultValuePtr
          .asFunction<ffi.Pointer<ffi.Int> Function()>();

  int xmlThrDefPedanticParserDefaultValue(
    int v,
  ) {
    return _xmlThrDefPedanticParserDefaultValue(
      v,
    );
  }

  late final _xmlThrDefPedanticParserDefaultValuePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'xmlThrDefPedanticParserDefaultValue');
  late final _xmlThrDefPedanticParserDefaultValue =
      _xmlThrDefPedanticParserDefaultValuePtr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Int> __xmlSaveNoEmptyTags() {
    return ___xmlSaveNoEmptyTags();
  }

  late final ___xmlSaveNoEmptyTagsPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int> Function()>>(
          '__xmlSaveNoEmptyTags');
  late final ___xmlSaveNoEmptyTags =
      ___xmlSaveNoEmptyTagsPtr.asFunction<ffi.Pointer<ffi.Int> Function()>();

  int xmlThrDefSaveNoEmptyTags(
    int v,
  ) {
    return _xmlThrDefSaveNoEmptyTags(
      v,
    );
  }

  late final _xmlThrDefSaveNoEmptyTagsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'xmlThrDefSaveNoEmptyTags');
  late final _xmlThrDefSaveNoEmptyTags =
      _xmlThrDefSaveNoEmptyTagsPtr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Int> __xmlSubstituteEntitiesDefaultValue() {
    return ___xmlSubstituteEntitiesDefaultValue();
  }

  late final ___xmlSubstituteEntitiesDefaultValuePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int> Function()>>(
          '__xmlSubstituteEntitiesDefaultValue');
  late final ___xmlSubstituteEntitiesDefaultValue =
      ___xmlSubstituteEntitiesDefaultValuePtr
          .asFunction<ffi.Pointer<ffi.Int> Function()>();

  int xmlThrDefSubstituteEntitiesDefaultValue(
    int v,
  ) {
    return _xmlThrDefSubstituteEntitiesDefaultValue(
      v,
    );
  }

  late final _xmlThrDefSubstituteEntitiesDefaultValuePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'xmlThrDefSubstituteEntitiesDefaultValue');
  late final _xmlThrDefSubstituteEntitiesDefaultValue =
      _xmlThrDefSubstituteEntitiesDefaultValuePtr
          .asFunction<int Function(int)>();

  ffi.Pointer<xmlRegisterNodeFunc> __xmlRegisterNodeDefaultValue() {
    return ___xmlRegisterNodeDefaultValue();
  }

  late final ___xmlRegisterNodeDefaultValuePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<xmlRegisterNodeFunc> Function()>>(
          '__xmlRegisterNodeDefaultValue');
  late final ___xmlRegisterNodeDefaultValue = ___xmlRegisterNodeDefaultValuePtr
      .asFunction<ffi.Pointer<xmlRegisterNodeFunc> Function()>();

  ffi.Pointer<xmlDeregisterNodeFunc> __xmlDeregisterNodeDefaultValue() {
    return ___xmlDeregisterNodeDefaultValue();
  }

  late final ___xmlDeregisterNodeDefaultValuePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<xmlDeregisterNodeFunc> Function()>>(
      '__xmlDeregisterNodeDefaultValue');
  late final ___xmlDeregisterNodeDefaultValue =
      ___xmlDeregisterNodeDefaultValuePtr
          .asFunction<ffi.Pointer<xmlDeregisterNodeFunc> Function()>();

  ffi.Pointer<xmlParserInputBufferCreateFilenameFunc>
      __xmlParserInputBufferCreateFilenameValue() {
    return ___xmlParserInputBufferCreateFilenameValue();
  }

  late final ___xmlParserInputBufferCreateFilenameValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<xmlParserInputBufferCreateFilenameFunc>
              Function()>>('__xmlParserInputBufferCreateFilenameValue');
  late final ___xmlParserInputBufferCreateFilenameValue =
      ___xmlParserInputBufferCreateFilenameValuePtr.asFunction<
          ffi.Pointer<xmlParserInputBufferCreateFilenameFunc> Function()>();

  ffi.Pointer<xmlOutputBufferCreateFilenameFunc>
      __xmlOutputBufferCreateFilenameValue() {
    return ___xmlOutputBufferCreateFilenameValue();
  }

  late final ___xmlOutputBufferCreateFilenameValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<xmlOutputBufferCreateFilenameFunc>
              Function()>>('__xmlOutputBufferCreateFilenameValue');
  late final ___xmlOutputBufferCreateFilenameValue =
      ___xmlOutputBufferCreateFilenameValuePtr.asFunction<
          ffi.Pointer<xmlOutputBufferCreateFilenameFunc> Function()>();

  xmlMutexPtr xmlNewMutex() {
    return _xmlNewMutex();
  }

  late final _xmlNewMutexPtr =
      _lookup<ffi.NativeFunction<xmlMutexPtr Function()>>('xmlNewMutex');
  late final _xmlNewMutex =
      _xmlNewMutexPtr.asFunction<xmlMutexPtr Function()>();

  void xmlMutexLock(
    xmlMutexPtr tok,
  ) {
    return _xmlMutexLock(
      tok,
    );
  }

  late final _xmlMutexLockPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(xmlMutexPtr)>>(
          'xmlMutexLock');
  late final _xmlMutexLock =
      _xmlMutexLockPtr.asFunction<void Function(xmlMutexPtr)>();

  void xmlMutexUnlock(
    xmlMutexPtr tok,
  ) {
    return _xmlMutexUnlock(
      tok,
    );
  }

  late final _xmlMutexUnlockPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(xmlMutexPtr)>>(
          'xmlMutexUnlock');
  late final _xmlMutexUnlock =
      _xmlMutexUnlockPtr.asFunction<void Function(xmlMutexPtr)>();

  void xmlFreeMutex(
    xmlMutexPtr tok,
  ) {
    return _xmlFreeMutex(
      tok,
    );
  }

  late final _xmlFreeMutexPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(xmlMutexPtr)>>(
          'xmlFreeMutex');
  late final _xmlFreeMutex =
      _xmlFreeMutexPtr.asFunction<void Function(xmlMutexPtr)>();

  xmlRMutexPtr xmlNewRMutex() {
    return _xmlNewRMutex();
  }

  late final _xmlNewRMutexPtr =
      _lookup<ffi.NativeFunction<xmlRMutexPtr Function()>>('xmlNewRMutex');
  late final _xmlNewRMutex =
      _xmlNewRMutexPtr.asFunction<xmlRMutexPtr Function()>();

  void xmlRMutexLock(
    xmlRMutexPtr tok,
  ) {
    return _xmlRMutexLock(
      tok,
    );
  }

  late final _xmlRMutexLockPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(xmlRMutexPtr)>>(
          'xmlRMutexLock');
  late final _xmlRMutexLock =
      _xmlRMutexLockPtr.asFunction<void Function(xmlRMutexPtr)>();

  void xmlRMutexUnlock(
    xmlRMutexPtr tok,
  ) {
    return _xmlRMutexUnlock(
      tok,
    );
  }

  late final _xmlRMutexUnlockPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(xmlRMutexPtr)>>(
          'xmlRMutexUnlock');
  late final _xmlRMutexUnlock =
      _xmlRMutexUnlockPtr.asFunction<void Function(xmlRMutexPtr)>();

  void xmlFreeRMutex(
    xmlRMutexPtr tok,
  ) {
    return _xmlFreeRMutex(
      tok,
    );
  }

  late final _xmlFreeRMutexPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(xmlRMutexPtr)>>(
          'xmlFreeRMutex');
  late final _xmlFreeRMutex =
      _xmlFreeRMutexPtr.asFunction<void Function(xmlRMutexPtr)>();

  void xmlInitThreads() {
    return _xmlInitThreads();
  }

  late final _xmlInitThreadsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('xmlInitThreads');
  late final _xmlInitThreads = _xmlInitThreadsPtr.asFunction<void Function()>();

  void xmlLockLibrary() {
    return _xmlLockLibrary();
  }

  late final _xmlLockLibraryPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('xmlLockLibrary');
  late final _xmlLockLibrary = _xmlLockLibraryPtr.asFunction<void Function()>();

  void xmlUnlockLibrary() {
    return _xmlUnlockLibrary();
  }

  late final _xmlUnlockLibraryPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('xmlUnlockLibrary');
  late final _xmlUnlockLibrary =
      _xmlUnlockLibraryPtr.asFunction<void Function()>();

  int xmlGetThreadId() {
    return _xmlGetThreadId();
  }

  late final _xmlGetThreadIdPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('xmlGetThreadId');
  late final _xmlGetThreadId = _xmlGetThreadIdPtr.asFunction<int Function()>();

  int xmlIsMainThread() {
    return _xmlIsMainThread();
  }

  late final _xmlIsMainThreadPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('xmlIsMainThread');
  late final _xmlIsMainThread =
      _xmlIsMainThreadPtr.asFunction<int Function()>();

  void xmlCleanupThreads() {
    return _xmlCleanupThreads();
  }

  late final _xmlCleanupThreadsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('xmlCleanupThreads');
  late final _xmlCleanupThreads =
      _xmlCleanupThreadsPtr.asFunction<void Function()>();

  xmlGlobalStatePtr xmlGetGlobalState() {
    return _xmlGetGlobalState();
  }

  late final _xmlGetGlobalStatePtr =
      _lookup<ffi.NativeFunction<xmlGlobalStatePtr Function()>>(
          'xmlGetGlobalState');
  late final _xmlGetGlobalState =
      _xmlGetGlobalStatePtr.asFunction<xmlGlobalStatePtr Function()>();

  int xmlRelaxNGInitTypes() {
    return _xmlRelaxNGInitTypes();
  }

  late final _xmlRelaxNGInitTypesPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('xmlRelaxNGInitTypes');
  late final _xmlRelaxNGInitTypes =
      _xmlRelaxNGInitTypesPtr.asFunction<int Function()>();

  void xmlRelaxNGCleanupTypes() {
    return _xmlRelaxNGCleanupTypes();
  }

  late final _xmlRelaxNGCleanupTypesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'xmlRelaxNGCleanupTypes');
  late final _xmlRelaxNGCleanupTypes =
      _xmlRelaxNGCleanupTypesPtr.asFunction<void Function()>();

  xmlRelaxNGParserCtxtPtr xmlRelaxNGNewParserCtxt(
    ffi.Pointer<ffi.Char> URL,
  ) {
    return _xmlRelaxNGNewParserCtxt(
      URL,
    );
  }

  late final _xmlRelaxNGNewParserCtxtPtr = _lookup<
      ffi.NativeFunction<
          xmlRelaxNGParserCtxtPtr Function(
              ffi.Pointer<ffi.Char>)>>('xmlRelaxNGNewParserCtxt');
  late final _xmlRelaxNGNewParserCtxt = _xmlRelaxNGNewParserCtxtPtr
      .asFunction<xmlRelaxNGParserCtxtPtr Function(ffi.Pointer<ffi.Char>)>();

  xmlRelaxNGParserCtxtPtr xmlRelaxNGNewMemParserCtxt(
    ffi.Pointer<ffi.Char> buffer,
    int size,
  ) {
    return _xmlRelaxNGNewMemParserCtxt(
      buffer,
      size,
    );
  }

  late final _xmlRelaxNGNewMemParserCtxtPtr = _lookup<
      ffi.NativeFunction<
          xmlRelaxNGParserCtxtPtr Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('xmlRelaxNGNewMemParserCtxt');
  late final _xmlRelaxNGNewMemParserCtxt =
      _xmlRelaxNGNewMemParserCtxtPtr.asFunction<
          xmlRelaxNGParserCtxtPtr Function(ffi.Pointer<ffi.Char>, int)>();

  xmlRelaxNGParserCtxtPtr xmlRelaxNGNewDocParserCtxt(
    xmlDocPtr doc,
  ) {
    return _xmlRelaxNGNewDocParserCtxt(
      doc,
    );
  }

  late final _xmlRelaxNGNewDocParserCtxtPtr =
      _lookup<ffi.NativeFunction<xmlRelaxNGParserCtxtPtr Function(xmlDocPtr)>>(
          'xmlRelaxNGNewDocParserCtxt');
  late final _xmlRelaxNGNewDocParserCtxt = _xmlRelaxNGNewDocParserCtxtPtr
      .asFunction<xmlRelaxNGParserCtxtPtr Function(xmlDocPtr)>();

  int xmlRelaxParserSetFlag(
    xmlRelaxNGParserCtxtPtr ctxt,
    int flag,
  ) {
    return _xmlRelaxParserSetFlag(
      ctxt,
      flag,
    );
  }

  late final _xmlRelaxParserSetFlagPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int Function(xmlRelaxNGParserCtxtPtr, ffi.Int)>>(
      'xmlRelaxParserSetFlag');
  late final _xmlRelaxParserSetFlag = _xmlRelaxParserSetFlagPtr
      .asFunction<int Function(xmlRelaxNGParserCtxtPtr, int)>();

  void xmlRelaxNGFreeParserCtxt(
    xmlRelaxNGParserCtxtPtr ctxt,
  ) {
    return _xmlRelaxNGFreeParserCtxt(
      ctxt,
    );
  }

  late final _xmlRelaxNGFreeParserCtxtPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(xmlRelaxNGParserCtxtPtr)>>(
          'xmlRelaxNGFreeParserCtxt');
  late final _xmlRelaxNGFreeParserCtxt = _xmlRelaxNGFreeParserCtxtPtr
      .asFunction<void Function(xmlRelaxNGParserCtxtPtr)>();

  void xmlRelaxNGSetParserErrors(
    xmlRelaxNGParserCtxtPtr ctxt,
    xmlRelaxNGValidityErrorFunc err,
    xmlRelaxNGValidityWarningFunc warn,
    ffi.Pointer<ffi.Void> ctx,
  ) {
    return _xmlRelaxNGSetParserErrors(
      ctxt,
      err,
      warn,
      ctx,
    );
  }

  late final _xmlRelaxNGSetParserErrorsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              xmlRelaxNGParserCtxtPtr,
              xmlRelaxNGValidityErrorFunc,
              xmlRelaxNGValidityWarningFunc,
              ffi.Pointer<ffi.Void>)>>('xmlRelaxNGSetParserErrors');
  late final _xmlRelaxNGSetParserErrors =
      _xmlRelaxNGSetParserErrorsPtr.asFunction<
          void Function(xmlRelaxNGParserCtxtPtr, xmlRelaxNGValidityErrorFunc,
              xmlRelaxNGValidityWarningFunc, ffi.Pointer<ffi.Void>)>();

  int xmlRelaxNGGetParserErrors(
    xmlRelaxNGParserCtxtPtr ctxt,
    ffi.Pointer<xmlRelaxNGValidityErrorFunc> err,
    ffi.Pointer<xmlRelaxNGValidityWarningFunc> warn,
    ffi.Pointer<ffi.Pointer<ffi.Void>> ctx,
  ) {
    return _xmlRelaxNGGetParserErrors(
      ctxt,
      err,
      warn,
      ctx,
    );
  }

  late final _xmlRelaxNGGetParserErrorsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  xmlRelaxNGParserCtxtPtr,
                  ffi.Pointer<xmlRelaxNGValidityErrorFunc>,
                  ffi.Pointer<xmlRelaxNGValidityWarningFunc>,
                  ffi.Pointer<ffi.Pointer<ffi.Void>>)>>(
      'xmlRelaxNGGetParserErrors');
  late final _xmlRelaxNGGetParserErrors =
      _xmlRelaxNGGetParserErrorsPtr.asFunction<
          int Function(
              xmlRelaxNGParserCtxtPtr,
              ffi.Pointer<xmlRelaxNGValidityErrorFunc>,
              ffi.Pointer<xmlRelaxNGValidityWarningFunc>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  void xmlRelaxNGSetParserStructuredErrors(
    xmlRelaxNGParserCtxtPtr ctxt,
    xmlStructuredErrorFunc serror,
    ffi.Pointer<ffi.Void> ctx,
  ) {
    return _xmlRelaxNGSetParserStructuredErrors(
      ctxt,
      serror,
      ctx,
    );
  }

  late final _xmlRelaxNGSetParserStructuredErrorsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(xmlRelaxNGParserCtxtPtr, xmlStructuredErrorFunc,
              ffi.Pointer<ffi.Void>)>>('xmlRelaxNGSetParserStructuredErrors');
  late final _xmlRelaxNGSetParserStructuredErrors =
      _xmlRelaxNGSetParserStructuredErrorsPtr.asFunction<
          void Function(xmlRelaxNGParserCtxtPtr, xmlStructuredErrorFunc,
              ffi.Pointer<ffi.Void>)>();

  xmlRelaxNGPtr xmlRelaxNGParse(
    xmlRelaxNGParserCtxtPtr ctxt,
  ) {
    return _xmlRelaxNGParse(
      ctxt,
    );
  }

  late final _xmlRelaxNGParsePtr = _lookup<
          ffi.NativeFunction<xmlRelaxNGPtr Function(xmlRelaxNGParserCtxtPtr)>>(
      'xmlRelaxNGParse');
  late final _xmlRelaxNGParse = _xmlRelaxNGParsePtr
      .asFunction<xmlRelaxNGPtr Function(xmlRelaxNGParserCtxtPtr)>();

  void xmlRelaxNGFree(
    xmlRelaxNGPtr schema,
  ) {
    return _xmlRelaxNGFree(
      schema,
    );
  }

  late final _xmlRelaxNGFreePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(xmlRelaxNGPtr)>>(
          'xmlRelaxNGFree');
  late final _xmlRelaxNGFree =
      _xmlRelaxNGFreePtr.asFunction<void Function(xmlRelaxNGPtr)>();

  void xmlRelaxNGDump(
    ffi.Pointer<FILE> output,
    xmlRelaxNGPtr schema,
  ) {
    return _xmlRelaxNGDump(
      output,
      schema,
    );
  }

  late final _xmlRelaxNGDumpPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<FILE>, xmlRelaxNGPtr)>>(
      'xmlRelaxNGDump');
  late final _xmlRelaxNGDump = _xmlRelaxNGDumpPtr
      .asFunction<void Function(ffi.Pointer<FILE>, xmlRelaxNGPtr)>();

  void xmlRelaxNGDumpTree(
    ffi.Pointer<FILE> output,
    xmlRelaxNGPtr schema,
  ) {
    return _xmlRelaxNGDumpTree(
      output,
      schema,
    );
  }

  late final _xmlRelaxNGDumpTreePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<FILE>, xmlRelaxNGPtr)>>(
      'xmlRelaxNGDumpTree');
  late final _xmlRelaxNGDumpTree = _xmlRelaxNGDumpTreePtr
      .asFunction<void Function(ffi.Pointer<FILE>, xmlRelaxNGPtr)>();

  void xmlRelaxNGSetValidErrors(
    xmlRelaxNGValidCtxtPtr ctxt,
    xmlRelaxNGValidityErrorFunc err,
    xmlRelaxNGValidityWarningFunc warn,
    ffi.Pointer<ffi.Void> ctx,
  ) {
    return _xmlRelaxNGSetValidErrors(
      ctxt,
      err,
      warn,
      ctx,
    );
  }

  late final _xmlRelaxNGSetValidErrorsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              xmlRelaxNGValidCtxtPtr,
              xmlRelaxNGValidityErrorFunc,
              xmlRelaxNGValidityWarningFunc,
              ffi.Pointer<ffi.Void>)>>('xmlRelaxNGSetValidErrors');
  late final _xmlRelaxNGSetValidErrors =
      _xmlRelaxNGSetValidErrorsPtr.asFunction<
          void Function(xmlRelaxNGValidCtxtPtr, xmlRelaxNGValidityErrorFunc,
              xmlRelaxNGValidityWarningFunc, ffi.Pointer<ffi.Void>)>();

  int xmlRelaxNGGetValidErrors(
    xmlRelaxNGValidCtxtPtr ctxt,
    ffi.Pointer<xmlRelaxNGValidityErrorFunc> err,
    ffi.Pointer<xmlRelaxNGValidityWarningFunc> warn,
    ffi.Pointer<ffi.Pointer<ffi.Void>> ctx,
  ) {
    return _xmlRelaxNGGetValidErrors(
      ctxt,
      err,
      warn,
      ctx,
    );
  }

  late final _xmlRelaxNGGetValidErrorsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              xmlRelaxNGValidCtxtPtr,
              ffi.Pointer<xmlRelaxNGValidityErrorFunc>,
              ffi.Pointer<xmlRelaxNGValidityWarningFunc>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>>('xmlRelaxNGGetValidErrors');
  late final _xmlRelaxNGGetValidErrors =
      _xmlRelaxNGGetValidErrorsPtr.asFunction<
          int Function(
              xmlRelaxNGValidCtxtPtr,
              ffi.Pointer<xmlRelaxNGValidityErrorFunc>,
              ffi.Pointer<xmlRelaxNGValidityWarningFunc>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  void xmlRelaxNGSetValidStructuredErrors(
    xmlRelaxNGValidCtxtPtr ctxt,
    xmlStructuredErrorFunc serror,
    ffi.Pointer<ffi.Void> ctx,
  ) {
    return _xmlRelaxNGSetValidStructuredErrors(
      ctxt,
      serror,
      ctx,
    );
  }

  late final _xmlRelaxNGSetValidStructuredErrorsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(xmlRelaxNGValidCtxtPtr, xmlStructuredErrorFunc,
              ffi.Pointer<ffi.Void>)>>('xmlRelaxNGSetValidStructuredErrors');
  late final _xmlRelaxNGSetValidStructuredErrors =
      _xmlRelaxNGSetValidStructuredErrorsPtr.asFunction<
          void Function(xmlRelaxNGValidCtxtPtr, xmlStructuredErrorFunc,
              ffi.Pointer<ffi.Void>)>();

  xmlRelaxNGValidCtxtPtr xmlRelaxNGNewValidCtxt(
    xmlRelaxNGPtr schema,
  ) {
    return _xmlRelaxNGNewValidCtxt(
      schema,
    );
  }

  late final _xmlRelaxNGNewValidCtxtPtr = _lookup<
          ffi.NativeFunction<xmlRelaxNGValidCtxtPtr Function(xmlRelaxNGPtr)>>(
      'xmlRelaxNGNewValidCtxt');
  late final _xmlRelaxNGNewValidCtxt = _xmlRelaxNGNewValidCtxtPtr
      .asFunction<xmlRelaxNGValidCtxtPtr Function(xmlRelaxNGPtr)>();

  void xmlRelaxNGFreeValidCtxt(
    xmlRelaxNGValidCtxtPtr ctxt,
  ) {
    return _xmlRelaxNGFreeValidCtxt(
      ctxt,
    );
  }

  late final _xmlRelaxNGFreeValidCtxtPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(xmlRelaxNGValidCtxtPtr)>>(
          'xmlRelaxNGFreeValidCtxt');
  late final _xmlRelaxNGFreeValidCtxt = _xmlRelaxNGFreeValidCtxtPtr
      .asFunction<void Function(xmlRelaxNGValidCtxtPtr)>();

  int xmlRelaxNGValidateDoc(
    xmlRelaxNGValidCtxtPtr ctxt,
    xmlDocPtr doc,
  ) {
    return _xmlRelaxNGValidateDoc(
      ctxt,
      doc,
    );
  }

  late final _xmlRelaxNGValidateDocPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int Function(xmlRelaxNGValidCtxtPtr, xmlDocPtr)>>(
      'xmlRelaxNGValidateDoc');
  late final _xmlRelaxNGValidateDoc = _xmlRelaxNGValidateDocPtr
      .asFunction<int Function(xmlRelaxNGValidCtxtPtr, xmlDocPtr)>();

  int xmlRelaxNGValidatePushElement(
    xmlRelaxNGValidCtxtPtr ctxt,
    xmlDocPtr doc,
    xmlNodePtr elem,
  ) {
    return _xmlRelaxNGValidatePushElement(
      ctxt,
      doc,
      elem,
    );
  }

  late final _xmlRelaxNGValidatePushElementPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(xmlRelaxNGValidCtxtPtr, xmlDocPtr,
              xmlNodePtr)>>('xmlRelaxNGValidatePushElement');
  late final _xmlRelaxNGValidatePushElement =
      _xmlRelaxNGValidatePushElementPtr.asFunction<
          int Function(xmlRelaxNGValidCtxtPtr, xmlDocPtr, xmlNodePtr)>();

  int xmlRelaxNGValidatePushCData(
    xmlRelaxNGValidCtxtPtr ctxt,
    ffi.Pointer<xmlChar> data,
    int len,
  ) {
    return _xmlRelaxNGValidatePushCData(
      ctxt,
      data,
      len,
    );
  }

  late final _xmlRelaxNGValidatePushCDataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(xmlRelaxNGValidCtxtPtr, ffi.Pointer<xmlChar>,
              ffi.Int)>>('xmlRelaxNGValidatePushCData');
  late final _xmlRelaxNGValidatePushCData =
      _xmlRelaxNGValidatePushCDataPtr.asFunction<
          int Function(xmlRelaxNGValidCtxtPtr, ffi.Pointer<xmlChar>, int)>();

  int xmlRelaxNGValidatePopElement(
    xmlRelaxNGValidCtxtPtr ctxt,
    xmlDocPtr doc,
    xmlNodePtr elem,
  ) {
    return _xmlRelaxNGValidatePopElement(
      ctxt,
      doc,
      elem,
    );
  }

  late final _xmlRelaxNGValidatePopElementPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(xmlRelaxNGValidCtxtPtr, xmlDocPtr,
              xmlNodePtr)>>('xmlRelaxNGValidatePopElement');
  late final _xmlRelaxNGValidatePopElement =
      _xmlRelaxNGValidatePopElementPtr.asFunction<
          int Function(xmlRelaxNGValidCtxtPtr, xmlDocPtr, xmlNodePtr)>();

  int xmlRelaxNGValidateFullElement(
    xmlRelaxNGValidCtxtPtr ctxt,
    xmlDocPtr doc,
    xmlNodePtr elem,
  ) {
    return _xmlRelaxNGValidateFullElement(
      ctxt,
      doc,
      elem,
    );
  }

  late final _xmlRelaxNGValidateFullElementPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(xmlRelaxNGValidCtxtPtr, xmlDocPtr,
              xmlNodePtr)>>('xmlRelaxNGValidateFullElement');
  late final _xmlRelaxNGValidateFullElement =
      _xmlRelaxNGValidateFullElementPtr.asFunction<
          int Function(xmlRelaxNGValidCtxtPtr, xmlDocPtr, xmlNodePtr)>();

  xmlSchemaParserCtxtPtr xmlSchemaNewParserCtxt(
    ffi.Pointer<ffi.Char> URL,
  ) {
    return _xmlSchemaNewParserCtxt(
      URL,
    );
  }

  late final _xmlSchemaNewParserCtxtPtr = _lookup<
      ffi.NativeFunction<
          xmlSchemaParserCtxtPtr Function(
              ffi.Pointer<ffi.Char>)>>('xmlSchemaNewParserCtxt');
  late final _xmlSchemaNewParserCtxt = _xmlSchemaNewParserCtxtPtr
      .asFunction<xmlSchemaParserCtxtPtr Function(ffi.Pointer<ffi.Char>)>();

  xmlSchemaParserCtxtPtr xmlSchemaNewMemParserCtxt(
    ffi.Pointer<ffi.Char> buffer,
    int size,
  ) {
    return _xmlSchemaNewMemParserCtxt(
      buffer,
      size,
    );
  }

  late final _xmlSchemaNewMemParserCtxtPtr = _lookup<
      ffi.NativeFunction<
          xmlSchemaParserCtxtPtr Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('xmlSchemaNewMemParserCtxt');
  late final _xmlSchemaNewMemParserCtxt =
      _xmlSchemaNewMemParserCtxtPtr.asFunction<
          xmlSchemaParserCtxtPtr Function(ffi.Pointer<ffi.Char>, int)>();

  xmlSchemaParserCtxtPtr xmlSchemaNewDocParserCtxt(
    xmlDocPtr doc,
  ) {
    return _xmlSchemaNewDocParserCtxt(
      doc,
    );
  }

  late final _xmlSchemaNewDocParserCtxtPtr =
      _lookup<ffi.NativeFunction<xmlSchemaParserCtxtPtr Function(xmlDocPtr)>>(
          'xmlSchemaNewDocParserCtxt');
  late final _xmlSchemaNewDocParserCtxt = _xmlSchemaNewDocParserCtxtPtr
      .asFunction<xmlSchemaParserCtxtPtr Function(xmlDocPtr)>();

  void xmlSchemaFreeParserCtxt(
    xmlSchemaParserCtxtPtr ctxt,
  ) {
    return _xmlSchemaFreeParserCtxt(
      ctxt,
    );
  }

  late final _xmlSchemaFreeParserCtxtPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(xmlSchemaParserCtxtPtr)>>(
          'xmlSchemaFreeParserCtxt');
  late final _xmlSchemaFreeParserCtxt = _xmlSchemaFreeParserCtxtPtr
      .asFunction<void Function(xmlSchemaParserCtxtPtr)>();

  void xmlSchemaSetParserErrors(
    xmlSchemaParserCtxtPtr ctxt,
    xmlSchemaValidityErrorFunc err,
    xmlSchemaValidityWarningFunc warn,
    ffi.Pointer<ffi.Void> ctx,
  ) {
    return _xmlSchemaSetParserErrors(
      ctxt,
      err,
      warn,
      ctx,
    );
  }

  late final _xmlSchemaSetParserErrorsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              xmlSchemaParserCtxtPtr,
              xmlSchemaValidityErrorFunc,
              xmlSchemaValidityWarningFunc,
              ffi.Pointer<ffi.Void>)>>('xmlSchemaSetParserErrors');
  late final _xmlSchemaSetParserErrors =
      _xmlSchemaSetParserErrorsPtr.asFunction<
          void Function(xmlSchemaParserCtxtPtr, xmlSchemaValidityErrorFunc,
              xmlSchemaValidityWarningFunc, ffi.Pointer<ffi.Void>)>();

  void xmlSchemaSetParserStructuredErrors(
    xmlSchemaParserCtxtPtr ctxt,
    xmlStructuredErrorFunc serror,
    ffi.Pointer<ffi.Void> ctx,
  ) {
    return _xmlSchemaSetParserStructuredErrors(
      ctxt,
      serror,
      ctx,
    );
  }

  late final _xmlSchemaSetParserStructuredErrorsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(xmlSchemaParserCtxtPtr, xmlStructuredErrorFunc,
              ffi.Pointer<ffi.Void>)>>('xmlSchemaSetParserStructuredErrors');
  late final _xmlSchemaSetParserStructuredErrors =
      _xmlSchemaSetParserStructuredErrorsPtr.asFunction<
          void Function(xmlSchemaParserCtxtPtr, xmlStructuredErrorFunc,
              ffi.Pointer<ffi.Void>)>();

  int xmlSchemaGetParserErrors(
    xmlSchemaParserCtxtPtr ctxt,
    ffi.Pointer<xmlSchemaValidityErrorFunc> err,
    ffi.Pointer<xmlSchemaValidityWarningFunc> warn,
    ffi.Pointer<ffi.Pointer<ffi.Void>> ctx,
  ) {
    return _xmlSchemaGetParserErrors(
      ctxt,
      err,
      warn,
      ctx,
    );
  }

  late final _xmlSchemaGetParserErrorsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              xmlSchemaParserCtxtPtr,
              ffi.Pointer<xmlSchemaValidityErrorFunc>,
              ffi.Pointer<xmlSchemaValidityWarningFunc>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>>('xmlSchemaGetParserErrors');
  late final _xmlSchemaGetParserErrors =
      _xmlSchemaGetParserErrorsPtr.asFunction<
          int Function(
              xmlSchemaParserCtxtPtr,
              ffi.Pointer<xmlSchemaValidityErrorFunc>,
              ffi.Pointer<xmlSchemaValidityWarningFunc>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  int xmlSchemaIsValid(
    xmlSchemaValidCtxtPtr ctxt,
  ) {
    return _xmlSchemaIsValid(
      ctxt,
    );
  }

  late final _xmlSchemaIsValidPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(xmlSchemaValidCtxtPtr)>>(
          'xmlSchemaIsValid');
  late final _xmlSchemaIsValid =
      _xmlSchemaIsValidPtr.asFunction<int Function(xmlSchemaValidCtxtPtr)>();

  xmlSchemaPtr xmlSchemaParse(
    xmlSchemaParserCtxtPtr ctxt,
  ) {
    return _xmlSchemaParse(
      ctxt,
    );
  }

  late final _xmlSchemaParsePtr = _lookup<
          ffi.NativeFunction<xmlSchemaPtr Function(xmlSchemaParserCtxtPtr)>>(
      'xmlSchemaParse');
  late final _xmlSchemaParse = _xmlSchemaParsePtr
      .asFunction<xmlSchemaPtr Function(xmlSchemaParserCtxtPtr)>();

  void xmlSchemaFree(
    xmlSchemaPtr schema,
  ) {
    return _xmlSchemaFree(
      schema,
    );
  }

  late final _xmlSchemaFreePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(xmlSchemaPtr)>>(
          'xmlSchemaFree');
  late final _xmlSchemaFree =
      _xmlSchemaFreePtr.asFunction<void Function(xmlSchemaPtr)>();

  void xmlSchemaDump(
    ffi.Pointer<FILE> output,
    xmlSchemaPtr schema,
  ) {
    return _xmlSchemaDump(
      output,
      schema,
    );
  }

  late final _xmlSchemaDumpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<FILE>, xmlSchemaPtr)>>('xmlSchemaDump');
  late final _xmlSchemaDump = _xmlSchemaDumpPtr
      .asFunction<void Function(ffi.Pointer<FILE>, xmlSchemaPtr)>();

  void xmlSchemaSetValidErrors(
    xmlSchemaValidCtxtPtr ctxt,
    xmlSchemaValidityErrorFunc err,
    xmlSchemaValidityWarningFunc warn,
    ffi.Pointer<ffi.Void> ctx,
  ) {
    return _xmlSchemaSetValidErrors(
      ctxt,
      err,
      warn,
      ctx,
    );
  }

  late final _xmlSchemaSetValidErrorsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              xmlSchemaValidCtxtPtr,
              xmlSchemaValidityErrorFunc,
              xmlSchemaValidityWarningFunc,
              ffi.Pointer<ffi.Void>)>>('xmlSchemaSetValidErrors');
  late final _xmlSchemaSetValidErrors = _xmlSchemaSetValidErrorsPtr.asFunction<
      void Function(xmlSchemaValidCtxtPtr, xmlSchemaValidityErrorFunc,
          xmlSchemaValidityWarningFunc, ffi.Pointer<ffi.Void>)>();

  void xmlSchemaSetValidStructuredErrors(
    xmlSchemaValidCtxtPtr ctxt,
    xmlStructuredErrorFunc serror,
    ffi.Pointer<ffi.Void> ctx,
  ) {
    return _xmlSchemaSetValidStructuredErrors(
      ctxt,
      serror,
      ctx,
    );
  }

  late final _xmlSchemaSetValidStructuredErrorsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(xmlSchemaValidCtxtPtr, xmlStructuredErrorFunc,
              ffi.Pointer<ffi.Void>)>>('xmlSchemaSetValidStructuredErrors');
  late final _xmlSchemaSetValidStructuredErrors =
      _xmlSchemaSetValidStructuredErrorsPtr.asFunction<
          void Function(xmlSchemaValidCtxtPtr, xmlStructuredErrorFunc,
              ffi.Pointer<ffi.Void>)>();

  int xmlSchemaGetValidErrors(
    xmlSchemaValidCtxtPtr ctxt,
    ffi.Pointer<xmlSchemaValidityErrorFunc> err,
    ffi.Pointer<xmlSchemaValidityWarningFunc> warn,
    ffi.Pointer<ffi.Pointer<ffi.Void>> ctx,
  ) {
    return _xmlSchemaGetValidErrors(
      ctxt,
      err,
      warn,
      ctx,
    );
  }

  late final _xmlSchemaGetValidErrorsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              xmlSchemaValidCtxtPtr,
              ffi.Pointer<xmlSchemaValidityErrorFunc>,
              ffi.Pointer<xmlSchemaValidityWarningFunc>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>>('xmlSchemaGetValidErrors');
  late final _xmlSchemaGetValidErrors = _xmlSchemaGetValidErrorsPtr.asFunction<
      int Function(
          xmlSchemaValidCtxtPtr,
          ffi.Pointer<xmlSchemaValidityErrorFunc>,
          ffi.Pointer<xmlSchemaValidityWarningFunc>,
          ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  int xmlSchemaSetValidOptions(
    xmlSchemaValidCtxtPtr ctxt,
    int options,
  ) {
    return _xmlSchemaSetValidOptions(
      ctxt,
      options,
    );
  }

  late final _xmlSchemaSetValidOptionsPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(xmlSchemaValidCtxtPtr, ffi.Int)>>(
      'xmlSchemaSetValidOptions');
  late final _xmlSchemaSetValidOptions = _xmlSchemaSetValidOptionsPtr
      .asFunction<int Function(xmlSchemaValidCtxtPtr, int)>();

  void xmlSchemaValidateSetFilename(
    xmlSchemaValidCtxtPtr vctxt,
    ffi.Pointer<ffi.Char> filename,
  ) {
    return _xmlSchemaValidateSetFilename(
      vctxt,
      filename,
    );
  }

  late final _xmlSchemaValidateSetFilenamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(xmlSchemaValidCtxtPtr,
              ffi.Pointer<ffi.Char>)>>('xmlSchemaValidateSetFilename');
  late final _xmlSchemaValidateSetFilename =
      _xmlSchemaValidateSetFilenamePtr.asFunction<
          void Function(xmlSchemaValidCtxtPtr, ffi.Pointer<ffi.Char>)>();

  int xmlSchemaValidCtxtGetOptions(
    xmlSchemaValidCtxtPtr ctxt,
  ) {
    return _xmlSchemaValidCtxtGetOptions(
      ctxt,
    );
  }

  late final _xmlSchemaValidCtxtGetOptionsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(xmlSchemaValidCtxtPtr)>>(
          'xmlSchemaValidCtxtGetOptions');
  late final _xmlSchemaValidCtxtGetOptions = _xmlSchemaValidCtxtGetOptionsPtr
      .asFunction<int Function(xmlSchemaValidCtxtPtr)>();

  xmlSchemaValidCtxtPtr xmlSchemaNewValidCtxt(
    xmlSchemaPtr schema,
  ) {
    return _xmlSchemaNewValidCtxt(
      schema,
    );
  }

  late final _xmlSchemaNewValidCtxtPtr =
      _lookup<ffi.NativeFunction<xmlSchemaValidCtxtPtr Function(xmlSchemaPtr)>>(
          'xmlSchemaNewValidCtxt');
  late final _xmlSchemaNewValidCtxt = _xmlSchemaNewValidCtxtPtr
      .asFunction<xmlSchemaValidCtxtPtr Function(xmlSchemaPtr)>();

  void xmlSchemaFreeValidCtxt(
    xmlSchemaValidCtxtPtr ctxt,
  ) {
    return _xmlSchemaFreeValidCtxt(
      ctxt,
    );
  }

  late final _xmlSchemaFreeValidCtxtPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(xmlSchemaValidCtxtPtr)>>(
          'xmlSchemaFreeValidCtxt');
  late final _xmlSchemaFreeValidCtxt = _xmlSchemaFreeValidCtxtPtr
      .asFunction<void Function(xmlSchemaValidCtxtPtr)>();

  int xmlSchemaValidateDoc(
    xmlSchemaValidCtxtPtr ctxt,
    xmlDocPtr instance,
  ) {
    return _xmlSchemaValidateDoc(
      ctxt,
      instance,
    );
  }

  late final _xmlSchemaValidateDocPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int Function(xmlSchemaValidCtxtPtr, xmlDocPtr)>>(
      'xmlSchemaValidateDoc');
  late final _xmlSchemaValidateDoc = _xmlSchemaValidateDocPtr
      .asFunction<int Function(xmlSchemaValidCtxtPtr, xmlDocPtr)>();

  int xmlSchemaValidateOneElement(
    xmlSchemaValidCtxtPtr ctxt,
    xmlNodePtr elem,
  ) {
    return _xmlSchemaValidateOneElement(
      ctxt,
      elem,
    );
  }

  late final _xmlSchemaValidateOneElementPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int Function(xmlSchemaValidCtxtPtr, xmlNodePtr)>>(
      'xmlSchemaValidateOneElement');
  late final _xmlSchemaValidateOneElement = _xmlSchemaValidateOneElementPtr
      .asFunction<int Function(xmlSchemaValidCtxtPtr, xmlNodePtr)>();

  int xmlSchemaValidateStream(
    xmlSchemaValidCtxtPtr ctxt,
    xmlParserInputBufferPtr input,
    int enc,
    xmlSAXHandlerPtr sax,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _xmlSchemaValidateStream(
      ctxt,
      input,
      enc,
      sax,
      user_data,
    );
  }

  late final _xmlSchemaValidateStreamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              xmlSchemaValidCtxtPtr,
              xmlParserInputBufferPtr,
              ffi.Int32,
              xmlSAXHandlerPtr,
              ffi.Pointer<ffi.Void>)>>('xmlSchemaValidateStream');
  late final _xmlSchemaValidateStream = _xmlSchemaValidateStreamPtr.asFunction<
      int Function(xmlSchemaValidCtxtPtr, xmlParserInputBufferPtr, int,
          xmlSAXHandlerPtr, ffi.Pointer<ffi.Void>)>();

  int xmlSchemaValidateFile(
    xmlSchemaValidCtxtPtr ctxt,
    ffi.Pointer<ffi.Char> filename,
    int options,
  ) {
    return _xmlSchemaValidateFile(
      ctxt,
      filename,
      options,
    );
  }

  late final _xmlSchemaValidateFilePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(xmlSchemaValidCtxtPtr, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('xmlSchemaValidateFile');
  late final _xmlSchemaValidateFile = _xmlSchemaValidateFilePtr.asFunction<
      int Function(xmlSchemaValidCtxtPtr, ffi.Pointer<ffi.Char>, int)>();

  xmlParserCtxtPtr xmlSchemaValidCtxtGetParserCtxt(
    xmlSchemaValidCtxtPtr ctxt,
  ) {
    return _xmlSchemaValidCtxtGetParserCtxt(
      ctxt,
    );
  }

  late final _xmlSchemaValidCtxtGetParserCtxtPtr = _lookup<
          ffi.NativeFunction<xmlParserCtxtPtr Function(xmlSchemaValidCtxtPtr)>>(
      'xmlSchemaValidCtxtGetParserCtxt');
  late final _xmlSchemaValidCtxtGetParserCtxt =
      _xmlSchemaValidCtxtGetParserCtxtPtr
          .asFunction<xmlParserCtxtPtr Function(xmlSchemaValidCtxtPtr)>();

  xmlSchemaSAXPlugPtr xmlSchemaSAXPlug(
    xmlSchemaValidCtxtPtr ctxt,
    ffi.Pointer<xmlSAXHandlerPtr> sax,
    ffi.Pointer<ffi.Pointer<ffi.Void>> user_data,
  ) {
    return _xmlSchemaSAXPlug(
      ctxt,
      sax,
      user_data,
    );
  }

  late final _xmlSchemaSAXPlugPtr = _lookup<
      ffi.NativeFunction<
          xmlSchemaSAXPlugPtr Function(
              xmlSchemaValidCtxtPtr,
              ffi.Pointer<xmlSAXHandlerPtr>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>>('xmlSchemaSAXPlug');
  late final _xmlSchemaSAXPlug = _xmlSchemaSAXPlugPtr.asFunction<
      xmlSchemaSAXPlugPtr Function(xmlSchemaValidCtxtPtr,
          ffi.Pointer<xmlSAXHandlerPtr>, ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  int xmlSchemaSAXUnplug(
    xmlSchemaSAXPlugPtr plug,
  ) {
    return _xmlSchemaSAXUnplug(
      plug,
    );
  }

  late final _xmlSchemaSAXUnplugPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(xmlSchemaSAXPlugPtr)>>(
          'xmlSchemaSAXUnplug');
  late final _xmlSchemaSAXUnplug =
      _xmlSchemaSAXUnplugPtr.asFunction<int Function(xmlSchemaSAXPlugPtr)>();

  void xmlSchemaValidateSetLocator(
    xmlSchemaValidCtxtPtr vctxt,
    xmlSchemaValidityLocatorFunc f,
    ffi.Pointer<ffi.Void> ctxt,
  ) {
    return _xmlSchemaValidateSetLocator(
      vctxt,
      f,
      ctxt,
    );
  }

  late final _xmlSchemaValidateSetLocatorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(xmlSchemaValidCtxtPtr, xmlSchemaValidityLocatorFunc,
              ffi.Pointer<ffi.Void>)>>('xmlSchemaValidateSetLocator');
  late final _xmlSchemaValidateSetLocator =
      _xmlSchemaValidateSetLocatorPtr.asFunction<
          void Function(xmlSchemaValidCtxtPtr, xmlSchemaValidityLocatorFunc,
              ffi.Pointer<ffi.Void>)>();

  xmlTextReaderPtr xmlNewTextReader(
    xmlParserInputBufferPtr input,
    ffi.Pointer<ffi.Char> URI,
  ) {
    return _xmlNewTextReader(
      input,
      URI,
    );
  }

  late final _xmlNewTextReaderPtr = _lookup<
      ffi.NativeFunction<
          xmlTextReaderPtr Function(xmlParserInputBufferPtr,
              ffi.Pointer<ffi.Char>)>>('xmlNewTextReader');
  late final _xmlNewTextReader = _xmlNewTextReaderPtr.asFunction<
      xmlTextReaderPtr Function(
          xmlParserInputBufferPtr, ffi.Pointer<ffi.Char>)>();

  xmlTextReaderPtr xmlNewTextReaderFilename(
    ffi.Pointer<ffi.Char> URI,
  ) {
    return _xmlNewTextReaderFilename(
      URI,
    );
  }

  late final _xmlNewTextReaderFilenamePtr = _lookup<
          ffi.NativeFunction<xmlTextReaderPtr Function(ffi.Pointer<ffi.Char>)>>(
      'xmlNewTextReaderFilename');
  late final _xmlNewTextReaderFilename = _xmlNewTextReaderFilenamePtr
      .asFunction<xmlTextReaderPtr Function(ffi.Pointer<ffi.Char>)>();

  void xmlFreeTextReader(
    xmlTextReaderPtr reader,
  ) {
    return _xmlFreeTextReader(
      reader,
    );
  }

  late final _xmlFreeTextReaderPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(xmlTextReaderPtr)>>(
          'xmlFreeTextReader');
  late final _xmlFreeTextReader =
      _xmlFreeTextReaderPtr.asFunction<void Function(xmlTextReaderPtr)>();

  int xmlTextReaderSetup(
    xmlTextReaderPtr reader,
    xmlParserInputBufferPtr input,
    ffi.Pointer<ffi.Char> URL,
    ffi.Pointer<ffi.Char> encoding,
    int options,
  ) {
    return _xmlTextReaderSetup(
      reader,
      input,
      URL,
      encoding,
      options,
    );
  }

  late final _xmlTextReaderSetupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              xmlTextReaderPtr,
              xmlParserInputBufferPtr,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Int)>>('xmlTextReaderSetup');
  late final _xmlTextReaderSetup = _xmlTextReaderSetupPtr.asFunction<
      int Function(xmlTextReaderPtr, xmlParserInputBufferPtr,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int xmlTextReaderRead(
    xmlTextReaderPtr reader,
  ) {
    return _xmlTextReaderRead(
      reader,
    );
  }

  late final _xmlTextReaderReadPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(xmlTextReaderPtr)>>(
          'xmlTextReaderRead');
  late final _xmlTextReaderRead =
      _xmlTextReaderReadPtr.asFunction<int Function(xmlTextReaderPtr)>();

  ffi.Pointer<xmlChar> xmlTextReaderReadInnerXml(
    xmlTextReaderPtr reader,
  ) {
    return _xmlTextReaderReadInnerXml(
      reader,
    );
  }

  late final _xmlTextReaderReadInnerXmlPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<xmlChar> Function(xmlTextReaderPtr)>>(
      'xmlTextReaderReadInnerXml');
  late final _xmlTextReaderReadInnerXml = _xmlTextReaderReadInnerXmlPtr
      .asFunction<ffi.Pointer<xmlChar> Function(xmlTextReaderPtr)>();

  ffi.Pointer<xmlChar> xmlTextReaderReadOuterXml(
    xmlTextReaderPtr reader,
  ) {
    return _xmlTextReaderReadOuterXml(
      reader,
    );
  }

  late final _xmlTextReaderReadOuterXmlPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<xmlChar> Function(xmlTextReaderPtr)>>(
      'xmlTextReaderReadOuterXml');
  late final _xmlTextReaderReadOuterXml = _xmlTextReaderReadOuterXmlPtr
      .asFunction<ffi.Pointer<xmlChar> Function(xmlTextReaderPtr)>();

  ffi.Pointer<xmlChar> xmlTextReaderReadString(
    xmlTextReaderPtr reader,
  ) {
    return _xmlTextReaderReadString(
      reader,
    );
  }

  late final _xmlTextReaderReadStringPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<xmlChar> Function(xmlTextReaderPtr)>>(
      'xmlTextReaderReadString');
  late final _xmlTextReaderReadString = _xmlTextReaderReadStringPtr
      .asFunction<ffi.Pointer<xmlChar> Function(xmlTextReaderPtr)>();

  int xmlTextReaderReadAttributeValue(
    xmlTextReaderPtr reader,
  ) {
    return _xmlTextReaderReadAttributeValue(
      reader,
    );
  }

  late final _xmlTextReaderReadAttributeValuePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(xmlTextReaderPtr)>>(
          'xmlTextReaderReadAttributeValue');
  late final _xmlTextReaderReadAttributeValue =
      _xmlTextReaderReadAttributeValuePtr
          .asFunction<int Function(xmlTextReaderPtr)>();

  int xmlTextReaderAttributeCount(
    xmlTextReaderPtr reader,
  ) {
    return _xmlTextReaderAttributeCount(
      reader,
    );
  }

  late final _xmlTextReaderAttributeCountPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(xmlTextReaderPtr)>>(
          'xmlTextReaderAttributeCount');
  late final _xmlTextReaderAttributeCount = _xmlTextReaderAttributeCountPtr
      .asFunction<int Function(xmlTextReaderPtr)>();

  int xmlTextReaderDepth(
    xmlTextReaderPtr reader,
  ) {
    return _xmlTextReaderDepth(
      reader,
    );
  }

  late final _xmlTextReaderDepthPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(xmlTextReaderPtr)>>(
          'xmlTextReaderDepth');
  late final _xmlTextReaderDepth =
      _xmlTextReaderDepthPtr.asFunction<int Function(xmlTextReaderPtr)>();

  int xmlTextReaderHasAttributes(
    xmlTextReaderPtr reader,
  ) {
    return _xmlTextReaderHasAttributes(
      reader,
    );
  }

  late final _xmlTextReaderHasAttributesPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(xmlTextReaderPtr)>>(
          'xmlTextReaderHasAttributes');
  late final _xmlTextReaderHasAttributes = _xmlTextReaderHasAttributesPtr
      .asFunction<int Function(xmlTextReaderPtr)>();

  int xmlTextReaderHasValue(
    xmlTextReaderPtr reader,
  ) {
    return _xmlTextReaderHasValue(
      reader,
    );
  }

  late final _xmlTextReaderHasValuePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(xmlTextReaderPtr)>>(
          'xmlTextReaderHasValue');
  late final _xmlTextReaderHasValue =
      _xmlTextReaderHasValuePtr.asFunction<int Function(xmlTextReaderPtr)>();

  int xmlTextReaderIsDefault(
    xmlTextReaderPtr reader,
  ) {
    return _xmlTextReaderIsDefault(
      reader,
    );
  }

  late final _xmlTextReaderIsDefaultPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(xmlTextReaderPtr)>>(
          'xmlTextReaderIsDefault');
  late final _xmlTextReaderIsDefault =
      _xmlTextReaderIsDefaultPtr.asFunction<int Function(xmlTextReaderPtr)>();

  int xmlTextReaderIsEmptyElement(
    xmlTextReaderPtr reader,
  ) {
    return _xmlTextReaderIsEmptyElement(
      reader,
    );
  }

  late final _xmlTextReaderIsEmptyElementPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(xmlTextReaderPtr)>>(
          'xmlTextReaderIsEmptyElement');
  late final _xmlTextReaderIsEmptyElement = _xmlTextReaderIsEmptyElementPtr
      .asFunction<int Function(xmlTextReaderPtr)>();

  int xmlTextReaderNodeType(
    xmlTextReaderPtr reader,
  ) {
    return _xmlTextReaderNodeType(
      reader,
    );
  }

  late final _xmlTextReaderNodeTypePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(xmlTextReaderPtr)>>(
          'xmlTextReaderNodeType');
  late final _xmlTextReaderNodeType =
      _xmlTextReaderNodeTypePtr.asFunction<int Function(xmlTextReaderPtr)>();

  int xmlTextReaderQuoteChar(
    xmlTextReaderPtr reader,
  ) {
    return _xmlTextReaderQuoteChar(
      reader,
    );
  }

  late final _xmlTextReaderQuoteCharPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(xmlTextReaderPtr)>>(
          'xmlTextReaderQuoteChar');
  late final _xmlTextReaderQuoteChar =
      _xmlTextReaderQuoteCharPtr.asFunction<int Function(xmlTextReaderPtr)>();

  int xmlTextReaderReadState(
    xmlTextReaderPtr reader,
  ) {
    return _xmlTextReaderReadState(
      reader,
    );
  }

  late final _xmlTextReaderReadStatePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(xmlTextReaderPtr)>>(
          'xmlTextReaderReadState');
  late final _xmlTextReaderReadState =
      _xmlTextReaderReadStatePtr.asFunction<int Function(xmlTextReaderPtr)>();

  int xmlTextReaderIsNamespaceDecl(
    xmlTextReaderPtr reader,
  ) {
    return _xmlTextReaderIsNamespaceDecl(
      reader,
    );
  }

  late final _xmlTextReaderIsNamespaceDeclPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(xmlTextReaderPtr)>>(
          'xmlTextReaderIsNamespaceDecl');
  late final _xmlTextReaderIsNamespaceDecl = _xmlTextReaderIsNamespaceDeclPtr
      .asFunction<int Function(xmlTextReaderPtr)>();

  ffi.Pointer<xmlChar> xmlTextReaderConstBaseUri(
    xmlTextReaderPtr reader,
  ) {
    return _xmlTextReaderConstBaseUri(
      reader,
    );
  }

  late final _xmlTextReaderConstBaseUriPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<xmlChar> Function(xmlTextReaderPtr)>>(
      'xmlTextReaderConstBaseUri');
  late final _xmlTextReaderConstBaseUri = _xmlTextReaderConstBaseUriPtr
      .asFunction<ffi.Pointer<xmlChar> Function(xmlTextReaderPtr)>();

  ffi.Pointer<xmlChar> xmlTextReaderConstLocalName(
    xmlTextReaderPtr reader,
  ) {
    return _xmlTextReaderConstLocalName(
      reader,
    );
  }

  late final _xmlTextReaderConstLocalNamePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<xmlChar> Function(xmlTextReaderPtr)>>(
      'xmlTextReaderConstLocalName');
  late final _xmlTextReaderConstLocalName = _xmlTextReaderConstLocalNamePtr
      .asFunction<ffi.Pointer<xmlChar> Function(xmlTextReaderPtr)>();

  ffi.Pointer<xmlChar> xmlTextReaderConstName(
    xmlTextReaderPtr reader,
  ) {
    return _xmlTextReaderConstName(
      reader,
    );
  }

  late final _xmlTextReaderConstNamePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<xmlChar> Function(xmlTextReaderPtr)>>(
      'xmlTextReaderConstName');
  late final _xmlTextReaderConstName = _xmlTextReaderConstNamePtr
      .asFunction<ffi.Pointer<xmlChar> Function(xmlTextReaderPtr)>();

  ffi.Pointer<xmlChar> xmlTextReaderConstNamespaceUri(
    xmlTextReaderPtr reader,
  ) {
    return _xmlTextReaderConstNamespaceUri(
      reader,
    );
  }

  late final _xmlTextReaderConstNamespaceUriPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<xmlChar> Function(xmlTextReaderPtr)>>(
      'xmlTextReaderConstNamespaceUri');
  late final _xmlTextReaderConstNamespaceUri =
      _xmlTextReaderConstNamespaceUriPtr
          .asFunction<ffi.Pointer<xmlChar> Function(xmlTextReaderPtr)>();

  ffi.Pointer<xmlChar> xmlTextReaderConstPrefix(
    xmlTextReaderPtr reader,
  ) {
    return _xmlTextReaderConstPrefix(
      reader,
    );
  }

  late final _xmlTextReaderConstPrefixPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<xmlChar> Function(xmlTextReaderPtr)>>(
      'xmlTextReaderConstPrefix');
  late final _xmlTextReaderConstPrefix = _xmlTextReaderConstPrefixPtr
      .asFunction<ffi.Pointer<xmlChar> Function(xmlTextReaderPtr)>();

  ffi.Pointer<xmlChar> xmlTextReaderConstXmlLang(
    xmlTextReaderPtr reader,
  ) {
    return _xmlTextReaderConstXmlLang(
      reader,
    );
  }

  late final _xmlTextReaderConstXmlLangPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<xmlChar> Function(xmlTextReaderPtr)>>(
      'xmlTextReaderConstXmlLang');
  late final _xmlTextReaderConstXmlLang = _xmlTextReaderConstXmlLangPtr
      .asFunction<ffi.Pointer<xmlChar> Function(xmlTextReaderPtr)>();

  ffi.Pointer<xmlChar> xmlTextReaderConstString(
    xmlTextReaderPtr reader,
    ffi.Pointer<xmlChar> str,
  ) {
    return _xmlTextReaderConstString(
      reader,
      str,
    );
  }

  late final _xmlTextReaderConstStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<xmlChar> Function(xmlTextReaderPtr,
              ffi.Pointer<xmlChar>)>>('xmlTextReaderConstString');
  late final _xmlTextReaderConstString =
      _xmlTextReaderConstStringPtr.asFunction<
          ffi.Pointer<xmlChar> Function(
              xmlTextReaderPtr, ffi.Pointer<xmlChar>)>();

  ffi.Pointer<xmlChar> xmlTextReaderConstValue(
    xmlTextReaderPtr reader,
  ) {
    return _xmlTextReaderConstValue(
      reader,
    );
  }

  late final _xmlTextReaderConstValuePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<xmlChar> Function(xmlTextReaderPtr)>>(
      'xmlTextReaderConstValue');
  late final _xmlTextReaderConstValue = _xmlTextReaderConstValuePtr
      .asFunction<ffi.Pointer<xmlChar> Function(xmlTextReaderPtr)>();

  ffi.Pointer<xmlChar> xmlTextReaderBaseUri(
    xmlTextReaderPtr reader,
  ) {
    return _xmlTextReaderBaseUri(
      reader,
    );
  }

  late final _xmlTextReaderBaseUriPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<xmlChar> Function(xmlTextReaderPtr)>>(
      'xmlTextReaderBaseUri');
  late final _xmlTextReaderBaseUri = _xmlTextReaderBaseUriPtr
      .asFunction<ffi.Pointer<xmlChar> Function(xmlTextReaderPtr)>();

  ffi.Pointer<xmlChar> xmlTextReaderLocalName(
    xmlTextReaderPtr reader,
  ) {
    return _xmlTextReaderLocalName(
      reader,
    );
  }

  late final _xmlTextReaderLocalNamePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<xmlChar> Function(xmlTextReaderPtr)>>(
      'xmlTextReaderLocalName');
  late final _xmlTextReaderLocalName = _xmlTextReaderLocalNamePtr
      .asFunction<ffi.Pointer<xmlChar> Function(xmlTextReaderPtr)>();

  ffi.Pointer<xmlChar> xmlTextReaderName(
    xmlTextReaderPtr reader,
  ) {
    return _xmlTextReaderName(
      reader,
    );
  }

  late final _xmlTextReaderNamePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<xmlChar> Function(xmlTextReaderPtr)>>(
      'xmlTextReaderName');
  late final _xmlTextReaderName = _xmlTextReaderNamePtr
      .asFunction<ffi.Pointer<xmlChar> Function(xmlTextReaderPtr)>();

  ffi.Pointer<xmlChar> xmlTextReaderNamespaceUri(
    xmlTextReaderPtr reader,
  ) {
    return _xmlTextReaderNamespaceUri(
      reader,
    );
  }

  late final _xmlTextReaderNamespaceUriPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<xmlChar> Function(xmlTextReaderPtr)>>(
      'xmlTextReaderNamespaceUri');
  late final _xmlTextReaderNamespaceUri = _xmlTextReaderNamespaceUriPtr
      .asFunction<ffi.Pointer<xmlChar> Function(xmlTextReaderPtr)>();

  ffi.Pointer<xmlChar> xmlTextReaderPrefix(
    xmlTextReaderPtr reader,
  ) {
    return _xmlTextReaderPrefix(
      reader,
    );
  }

  late final _xmlTextReaderPrefixPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<xmlChar> Function(xmlTextReaderPtr)>>(
      'xmlTextReaderPrefix');
  late final _xmlTextReaderPrefix = _xmlTextReaderPrefixPtr
      .asFunction<ffi.Pointer<xmlChar> Function(xmlTextReaderPtr)>();

  ffi.Pointer<xmlChar> xmlTextReaderXmlLang(
    xmlTextReaderPtr reader,
  ) {
    return _xmlTextReaderXmlLang(
      reader,
    );
  }

  late final _xmlTextReaderXmlLangPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<xmlChar> Function(xmlTextReaderPtr)>>(
      'xmlTextReaderXmlLang');
  late final _xmlTextReaderXmlLang = _xmlTextReaderXmlLangPtr
      .asFunction<ffi.Pointer<xmlChar> Function(xmlTextReaderPtr)>();

  ffi.Pointer<xmlChar> xmlTextReaderValue(
    xmlTextReaderPtr reader,
  ) {
    return _xmlTextReaderValue(
      reader,
    );
  }

  late final _xmlTextReaderValuePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<xmlChar> Function(xmlTextReaderPtr)>>(
      'xmlTextReaderValue');
  late final _xmlTextReaderValue = _xmlTextReaderValuePtr
      .asFunction<ffi.Pointer<xmlChar> Function(xmlTextReaderPtr)>();

  int xmlTextReaderClose(
    xmlTextReaderPtr reader,
  ) {
    return _xmlTextReaderClose(
      reader,
    );
  }

  late final _xmlTextReaderClosePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(xmlTextReaderPtr)>>(
          'xmlTextReaderClose');
  late final _xmlTextReaderClose =
      _xmlTextReaderClosePtr.asFunction<int Function(xmlTextReaderPtr)>();

  ffi.Pointer<xmlChar> xmlTextReaderGetAttributeNo(
    xmlTextReaderPtr reader,
    int no,
  ) {
    return _xmlTextReaderGetAttributeNo(
      reader,
      no,
    );
  }

  late final _xmlTextReaderGetAttributeNoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<xmlChar> Function(
              xmlTextReaderPtr, ffi.Int)>>('xmlTextReaderGetAttributeNo');
  late final _xmlTextReaderGetAttributeNo = _xmlTextReaderGetAttributeNoPtr
      .asFunction<ffi.Pointer<xmlChar> Function(xmlTextReaderPtr, int)>();

  ffi.Pointer<xmlChar> xmlTextReaderGetAttribute(
    xmlTextReaderPtr reader,
    ffi.Pointer<xmlChar> name,
  ) {
    return _xmlTextReaderGetAttribute(
      reader,
      name,
    );
  }

  late final _xmlTextReaderGetAttributePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<xmlChar> Function(xmlTextReaderPtr,
              ffi.Pointer<xmlChar>)>>('xmlTextReaderGetAttribute');
  late final _xmlTextReaderGetAttribute =
      _xmlTextReaderGetAttributePtr.asFunction<
          ffi.Pointer<xmlChar> Function(
              xmlTextReaderPtr, ffi.Pointer<xmlChar>)>();

  ffi.Pointer<xmlChar> xmlTextReaderGetAttributeNs(
    xmlTextReaderPtr reader,
    ffi.Pointer<xmlChar> localName,
    ffi.Pointer<xmlChar> namespaceURI,
  ) {
    return _xmlTextReaderGetAttributeNs(
      reader,
      localName,
      namespaceURI,
    );
  }

  late final _xmlTextReaderGetAttributeNsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<xmlChar> Function(xmlTextReaderPtr, ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>)>>('xmlTextReaderGetAttributeNs');
  late final _xmlTextReaderGetAttributeNs =
      _xmlTextReaderGetAttributeNsPtr.asFunction<
          ffi.Pointer<xmlChar> Function(
              xmlTextReaderPtr, ffi.Pointer<xmlChar>, ffi.Pointer<xmlChar>)>();

  xmlParserInputBufferPtr xmlTextReaderGetRemainder(
    xmlTextReaderPtr reader,
  ) {
    return _xmlTextReaderGetRemainder(
      reader,
    );
  }

  late final _xmlTextReaderGetRemainderPtr = _lookup<
          ffi
          .NativeFunction<xmlParserInputBufferPtr Function(xmlTextReaderPtr)>>(
      'xmlTextReaderGetRemainder');
  late final _xmlTextReaderGetRemainder = _xmlTextReaderGetRemainderPtr
      .asFunction<xmlParserInputBufferPtr Function(xmlTextReaderPtr)>();

  ffi.Pointer<xmlChar> xmlTextReaderLookupNamespace(
    xmlTextReaderPtr reader,
    ffi.Pointer<xmlChar> prefix,
  ) {
    return _xmlTextReaderLookupNamespace(
      reader,
      prefix,
    );
  }

  late final _xmlTextReaderLookupNamespacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<xmlChar> Function(xmlTextReaderPtr,
              ffi.Pointer<xmlChar>)>>('xmlTextReaderLookupNamespace');
  late final _xmlTextReaderLookupNamespace =
      _xmlTextReaderLookupNamespacePtr.asFunction<
          ffi.Pointer<xmlChar> Function(
              xmlTextReaderPtr, ffi.Pointer<xmlChar>)>();

  int xmlTextReaderMoveToAttributeNo(
    xmlTextReaderPtr reader,
    int no,
  ) {
    return _xmlTextReaderMoveToAttributeNo(
      reader,
      no,
    );
  }

  late final _xmlTextReaderMoveToAttributeNoPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(xmlTextReaderPtr, ffi.Int)>>(
          'xmlTextReaderMoveToAttributeNo');
  late final _xmlTextReaderMoveToAttributeNo =
      _xmlTextReaderMoveToAttributeNoPtr
          .asFunction<int Function(xmlTextReaderPtr, int)>();

  int xmlTextReaderMoveToAttribute(
    xmlTextReaderPtr reader,
    ffi.Pointer<xmlChar> name,
  ) {
    return _xmlTextReaderMoveToAttribute(
      reader,
      name,
    );
  }

  late final _xmlTextReaderMoveToAttributePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(xmlTextReaderPtr,
              ffi.Pointer<xmlChar>)>>('xmlTextReaderMoveToAttribute');
  late final _xmlTextReaderMoveToAttribute = _xmlTextReaderMoveToAttributePtr
      .asFunction<int Function(xmlTextReaderPtr, ffi.Pointer<xmlChar>)>();

  int xmlTextReaderMoveToAttributeNs(
    xmlTextReaderPtr reader,
    ffi.Pointer<xmlChar> localName,
    ffi.Pointer<xmlChar> namespaceURI,
  ) {
    return _xmlTextReaderMoveToAttributeNs(
      reader,
      localName,
      namespaceURI,
    );
  }

  late final _xmlTextReaderMoveToAttributeNsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(xmlTextReaderPtr, ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>)>>('xmlTextReaderMoveToAttributeNs');
  late final _xmlTextReaderMoveToAttributeNs =
      _xmlTextReaderMoveToAttributeNsPtr.asFunction<
          int Function(
              xmlTextReaderPtr, ffi.Pointer<xmlChar>, ffi.Pointer<xmlChar>)>();

  int xmlTextReaderMoveToFirstAttribute(
    xmlTextReaderPtr reader,
  ) {
    return _xmlTextReaderMoveToFirstAttribute(
      reader,
    );
  }

  late final _xmlTextReaderMoveToFirstAttributePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(xmlTextReaderPtr)>>(
          'xmlTextReaderMoveToFirstAttribute');
  late final _xmlTextReaderMoveToFirstAttribute =
      _xmlTextReaderMoveToFirstAttributePtr
          .asFunction<int Function(xmlTextReaderPtr)>();

  int xmlTextReaderMoveToNextAttribute(
    xmlTextReaderPtr reader,
  ) {
    return _xmlTextReaderMoveToNextAttribute(
      reader,
    );
  }

  late final _xmlTextReaderMoveToNextAttributePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(xmlTextReaderPtr)>>(
          'xmlTextReaderMoveToNextAttribute');
  late final _xmlTextReaderMoveToNextAttribute =
      _xmlTextReaderMoveToNextAttributePtr
          .asFunction<int Function(xmlTextReaderPtr)>();

  int xmlTextReaderMoveToElement(
    xmlTextReaderPtr reader,
  ) {
    return _xmlTextReaderMoveToElement(
      reader,
    );
  }

  late final _xmlTextReaderMoveToElementPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(xmlTextReaderPtr)>>(
          'xmlTextReaderMoveToElement');
  late final _xmlTextReaderMoveToElement = _xmlTextReaderMoveToElementPtr
      .asFunction<int Function(xmlTextReaderPtr)>();

  int xmlTextReaderNormalization(
    xmlTextReaderPtr reader,
  ) {
    return _xmlTextReaderNormalization(
      reader,
    );
  }

  late final _xmlTextReaderNormalizationPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(xmlTextReaderPtr)>>(
          'xmlTextReaderNormalization');
  late final _xmlTextReaderNormalization = _xmlTextReaderNormalizationPtr
      .asFunction<int Function(xmlTextReaderPtr)>();

  ffi.Pointer<xmlChar> xmlTextReaderConstEncoding(
    xmlTextReaderPtr reader,
  ) {
    return _xmlTextReaderConstEncoding(
      reader,
    );
  }

  late final _xmlTextReaderConstEncodingPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<xmlChar> Function(xmlTextReaderPtr)>>(
      'xmlTextReaderConstEncoding');
  late final _xmlTextReaderConstEncoding = _xmlTextReaderConstEncodingPtr
      .asFunction<ffi.Pointer<xmlChar> Function(xmlTextReaderPtr)>();

  int xmlTextReaderSetParserProp(
    xmlTextReaderPtr reader,
    int prop,
    int value,
  ) {
    return _xmlTextReaderSetParserProp(
      reader,
      prop,
      value,
    );
  }

  late final _xmlTextReaderSetParserPropPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(xmlTextReaderPtr, ffi.Int,
              ffi.Int)>>('xmlTextReaderSetParserProp');
  late final _xmlTextReaderSetParserProp = _xmlTextReaderSetParserPropPtr
      .asFunction<int Function(xmlTextReaderPtr, int, int)>();

  int xmlTextReaderGetParserProp(
    xmlTextReaderPtr reader,
    int prop,
  ) {
    return _xmlTextReaderGetParserProp(
      reader,
      prop,
    );
  }

  late final _xmlTextReaderGetParserPropPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(xmlTextReaderPtr, ffi.Int)>>(
          'xmlTextReaderGetParserProp');
  late final _xmlTextReaderGetParserProp = _xmlTextReaderGetParserPropPtr
      .asFunction<int Function(xmlTextReaderPtr, int)>();

  xmlNodePtr xmlTextReaderCurrentNode(
    xmlTextReaderPtr reader,
  ) {
    return _xmlTextReaderCurrentNode(
      reader,
    );
  }

  late final _xmlTextReaderCurrentNodePtr =
      _lookup<ffi.NativeFunction<xmlNodePtr Function(xmlTextReaderPtr)>>(
          'xmlTextReaderCurrentNode');
  late final _xmlTextReaderCurrentNode = _xmlTextReaderCurrentNodePtr
      .asFunction<xmlNodePtr Function(xmlTextReaderPtr)>();

  int xmlTextReaderGetParserLineNumber(
    xmlTextReaderPtr reader,
  ) {
    return _xmlTextReaderGetParserLineNumber(
      reader,
    );
  }

  late final _xmlTextReaderGetParserLineNumberPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(xmlTextReaderPtr)>>(
          'xmlTextReaderGetParserLineNumber');
  late final _xmlTextReaderGetParserLineNumber =
      _xmlTextReaderGetParserLineNumberPtr
          .asFunction<int Function(xmlTextReaderPtr)>();

  int xmlTextReaderGetParserColumnNumber(
    xmlTextReaderPtr reader,
  ) {
    return _xmlTextReaderGetParserColumnNumber(
      reader,
    );
  }

  late final _xmlTextReaderGetParserColumnNumberPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(xmlTextReaderPtr)>>(
          'xmlTextReaderGetParserColumnNumber');
  late final _xmlTextReaderGetParserColumnNumber =
      _xmlTextReaderGetParserColumnNumberPtr
          .asFunction<int Function(xmlTextReaderPtr)>();

  xmlNodePtr xmlTextReaderPreserve(
    xmlTextReaderPtr reader,
  ) {
    return _xmlTextReaderPreserve(
      reader,
    );
  }

  late final _xmlTextReaderPreservePtr =
      _lookup<ffi.NativeFunction<xmlNodePtr Function(xmlTextReaderPtr)>>(
          'xmlTextReaderPreserve');
  late final _xmlTextReaderPreserve = _xmlTextReaderPreservePtr
      .asFunction<xmlNodePtr Function(xmlTextReaderPtr)>();

  int xmlTextReaderPreservePattern(
    xmlTextReaderPtr reader,
    ffi.Pointer<xmlChar> pattern,
    ffi.Pointer<ffi.Pointer<xmlChar>> namespaces,
  ) {
    return _xmlTextReaderPreservePattern(
      reader,
      pattern,
      namespaces,
    );
  }

  late final _xmlTextReaderPreservePatternPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(xmlTextReaderPtr, ffi.Pointer<xmlChar>,
                  ffi.Pointer<ffi.Pointer<xmlChar>>)>>(
      'xmlTextReaderPreservePattern');
  late final _xmlTextReaderPreservePattern =
      _xmlTextReaderPreservePatternPtr.asFunction<
          int Function(xmlTextReaderPtr, ffi.Pointer<xmlChar>,
              ffi.Pointer<ffi.Pointer<xmlChar>>)>();

  xmlDocPtr xmlTextReaderCurrentDoc(
    xmlTextReaderPtr reader,
  ) {
    return _xmlTextReaderCurrentDoc(
      reader,
    );
  }

  late final _xmlTextReaderCurrentDocPtr =
      _lookup<ffi.NativeFunction<xmlDocPtr Function(xmlTextReaderPtr)>>(
          'xmlTextReaderCurrentDoc');
  late final _xmlTextReaderCurrentDoc = _xmlTextReaderCurrentDocPtr
      .asFunction<xmlDocPtr Function(xmlTextReaderPtr)>();

  xmlNodePtr xmlTextReaderExpand(
    xmlTextReaderPtr reader,
  ) {
    return _xmlTextReaderExpand(
      reader,
    );
  }

  late final _xmlTextReaderExpandPtr =
      _lookup<ffi.NativeFunction<xmlNodePtr Function(xmlTextReaderPtr)>>(
          'xmlTextReaderExpand');
  late final _xmlTextReaderExpand = _xmlTextReaderExpandPtr
      .asFunction<xmlNodePtr Function(xmlTextReaderPtr)>();

  int xmlTextReaderNext(
    xmlTextReaderPtr reader,
  ) {
    return _xmlTextReaderNext(
      reader,
    );
  }

  late final _xmlTextReaderNextPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(xmlTextReaderPtr)>>(
          'xmlTextReaderNext');
  late final _xmlTextReaderNext =
      _xmlTextReaderNextPtr.asFunction<int Function(xmlTextReaderPtr)>();

  int xmlTextReaderNextSibling(
    xmlTextReaderPtr reader,
  ) {
    return _xmlTextReaderNextSibling(
      reader,
    );
  }

  late final _xmlTextReaderNextSiblingPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(xmlTextReaderPtr)>>(
          'xmlTextReaderNextSibling');
  late final _xmlTextReaderNextSibling =
      _xmlTextReaderNextSiblingPtr.asFunction<int Function(xmlTextReaderPtr)>();

  int xmlTextReaderIsValid(
    xmlTextReaderPtr reader,
  ) {
    return _xmlTextReaderIsValid(
      reader,
    );
  }

  late final _xmlTextReaderIsValidPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(xmlTextReaderPtr)>>(
          'xmlTextReaderIsValid');
  late final _xmlTextReaderIsValid =
      _xmlTextReaderIsValidPtr.asFunction<int Function(xmlTextReaderPtr)>();

  int xmlTextReaderRelaxNGValidate(
    xmlTextReaderPtr reader,
    ffi.Pointer<ffi.Char> rng,
  ) {
    return _xmlTextReaderRelaxNGValidate(
      reader,
      rng,
    );
  }

  late final _xmlTextReaderRelaxNGValidatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(xmlTextReaderPtr,
              ffi.Pointer<ffi.Char>)>>('xmlTextReaderRelaxNGValidate');
  late final _xmlTextReaderRelaxNGValidate = _xmlTextReaderRelaxNGValidatePtr
      .asFunction<int Function(xmlTextReaderPtr, ffi.Pointer<ffi.Char>)>();

  int xmlTextReaderRelaxNGValidateCtxt(
    xmlTextReaderPtr reader,
    xmlRelaxNGValidCtxtPtr ctxt,
    int options,
  ) {
    return _xmlTextReaderRelaxNGValidateCtxt(
      reader,
      ctxt,
      options,
    );
  }

  late final _xmlTextReaderRelaxNGValidateCtxtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(xmlTextReaderPtr, xmlRelaxNGValidCtxtPtr,
              ffi.Int)>>('xmlTextReaderRelaxNGValidateCtxt');
  late final _xmlTextReaderRelaxNGValidateCtxt =
      _xmlTextReaderRelaxNGValidateCtxtPtr.asFunction<
          int Function(xmlTextReaderPtr, xmlRelaxNGValidCtxtPtr, int)>();

  int xmlTextReaderRelaxNGSetSchema(
    xmlTextReaderPtr reader,
    xmlRelaxNGPtr schema,
  ) {
    return _xmlTextReaderRelaxNGSetSchema(
      reader,
      schema,
    );
  }

  late final _xmlTextReaderRelaxNGSetSchemaPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int Function(xmlTextReaderPtr, xmlRelaxNGPtr)>>(
      'xmlTextReaderRelaxNGSetSchema');
  late final _xmlTextReaderRelaxNGSetSchema = _xmlTextReaderRelaxNGSetSchemaPtr
      .asFunction<int Function(xmlTextReaderPtr, xmlRelaxNGPtr)>();

  int xmlTextReaderSchemaValidate(
    xmlTextReaderPtr reader,
    ffi.Pointer<ffi.Char> xsd,
  ) {
    return _xmlTextReaderSchemaValidate(
      reader,
      xsd,
    );
  }

  late final _xmlTextReaderSchemaValidatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(xmlTextReaderPtr,
              ffi.Pointer<ffi.Char>)>>('xmlTextReaderSchemaValidate');
  late final _xmlTextReaderSchemaValidate = _xmlTextReaderSchemaValidatePtr
      .asFunction<int Function(xmlTextReaderPtr, ffi.Pointer<ffi.Char>)>();

  int xmlTextReaderSchemaValidateCtxt(
    xmlTextReaderPtr reader,
    xmlSchemaValidCtxtPtr ctxt,
    int options,
  ) {
    return _xmlTextReaderSchemaValidateCtxt(
      reader,
      ctxt,
      options,
    );
  }

  late final _xmlTextReaderSchemaValidateCtxtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(xmlTextReaderPtr, xmlSchemaValidCtxtPtr,
              ffi.Int)>>('xmlTextReaderSchemaValidateCtxt');
  late final _xmlTextReaderSchemaValidateCtxt =
      _xmlTextReaderSchemaValidateCtxtPtr.asFunction<
          int Function(xmlTextReaderPtr, xmlSchemaValidCtxtPtr, int)>();

  int xmlTextReaderSetSchema(
    xmlTextReaderPtr reader,
    xmlSchemaPtr schema,
  ) {
    return _xmlTextReaderSetSchema(
      reader,
      schema,
    );
  }

  late final _xmlTextReaderSetSchemaPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(xmlTextReaderPtr, xmlSchemaPtr)>>(
      'xmlTextReaderSetSchema');
  late final _xmlTextReaderSetSchema = _xmlTextReaderSetSchemaPtr
      .asFunction<int Function(xmlTextReaderPtr, xmlSchemaPtr)>();

  ffi.Pointer<xmlChar> xmlTextReaderConstXmlVersion(
    xmlTextReaderPtr reader,
  ) {
    return _xmlTextReaderConstXmlVersion(
      reader,
    );
  }

  late final _xmlTextReaderConstXmlVersionPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<xmlChar> Function(xmlTextReaderPtr)>>(
      'xmlTextReaderConstXmlVersion');
  late final _xmlTextReaderConstXmlVersion = _xmlTextReaderConstXmlVersionPtr
      .asFunction<ffi.Pointer<xmlChar> Function(xmlTextReaderPtr)>();

  int xmlTextReaderStandalone(
    xmlTextReaderPtr reader,
  ) {
    return _xmlTextReaderStandalone(
      reader,
    );
  }

  late final _xmlTextReaderStandalonePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(xmlTextReaderPtr)>>(
          'xmlTextReaderStandalone');
  late final _xmlTextReaderStandalone =
      _xmlTextReaderStandalonePtr.asFunction<int Function(xmlTextReaderPtr)>();

  int xmlTextReaderByteConsumed(
    xmlTextReaderPtr reader,
  ) {
    return _xmlTextReaderByteConsumed(
      reader,
    );
  }

  late final _xmlTextReaderByteConsumedPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(xmlTextReaderPtr)>>(
          'xmlTextReaderByteConsumed');
  late final _xmlTextReaderByteConsumed = _xmlTextReaderByteConsumedPtr
      .asFunction<int Function(xmlTextReaderPtr)>();

  xmlTextReaderPtr xmlReaderWalker(
    xmlDocPtr doc,
  ) {
    return _xmlReaderWalker(
      doc,
    );
  }

  late final _xmlReaderWalkerPtr =
      _lookup<ffi.NativeFunction<xmlTextReaderPtr Function(xmlDocPtr)>>(
          'xmlReaderWalker');
  late final _xmlReaderWalker =
      _xmlReaderWalkerPtr.asFunction<xmlTextReaderPtr Function(xmlDocPtr)>();

  xmlTextReaderPtr xmlReaderForDoc(
    ffi.Pointer<xmlChar> cur,
    ffi.Pointer<ffi.Char> URL,
    ffi.Pointer<ffi.Char> encoding,
    int options,
  ) {
    return _xmlReaderForDoc(
      cur,
      URL,
      encoding,
      options,
    );
  }

  late final _xmlReaderForDocPtr = _lookup<
      ffi.NativeFunction<
          xmlTextReaderPtr Function(ffi.Pointer<xmlChar>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('xmlReaderForDoc');
  late final _xmlReaderForDoc = _xmlReaderForDocPtr.asFunction<
      xmlTextReaderPtr Function(ffi.Pointer<xmlChar>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, int)>();

  xmlTextReaderPtr xmlReaderForFile(
    ffi.Pointer<ffi.Char> filename,
    ffi.Pointer<ffi.Char> encoding,
    int options,
  ) {
    return _xmlReaderForFile(
      filename,
      encoding,
      options,
    );
  }

  late final _xmlReaderForFilePtr = _lookup<
      ffi.NativeFunction<
          xmlTextReaderPtr Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('xmlReaderForFile');
  late final _xmlReaderForFile = _xmlReaderForFilePtr.asFunction<
      xmlTextReaderPtr Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  xmlTextReaderPtr xmlReaderForMemory(
    ffi.Pointer<ffi.Char> buffer,
    int size,
    ffi.Pointer<ffi.Char> URL,
    ffi.Pointer<ffi.Char> encoding,
    int options,
  ) {
    return _xmlReaderForMemory(
      buffer,
      size,
      URL,
      encoding,
      options,
    );
  }

  late final _xmlReaderForMemoryPtr = _lookup<
      ffi.NativeFunction<
          xmlTextReaderPtr Function(
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Int)>>('xmlReaderForMemory');
  late final _xmlReaderForMemory = _xmlReaderForMemoryPtr.asFunction<
      xmlTextReaderPtr Function(ffi.Pointer<ffi.Char>, int,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  xmlTextReaderPtr xmlReaderForFd(
    int fd,
    ffi.Pointer<ffi.Char> URL,
    ffi.Pointer<ffi.Char> encoding,
    int options,
  ) {
    return _xmlReaderForFd(
      fd,
      URL,
      encoding,
      options,
    );
  }

  late final _xmlReaderForFdPtr = _lookup<
      ffi.NativeFunction<
          xmlTextReaderPtr Function(ffi.Int, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('xmlReaderForFd');
  late final _xmlReaderForFd = _xmlReaderForFdPtr.asFunction<
      xmlTextReaderPtr Function(
          int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  xmlTextReaderPtr xmlReaderForIO(
    xmlInputReadCallback ioread,
    xmlInputCloseCallback ioclose,
    ffi.Pointer<ffi.Void> ioctx,
    ffi.Pointer<ffi.Char> URL,
    ffi.Pointer<ffi.Char> encoding,
    int options,
  ) {
    return _xmlReaderForIO(
      ioread,
      ioclose,
      ioctx,
      URL,
      encoding,
      options,
    );
  }

  late final _xmlReaderForIOPtr = _lookup<
      ffi.NativeFunction<
          xmlTextReaderPtr Function(
              xmlInputReadCallback,
              xmlInputCloseCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Int)>>('xmlReaderForIO');
  late final _xmlReaderForIO = _xmlReaderForIOPtr.asFunction<
      xmlTextReaderPtr Function(
          xmlInputReadCallback,
          xmlInputCloseCallback,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          int)>();

  int xmlReaderNewWalker(
    xmlTextReaderPtr reader,
    xmlDocPtr doc,
  ) {
    return _xmlReaderNewWalker(
      reader,
      doc,
    );
  }

  late final _xmlReaderNewWalkerPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(xmlTextReaderPtr, xmlDocPtr)>>(
      'xmlReaderNewWalker');
  late final _xmlReaderNewWalker = _xmlReaderNewWalkerPtr
      .asFunction<int Function(xmlTextReaderPtr, xmlDocPtr)>();

  int xmlReaderNewDoc(
    xmlTextReaderPtr reader,
    ffi.Pointer<xmlChar> cur,
    ffi.Pointer<ffi.Char> URL,
    ffi.Pointer<ffi.Char> encoding,
    int options,
  ) {
    return _xmlReaderNewDoc(
      reader,
      cur,
      URL,
      encoding,
      options,
    );
  }

  late final _xmlReaderNewDocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              xmlTextReaderPtr,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Int)>>('xmlReaderNewDoc');
  late final _xmlReaderNewDoc = _xmlReaderNewDocPtr.asFunction<
      int Function(xmlTextReaderPtr, ffi.Pointer<xmlChar>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int xmlReaderNewFile(
    xmlTextReaderPtr reader,
    ffi.Pointer<ffi.Char> filename,
    ffi.Pointer<ffi.Char> encoding,
    int options,
  ) {
    return _xmlReaderNewFile(
      reader,
      filename,
      encoding,
      options,
    );
  }

  late final _xmlReaderNewFilePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(xmlTextReaderPtr, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('xmlReaderNewFile');
  late final _xmlReaderNewFile = _xmlReaderNewFilePtr.asFunction<
      int Function(xmlTextReaderPtr, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, int)>();

  int xmlReaderNewMemory(
    xmlTextReaderPtr reader,
    ffi.Pointer<ffi.Char> buffer,
    int size,
    ffi.Pointer<ffi.Char> URL,
    ffi.Pointer<ffi.Char> encoding,
    int options,
  ) {
    return _xmlReaderNewMemory(
      reader,
      buffer,
      size,
      URL,
      encoding,
      options,
    );
  }

  late final _xmlReaderNewMemoryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              xmlTextReaderPtr,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Int)>>('xmlReaderNewMemory');
  late final _xmlReaderNewMemory = _xmlReaderNewMemoryPtr.asFunction<
      int Function(xmlTextReaderPtr, ffi.Pointer<ffi.Char>, int,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int xmlReaderNewFd(
    xmlTextReaderPtr reader,
    int fd,
    ffi.Pointer<ffi.Char> URL,
    ffi.Pointer<ffi.Char> encoding,
    int options,
  ) {
    return _xmlReaderNewFd(
      reader,
      fd,
      URL,
      encoding,
      options,
    );
  }

  late final _xmlReaderNewFdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(xmlTextReaderPtr, ffi.Int, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('xmlReaderNewFd');
  late final _xmlReaderNewFd = _xmlReaderNewFdPtr.asFunction<
      int Function(xmlTextReaderPtr, int, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, int)>();

  int xmlReaderNewIO(
    xmlTextReaderPtr reader,
    xmlInputReadCallback ioread,
    xmlInputCloseCallback ioclose,
    ffi.Pointer<ffi.Void> ioctx,
    ffi.Pointer<ffi.Char> URL,
    ffi.Pointer<ffi.Char> encoding,
    int options,
  ) {
    return _xmlReaderNewIO(
      reader,
      ioread,
      ioclose,
      ioctx,
      URL,
      encoding,
      options,
    );
  }

  late final _xmlReaderNewIOPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              xmlTextReaderPtr,
              xmlInputReadCallback,
              xmlInputCloseCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Int)>>('xmlReaderNewIO');
  late final _xmlReaderNewIO = _xmlReaderNewIOPtr.asFunction<
      int Function(
          xmlTextReaderPtr,
          xmlInputReadCallback,
          xmlInputCloseCallback,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          int)>();

  int xmlTextReaderLocatorLineNumber(
    xmlTextReaderLocatorPtr locator,
  ) {
    return _xmlTextReaderLocatorLineNumber(
      locator,
    );
  }

  late final _xmlTextReaderLocatorLineNumberPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(xmlTextReaderLocatorPtr)>>(
          'xmlTextReaderLocatorLineNumber');
  late final _xmlTextReaderLocatorLineNumber =
      _xmlTextReaderLocatorLineNumberPtr
          .asFunction<int Function(xmlTextReaderLocatorPtr)>();

  ffi.Pointer<xmlChar> xmlTextReaderLocatorBaseURI(
    xmlTextReaderLocatorPtr locator,
  ) {
    return _xmlTextReaderLocatorBaseURI(
      locator,
    );
  }

  late final _xmlTextReaderLocatorBaseURIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<xmlChar> Function(
              xmlTextReaderLocatorPtr)>>('xmlTextReaderLocatorBaseURI');
  late final _xmlTextReaderLocatorBaseURI = _xmlTextReaderLocatorBaseURIPtr
      .asFunction<ffi.Pointer<xmlChar> Function(xmlTextReaderLocatorPtr)>();

  void xmlTextReaderSetErrorHandler(
    xmlTextReaderPtr reader,
    xmlTextReaderErrorFunc f,
    ffi.Pointer<ffi.Void> arg,
  ) {
    return _xmlTextReaderSetErrorHandler(
      reader,
      f,
      arg,
    );
  }

  late final _xmlTextReaderSetErrorHandlerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(xmlTextReaderPtr, xmlTextReaderErrorFunc,
              ffi.Pointer<ffi.Void>)>>('xmlTextReaderSetErrorHandler');
  late final _xmlTextReaderSetErrorHandler =
      _xmlTextReaderSetErrorHandlerPtr.asFunction<
          void Function(xmlTextReaderPtr, xmlTextReaderErrorFunc,
              ffi.Pointer<ffi.Void>)>();

  void xmlTextReaderSetStructuredErrorHandler(
    xmlTextReaderPtr reader,
    xmlStructuredErrorFunc f,
    ffi.Pointer<ffi.Void> arg,
  ) {
    return _xmlTextReaderSetStructuredErrorHandler(
      reader,
      f,
      arg,
    );
  }

  late final _xmlTextReaderSetStructuredErrorHandlerPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(xmlTextReaderPtr, xmlStructuredErrorFunc,
                  ffi.Pointer<ffi.Void>)>>(
      'xmlTextReaderSetStructuredErrorHandler');
  late final _xmlTextReaderSetStructuredErrorHandler =
      _xmlTextReaderSetStructuredErrorHandlerPtr.asFunction<
          void Function(xmlTextReaderPtr, xmlStructuredErrorFunc,
              ffi.Pointer<ffi.Void>)>();

  void xmlTextReaderGetErrorHandler(
    xmlTextReaderPtr reader,
    ffi.Pointer<xmlTextReaderErrorFunc> f,
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg,
  ) {
    return _xmlTextReaderGetErrorHandler(
      reader,
      f,
      arg,
    );
  }

  late final _xmlTextReaderGetErrorHandlerPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  xmlTextReaderPtr,
                  ffi.Pointer<xmlTextReaderErrorFunc>,
                  ffi.Pointer<ffi.Pointer<ffi.Void>>)>>(
      'xmlTextReaderGetErrorHandler');
  late final _xmlTextReaderGetErrorHandler =
      _xmlTextReaderGetErrorHandlerPtr.asFunction<
          void Function(xmlTextReaderPtr, ffi.Pointer<xmlTextReaderErrorFunc>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  xmlTextWriterPtr xmlNewTextWriter(
    xmlOutputBufferPtr out,
  ) {
    return _xmlNewTextWriter(
      out,
    );
  }

  late final _xmlNewTextWriterPtr = _lookup<
          ffi.NativeFunction<xmlTextWriterPtr Function(xmlOutputBufferPtr)>>(
      'xmlNewTextWriter');
  late final _xmlNewTextWriter = _xmlNewTextWriterPtr
      .asFunction<xmlTextWriterPtr Function(xmlOutputBufferPtr)>();

  xmlTextWriterPtr xmlNewTextWriterFilename(
    ffi.Pointer<ffi.Char> uri,
    int compression,
  ) {
    return _xmlNewTextWriterFilename(
      uri,
      compression,
    );
  }

  late final _xmlNewTextWriterFilenamePtr = _lookup<
      ffi.NativeFunction<
          xmlTextWriterPtr Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('xmlNewTextWriterFilename');
  late final _xmlNewTextWriterFilename = _xmlNewTextWriterFilenamePtr
      .asFunction<xmlTextWriterPtr Function(ffi.Pointer<ffi.Char>, int)>();

  xmlTextWriterPtr xmlNewTextWriterMemory(
    xmlBufferPtr buf,
    int compression,
  ) {
    return _xmlNewTextWriterMemory(
      buf,
      compression,
    );
  }

  late final _xmlNewTextWriterMemoryPtr = _lookup<
          ffi.NativeFunction<xmlTextWriterPtr Function(xmlBufferPtr, ffi.Int)>>(
      'xmlNewTextWriterMemory');
  late final _xmlNewTextWriterMemory = _xmlNewTextWriterMemoryPtr
      .asFunction<xmlTextWriterPtr Function(xmlBufferPtr, int)>();

  xmlTextWriterPtr xmlNewTextWriterPushParser(
    xmlParserCtxtPtr ctxt,
    int compression,
  ) {
    return _xmlNewTextWriterPushParser(
      ctxt,
      compression,
    );
  }

  late final _xmlNewTextWriterPushParserPtr = _lookup<
      ffi.NativeFunction<
          xmlTextWriterPtr Function(
              xmlParserCtxtPtr, ffi.Int)>>('xmlNewTextWriterPushParser');
  late final _xmlNewTextWriterPushParser = _xmlNewTextWriterPushParserPtr
      .asFunction<xmlTextWriterPtr Function(xmlParserCtxtPtr, int)>();

  xmlTextWriterPtr xmlNewTextWriterDoc(
    ffi.Pointer<xmlDocPtr> doc,
    int compression,
  ) {
    return _xmlNewTextWriterDoc(
      doc,
      compression,
    );
  }

  late final _xmlNewTextWriterDocPtr = _lookup<
      ffi.NativeFunction<
          xmlTextWriterPtr Function(
              ffi.Pointer<xmlDocPtr>, ffi.Int)>>('xmlNewTextWriterDoc');
  late final _xmlNewTextWriterDoc = _xmlNewTextWriterDocPtr
      .asFunction<xmlTextWriterPtr Function(ffi.Pointer<xmlDocPtr>, int)>();

  xmlTextWriterPtr xmlNewTextWriterTree(
    xmlDocPtr doc,
    xmlNodePtr node,
    int compression,
  ) {
    return _xmlNewTextWriterTree(
      doc,
      node,
      compression,
    );
  }

  late final _xmlNewTextWriterTreePtr = _lookup<
      ffi.NativeFunction<
          xmlTextWriterPtr Function(
              xmlDocPtr, xmlNodePtr, ffi.Int)>>('xmlNewTextWriterTree');
  late final _xmlNewTextWriterTree = _xmlNewTextWriterTreePtr
      .asFunction<xmlTextWriterPtr Function(xmlDocPtr, xmlNodePtr, int)>();

  void xmlFreeTextWriter(
    xmlTextWriterPtr writer,
  ) {
    return _xmlFreeTextWriter(
      writer,
    );
  }

  late final _xmlFreeTextWriterPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(xmlTextWriterPtr)>>(
          'xmlFreeTextWriter');
  late final _xmlFreeTextWriter =
      _xmlFreeTextWriterPtr.asFunction<void Function(xmlTextWriterPtr)>();

  int xmlTextWriterStartDocument(
    xmlTextWriterPtr writer,
    ffi.Pointer<ffi.Char> version,
    ffi.Pointer<ffi.Char> encoding,
    ffi.Pointer<ffi.Char> standalone,
  ) {
    return _xmlTextWriterStartDocument(
      writer,
      version,
      encoding,
      standalone,
    );
  }

  late final _xmlTextWriterStartDocumentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              xmlTextWriterPtr,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('xmlTextWriterStartDocument');
  late final _xmlTextWriterStartDocument =
      _xmlTextWriterStartDocumentPtr.asFunction<
          int Function(xmlTextWriterPtr, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int xmlTextWriterEndDocument(
    xmlTextWriterPtr writer,
  ) {
    return _xmlTextWriterEndDocument(
      writer,
    );
  }

  late final _xmlTextWriterEndDocumentPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(xmlTextWriterPtr)>>(
          'xmlTextWriterEndDocument');
  late final _xmlTextWriterEndDocument =
      _xmlTextWriterEndDocumentPtr.asFunction<int Function(xmlTextWriterPtr)>();

  int xmlTextWriterStartComment(
    xmlTextWriterPtr writer,
  ) {
    return _xmlTextWriterStartComment(
      writer,
    );
  }

  late final _xmlTextWriterStartCommentPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(xmlTextWriterPtr)>>(
          'xmlTextWriterStartComment');
  late final _xmlTextWriterStartComment = _xmlTextWriterStartCommentPtr
      .asFunction<int Function(xmlTextWriterPtr)>();

  int xmlTextWriterEndComment(
    xmlTextWriterPtr writer,
  ) {
    return _xmlTextWriterEndComment(
      writer,
    );
  }

  late final _xmlTextWriterEndCommentPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(xmlTextWriterPtr)>>(
          'xmlTextWriterEndComment');
  late final _xmlTextWriterEndComment =
      _xmlTextWriterEndCommentPtr.asFunction<int Function(xmlTextWriterPtr)>();

  int xmlTextWriterWriteFormatComment(
    xmlTextWriterPtr writer,
    ffi.Pointer<ffi.Char> format,
  ) {
    return _xmlTextWriterWriteFormatComment(
      writer,
      format,
    );
  }

  late final _xmlTextWriterWriteFormatCommentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(xmlTextWriterPtr,
              ffi.Pointer<ffi.Char>)>>('xmlTextWriterWriteFormatComment');
  late final _xmlTextWriterWriteFormatComment =
      _xmlTextWriterWriteFormatCommentPtr
          .asFunction<int Function(xmlTextWriterPtr, ffi.Pointer<ffi.Char>)>();

  int xmlTextWriterWriteVFormatComment(
    xmlTextWriterPtr writer,
    ffi.Pointer<ffi.Char> format,
    ffi.Pointer<__va_list_tag> argptr,
  ) {
    return _xmlTextWriterWriteVFormatComment(
      writer,
      format,
      argptr,
    );
  }

  late final _xmlTextWriterWriteVFormatCommentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(xmlTextWriterPtr, ffi.Pointer<ffi.Char>,
              ffi.Pointer<__va_list_tag>)>>('xmlTextWriterWriteVFormatComment');
  late final _xmlTextWriterWriteVFormatComment =
      _xmlTextWriterWriteVFormatCommentPtr.asFunction<
          int Function(xmlTextWriterPtr, ffi.Pointer<ffi.Char>,
              ffi.Pointer<__va_list_tag>)>();

  int xmlTextWriterWriteComment(
    xmlTextWriterPtr writer,
    ffi.Pointer<xmlChar> content,
  ) {
    return _xmlTextWriterWriteComment(
      writer,
      content,
    );
  }

  late final _xmlTextWriterWriteCommentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(xmlTextWriterPtr,
              ffi.Pointer<xmlChar>)>>('xmlTextWriterWriteComment');
  late final _xmlTextWriterWriteComment = _xmlTextWriterWriteCommentPtr
      .asFunction<int Function(xmlTextWriterPtr, ffi.Pointer<xmlChar>)>();

  int xmlTextWriterStartElement(
    xmlTextWriterPtr writer,
    ffi.Pointer<xmlChar> name,
  ) {
    return _xmlTextWriterStartElement(
      writer,
      name,
    );
  }

  late final _xmlTextWriterStartElementPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(xmlTextWriterPtr,
              ffi.Pointer<xmlChar>)>>('xmlTextWriterStartElement');
  late final _xmlTextWriterStartElement = _xmlTextWriterStartElementPtr
      .asFunction<int Function(xmlTextWriterPtr, ffi.Pointer<xmlChar>)>();

  int xmlTextWriterStartElementNS(
    xmlTextWriterPtr writer,
    ffi.Pointer<xmlChar> prefix,
    ffi.Pointer<xmlChar> name,
    ffi.Pointer<xmlChar> namespaceURI,
  ) {
    return _xmlTextWriterStartElementNS(
      writer,
      prefix,
      name,
      namespaceURI,
    );
  }

  late final _xmlTextWriterStartElementNSPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              xmlTextWriterPtr,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>)>>('xmlTextWriterStartElementNS');
  late final _xmlTextWriterStartElementNS =
      _xmlTextWriterStartElementNSPtr.asFunction<
          int Function(xmlTextWriterPtr, ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>, ffi.Pointer<xmlChar>)>();

  int xmlTextWriterEndElement(
    xmlTextWriterPtr writer,
  ) {
    return _xmlTextWriterEndElement(
      writer,
    );
  }

  late final _xmlTextWriterEndElementPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(xmlTextWriterPtr)>>(
          'xmlTextWriterEndElement');
  late final _xmlTextWriterEndElement =
      _xmlTextWriterEndElementPtr.asFunction<int Function(xmlTextWriterPtr)>();

  int xmlTextWriterFullEndElement(
    xmlTextWriterPtr writer,
  ) {
    return _xmlTextWriterFullEndElement(
      writer,
    );
  }

  late final _xmlTextWriterFullEndElementPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(xmlTextWriterPtr)>>(
          'xmlTextWriterFullEndElement');
  late final _xmlTextWriterFullEndElement = _xmlTextWriterFullEndElementPtr
      .asFunction<int Function(xmlTextWriterPtr)>();

  int xmlTextWriterWriteFormatElement(
    xmlTextWriterPtr writer,
    ffi.Pointer<xmlChar> name,
    ffi.Pointer<ffi.Char> format,
  ) {
    return _xmlTextWriterWriteFormatElement(
      writer,
      name,
      format,
    );
  }

  late final _xmlTextWriterWriteFormatElementPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(xmlTextWriterPtr, ffi.Pointer<xmlChar>,
              ffi.Pointer<ffi.Char>)>>('xmlTextWriterWriteFormatElement');
  late final _xmlTextWriterWriteFormatElement =
      _xmlTextWriterWriteFormatElementPtr.asFunction<
          int Function(
              xmlTextWriterPtr, ffi.Pointer<xmlChar>, ffi.Pointer<ffi.Char>)>();

  int xmlTextWriterWriteVFormatElement(
    xmlTextWriterPtr writer,
    ffi.Pointer<xmlChar> name,
    ffi.Pointer<ffi.Char> format,
    ffi.Pointer<__va_list_tag> argptr,
  ) {
    return _xmlTextWriterWriteVFormatElement(
      writer,
      name,
      format,
      argptr,
    );
  }

  late final _xmlTextWriterWriteVFormatElementPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              xmlTextWriterPtr,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<__va_list_tag>)>>('xmlTextWriterWriteVFormatElement');
  late final _xmlTextWriterWriteVFormatElement =
      _xmlTextWriterWriteVFormatElementPtr.asFunction<
          int Function(xmlTextWriterPtr, ffi.Pointer<xmlChar>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<__va_list_tag>)>();

  int xmlTextWriterWriteElement(
    xmlTextWriterPtr writer,
    ffi.Pointer<xmlChar> name,
    ffi.Pointer<xmlChar> content,
  ) {
    return _xmlTextWriterWriteElement(
      writer,
      name,
      content,
    );
  }

  late final _xmlTextWriterWriteElementPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(xmlTextWriterPtr, ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>)>>('xmlTextWriterWriteElement');
  late final _xmlTextWriterWriteElement =
      _xmlTextWriterWriteElementPtr.asFunction<
          int Function(
              xmlTextWriterPtr, ffi.Pointer<xmlChar>, ffi.Pointer<xmlChar>)>();

  int xmlTextWriterWriteFormatElementNS(
    xmlTextWriterPtr writer,
    ffi.Pointer<xmlChar> prefix,
    ffi.Pointer<xmlChar> name,
    ffi.Pointer<xmlChar> namespaceURI,
    ffi.Pointer<ffi.Char> format,
  ) {
    return _xmlTextWriterWriteFormatElementNS(
      writer,
      prefix,
      name,
      namespaceURI,
      format,
    );
  }

  late final _xmlTextWriterWriteFormatElementNSPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              xmlTextWriterPtr,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<ffi.Char>)>>('xmlTextWriterWriteFormatElementNS');
  late final _xmlTextWriterWriteFormatElementNS =
      _xmlTextWriterWriteFormatElementNSPtr.asFunction<
          int Function(
              xmlTextWriterPtr,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<ffi.Char>)>();

  int xmlTextWriterWriteVFormatElementNS(
    xmlTextWriterPtr writer,
    ffi.Pointer<xmlChar> prefix,
    ffi.Pointer<xmlChar> name,
    ffi.Pointer<xmlChar> namespaceURI,
    ffi.Pointer<ffi.Char> format,
    ffi.Pointer<__va_list_tag> argptr,
  ) {
    return _xmlTextWriterWriteVFormatElementNS(
      writer,
      prefix,
      name,
      namespaceURI,
      format,
      argptr,
    );
  }

  late final _xmlTextWriterWriteVFormatElementNSPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  xmlTextWriterPtr,
                  ffi.Pointer<xmlChar>,
                  ffi.Pointer<xmlChar>,
                  ffi.Pointer<xmlChar>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<__va_list_tag>)>>(
      'xmlTextWriterWriteVFormatElementNS');
  late final _xmlTextWriterWriteVFormatElementNS =
      _xmlTextWriterWriteVFormatElementNSPtr.asFunction<
          int Function(
              xmlTextWriterPtr,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<__va_list_tag>)>();

  int xmlTextWriterWriteElementNS(
    xmlTextWriterPtr writer,
    ffi.Pointer<xmlChar> prefix,
    ffi.Pointer<xmlChar> name,
    ffi.Pointer<xmlChar> namespaceURI,
    ffi.Pointer<xmlChar> content,
  ) {
    return _xmlTextWriterWriteElementNS(
      writer,
      prefix,
      name,
      namespaceURI,
      content,
    );
  }

  late final _xmlTextWriterWriteElementNSPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              xmlTextWriterPtr,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>)>>('xmlTextWriterWriteElementNS');
  late final _xmlTextWriterWriteElementNS =
      _xmlTextWriterWriteElementNSPtr.asFunction<
          int Function(
              xmlTextWriterPtr,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>)>();

  int xmlTextWriterWriteFormatRaw(
    xmlTextWriterPtr writer,
    ffi.Pointer<ffi.Char> format,
  ) {
    return _xmlTextWriterWriteFormatRaw(
      writer,
      format,
    );
  }

  late final _xmlTextWriterWriteFormatRawPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(xmlTextWriterPtr,
              ffi.Pointer<ffi.Char>)>>('xmlTextWriterWriteFormatRaw');
  late final _xmlTextWriterWriteFormatRaw = _xmlTextWriterWriteFormatRawPtr
      .asFunction<int Function(xmlTextWriterPtr, ffi.Pointer<ffi.Char>)>();

  int xmlTextWriterWriteVFormatRaw(
    xmlTextWriterPtr writer,
    ffi.Pointer<ffi.Char> format,
    ffi.Pointer<__va_list_tag> argptr,
  ) {
    return _xmlTextWriterWriteVFormatRaw(
      writer,
      format,
      argptr,
    );
  }

  late final _xmlTextWriterWriteVFormatRawPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(xmlTextWriterPtr, ffi.Pointer<ffi.Char>,
              ffi.Pointer<__va_list_tag>)>>('xmlTextWriterWriteVFormatRaw');
  late final _xmlTextWriterWriteVFormatRaw =
      _xmlTextWriterWriteVFormatRawPtr.asFunction<
          int Function(xmlTextWriterPtr, ffi.Pointer<ffi.Char>,
              ffi.Pointer<__va_list_tag>)>();

  int xmlTextWriterWriteRawLen(
    xmlTextWriterPtr writer,
    ffi.Pointer<xmlChar> content,
    int len,
  ) {
    return _xmlTextWriterWriteRawLen(
      writer,
      content,
      len,
    );
  }

  late final _xmlTextWriterWriteRawLenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(xmlTextWriterPtr, ffi.Pointer<xmlChar>,
              ffi.Int)>>('xmlTextWriterWriteRawLen');
  late final _xmlTextWriterWriteRawLen = _xmlTextWriterWriteRawLenPtr
      .asFunction<int Function(xmlTextWriterPtr, ffi.Pointer<xmlChar>, int)>();

  int xmlTextWriterWriteRaw(
    xmlTextWriterPtr writer,
    ffi.Pointer<xmlChar> content,
  ) {
    return _xmlTextWriterWriteRaw(
      writer,
      content,
    );
  }

  late final _xmlTextWriterWriteRawPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(xmlTextWriterPtr,
              ffi.Pointer<xmlChar>)>>('xmlTextWriterWriteRaw');
  late final _xmlTextWriterWriteRaw = _xmlTextWriterWriteRawPtr
      .asFunction<int Function(xmlTextWriterPtr, ffi.Pointer<xmlChar>)>();

  int xmlTextWriterWriteFormatString(
    xmlTextWriterPtr writer,
    ffi.Pointer<ffi.Char> format,
  ) {
    return _xmlTextWriterWriteFormatString(
      writer,
      format,
    );
  }

  late final _xmlTextWriterWriteFormatStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(xmlTextWriterPtr,
              ffi.Pointer<ffi.Char>)>>('xmlTextWriterWriteFormatString');
  late final _xmlTextWriterWriteFormatString =
      _xmlTextWriterWriteFormatStringPtr
          .asFunction<int Function(xmlTextWriterPtr, ffi.Pointer<ffi.Char>)>();

  int xmlTextWriterWriteVFormatString(
    xmlTextWriterPtr writer,
    ffi.Pointer<ffi.Char> format,
    ffi.Pointer<__va_list_tag> argptr,
  ) {
    return _xmlTextWriterWriteVFormatString(
      writer,
      format,
      argptr,
    );
  }

  late final _xmlTextWriterWriteVFormatStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(xmlTextWriterPtr, ffi.Pointer<ffi.Char>,
              ffi.Pointer<__va_list_tag>)>>('xmlTextWriterWriteVFormatString');
  late final _xmlTextWriterWriteVFormatString =
      _xmlTextWriterWriteVFormatStringPtr.asFunction<
          int Function(xmlTextWriterPtr, ffi.Pointer<ffi.Char>,
              ffi.Pointer<__va_list_tag>)>();

  int xmlTextWriterWriteString(
    xmlTextWriterPtr writer,
    ffi.Pointer<xmlChar> content,
  ) {
    return _xmlTextWriterWriteString(
      writer,
      content,
    );
  }

  late final _xmlTextWriterWriteStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(xmlTextWriterPtr,
              ffi.Pointer<xmlChar>)>>('xmlTextWriterWriteString');
  late final _xmlTextWriterWriteString = _xmlTextWriterWriteStringPtr
      .asFunction<int Function(xmlTextWriterPtr, ffi.Pointer<xmlChar>)>();

  int xmlTextWriterWriteBase64(
    xmlTextWriterPtr writer,
    ffi.Pointer<ffi.Char> data,
    int start,
    int len,
  ) {
    return _xmlTextWriterWriteBase64(
      writer,
      data,
      start,
      len,
    );
  }

  late final _xmlTextWriterWriteBase64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(xmlTextWriterPtr, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Int)>>('xmlTextWriterWriteBase64');
  late final _xmlTextWriterWriteBase64 =
      _xmlTextWriterWriteBase64Ptr.asFunction<
          int Function(xmlTextWriterPtr, ffi.Pointer<ffi.Char>, int, int)>();

  int xmlTextWriterWriteBinHex(
    xmlTextWriterPtr writer,
    ffi.Pointer<ffi.Char> data,
    int start,
    int len,
  ) {
    return _xmlTextWriterWriteBinHex(
      writer,
      data,
      start,
      len,
    );
  }

  late final _xmlTextWriterWriteBinHexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(xmlTextWriterPtr, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Int)>>('xmlTextWriterWriteBinHex');
  late final _xmlTextWriterWriteBinHex =
      _xmlTextWriterWriteBinHexPtr.asFunction<
          int Function(xmlTextWriterPtr, ffi.Pointer<ffi.Char>, int, int)>();

  int xmlTextWriterStartAttribute(
    xmlTextWriterPtr writer,
    ffi.Pointer<xmlChar> name,
  ) {
    return _xmlTextWriterStartAttribute(
      writer,
      name,
    );
  }

  late final _xmlTextWriterStartAttributePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(xmlTextWriterPtr,
              ffi.Pointer<xmlChar>)>>('xmlTextWriterStartAttribute');
  late final _xmlTextWriterStartAttribute = _xmlTextWriterStartAttributePtr
      .asFunction<int Function(xmlTextWriterPtr, ffi.Pointer<xmlChar>)>();

  int xmlTextWriterStartAttributeNS(
    xmlTextWriterPtr writer,
    ffi.Pointer<xmlChar> prefix,
    ffi.Pointer<xmlChar> name,
    ffi.Pointer<xmlChar> namespaceURI,
  ) {
    return _xmlTextWriterStartAttributeNS(
      writer,
      prefix,
      name,
      namespaceURI,
    );
  }

  late final _xmlTextWriterStartAttributeNSPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              xmlTextWriterPtr,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>)>>('xmlTextWriterStartAttributeNS');
  late final _xmlTextWriterStartAttributeNS =
      _xmlTextWriterStartAttributeNSPtr.asFunction<
          int Function(xmlTextWriterPtr, ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>, ffi.Pointer<xmlChar>)>();

  int xmlTextWriterEndAttribute(
    xmlTextWriterPtr writer,
  ) {
    return _xmlTextWriterEndAttribute(
      writer,
    );
  }

  late final _xmlTextWriterEndAttributePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(xmlTextWriterPtr)>>(
          'xmlTextWriterEndAttribute');
  late final _xmlTextWriterEndAttribute = _xmlTextWriterEndAttributePtr
      .asFunction<int Function(xmlTextWriterPtr)>();

  int xmlTextWriterWriteFormatAttribute(
    xmlTextWriterPtr writer,
    ffi.Pointer<xmlChar> name,
    ffi.Pointer<ffi.Char> format,
  ) {
    return _xmlTextWriterWriteFormatAttribute(
      writer,
      name,
      format,
    );
  }

  late final _xmlTextWriterWriteFormatAttributePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(xmlTextWriterPtr, ffi.Pointer<xmlChar>,
              ffi.Pointer<ffi.Char>)>>('xmlTextWriterWriteFormatAttribute');
  late final _xmlTextWriterWriteFormatAttribute =
      _xmlTextWriterWriteFormatAttributePtr.asFunction<
          int Function(
              xmlTextWriterPtr, ffi.Pointer<xmlChar>, ffi.Pointer<ffi.Char>)>();

  int xmlTextWriterWriteVFormatAttribute(
    xmlTextWriterPtr writer,
    ffi.Pointer<xmlChar> name,
    ffi.Pointer<ffi.Char> format,
    ffi.Pointer<__va_list_tag> argptr,
  ) {
    return _xmlTextWriterWriteVFormatAttribute(
      writer,
      name,
      format,
      argptr,
    );
  }

  late final _xmlTextWriterWriteVFormatAttributePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(xmlTextWriterPtr, ffi.Pointer<xmlChar>,
                  ffi.Pointer<ffi.Char>, ffi.Pointer<__va_list_tag>)>>(
      'xmlTextWriterWriteVFormatAttribute');
  late final _xmlTextWriterWriteVFormatAttribute =
      _xmlTextWriterWriteVFormatAttributePtr.asFunction<
          int Function(xmlTextWriterPtr, ffi.Pointer<xmlChar>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<__va_list_tag>)>();

  int xmlTextWriterWriteAttribute(
    xmlTextWriterPtr writer,
    ffi.Pointer<xmlChar> name,
    ffi.Pointer<xmlChar> content,
  ) {
    return _xmlTextWriterWriteAttribute(
      writer,
      name,
      content,
    );
  }

  late final _xmlTextWriterWriteAttributePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(xmlTextWriterPtr, ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>)>>('xmlTextWriterWriteAttribute');
  late final _xmlTextWriterWriteAttribute =
      _xmlTextWriterWriteAttributePtr.asFunction<
          int Function(
              xmlTextWriterPtr, ffi.Pointer<xmlChar>, ffi.Pointer<xmlChar>)>();

  int xmlTextWriterWriteFormatAttributeNS(
    xmlTextWriterPtr writer,
    ffi.Pointer<xmlChar> prefix,
    ffi.Pointer<xmlChar> name,
    ffi.Pointer<xmlChar> namespaceURI,
    ffi.Pointer<ffi.Char> format,
  ) {
    return _xmlTextWriterWriteFormatAttributeNS(
      writer,
      prefix,
      name,
      namespaceURI,
      format,
    );
  }

  late final _xmlTextWriterWriteFormatAttributeNSPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              xmlTextWriterPtr,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<ffi.Char>)>>('xmlTextWriterWriteFormatAttributeNS');
  late final _xmlTextWriterWriteFormatAttributeNS =
      _xmlTextWriterWriteFormatAttributeNSPtr.asFunction<
          int Function(
              xmlTextWriterPtr,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<ffi.Char>)>();

  int xmlTextWriterWriteVFormatAttributeNS(
    xmlTextWriterPtr writer,
    ffi.Pointer<xmlChar> prefix,
    ffi.Pointer<xmlChar> name,
    ffi.Pointer<xmlChar> namespaceURI,
    ffi.Pointer<ffi.Char> format,
    ffi.Pointer<__va_list_tag> argptr,
  ) {
    return _xmlTextWriterWriteVFormatAttributeNS(
      writer,
      prefix,
      name,
      namespaceURI,
      format,
      argptr,
    );
  }

  late final _xmlTextWriterWriteVFormatAttributeNSPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  xmlTextWriterPtr,
                  ffi.Pointer<xmlChar>,
                  ffi.Pointer<xmlChar>,
                  ffi.Pointer<xmlChar>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<__va_list_tag>)>>(
      'xmlTextWriterWriteVFormatAttributeNS');
  late final _xmlTextWriterWriteVFormatAttributeNS =
      _xmlTextWriterWriteVFormatAttributeNSPtr.asFunction<
          int Function(
              xmlTextWriterPtr,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<__va_list_tag>)>();

  int xmlTextWriterWriteAttributeNS(
    xmlTextWriterPtr writer,
    ffi.Pointer<xmlChar> prefix,
    ffi.Pointer<xmlChar> name,
    ffi.Pointer<xmlChar> namespaceURI,
    ffi.Pointer<xmlChar> content,
  ) {
    return _xmlTextWriterWriteAttributeNS(
      writer,
      prefix,
      name,
      namespaceURI,
      content,
    );
  }

  late final _xmlTextWriterWriteAttributeNSPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              xmlTextWriterPtr,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>)>>('xmlTextWriterWriteAttributeNS');
  late final _xmlTextWriterWriteAttributeNS =
      _xmlTextWriterWriteAttributeNSPtr.asFunction<
          int Function(
              xmlTextWriterPtr,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>)>();

  int xmlTextWriterStartPI(
    xmlTextWriterPtr writer,
    ffi.Pointer<xmlChar> target,
  ) {
    return _xmlTextWriterStartPI(
      writer,
      target,
    );
  }

  late final _xmlTextWriterStartPIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              xmlTextWriterPtr, ffi.Pointer<xmlChar>)>>('xmlTextWriterStartPI');
  late final _xmlTextWriterStartPI = _xmlTextWriterStartPIPtr
      .asFunction<int Function(xmlTextWriterPtr, ffi.Pointer<xmlChar>)>();

  int xmlTextWriterEndPI(
    xmlTextWriterPtr writer,
  ) {
    return _xmlTextWriterEndPI(
      writer,
    );
  }

  late final _xmlTextWriterEndPIPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(xmlTextWriterPtr)>>(
          'xmlTextWriterEndPI');
  late final _xmlTextWriterEndPI =
      _xmlTextWriterEndPIPtr.asFunction<int Function(xmlTextWriterPtr)>();

  int xmlTextWriterWriteFormatPI(
    xmlTextWriterPtr writer,
    ffi.Pointer<xmlChar> target,
    ffi.Pointer<ffi.Char> format,
  ) {
    return _xmlTextWriterWriteFormatPI(
      writer,
      target,
      format,
    );
  }

  late final _xmlTextWriterWriteFormatPIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(xmlTextWriterPtr, ffi.Pointer<xmlChar>,
              ffi.Pointer<ffi.Char>)>>('xmlTextWriterWriteFormatPI');
  late final _xmlTextWriterWriteFormatPI =
      _xmlTextWriterWriteFormatPIPtr.asFunction<
          int Function(
              xmlTextWriterPtr, ffi.Pointer<xmlChar>, ffi.Pointer<ffi.Char>)>();

  int xmlTextWriterWriteVFormatPI(
    xmlTextWriterPtr writer,
    ffi.Pointer<xmlChar> target,
    ffi.Pointer<ffi.Char> format,
    ffi.Pointer<__va_list_tag> argptr,
  ) {
    return _xmlTextWriterWriteVFormatPI(
      writer,
      target,
      format,
      argptr,
    );
  }

  late final _xmlTextWriterWriteVFormatPIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              xmlTextWriterPtr,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<__va_list_tag>)>>('xmlTextWriterWriteVFormatPI');
  late final _xmlTextWriterWriteVFormatPI =
      _xmlTextWriterWriteVFormatPIPtr.asFunction<
          int Function(xmlTextWriterPtr, ffi.Pointer<xmlChar>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<__va_list_tag>)>();

  int xmlTextWriterWritePI(
    xmlTextWriterPtr writer,
    ffi.Pointer<xmlChar> target,
    ffi.Pointer<xmlChar> content,
  ) {
    return _xmlTextWriterWritePI(
      writer,
      target,
      content,
    );
  }

  late final _xmlTextWriterWritePIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(xmlTextWriterPtr, ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>)>>('xmlTextWriterWritePI');
  late final _xmlTextWriterWritePI = _xmlTextWriterWritePIPtr.asFunction<
      int Function(
          xmlTextWriterPtr, ffi.Pointer<xmlChar>, ffi.Pointer<xmlChar>)>();

  int xmlTextWriterStartCDATA(
    xmlTextWriterPtr writer,
  ) {
    return _xmlTextWriterStartCDATA(
      writer,
    );
  }

  late final _xmlTextWriterStartCDATAPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(xmlTextWriterPtr)>>(
          'xmlTextWriterStartCDATA');
  late final _xmlTextWriterStartCDATA =
      _xmlTextWriterStartCDATAPtr.asFunction<int Function(xmlTextWriterPtr)>();

  int xmlTextWriterEndCDATA(
    xmlTextWriterPtr writer,
  ) {
    return _xmlTextWriterEndCDATA(
      writer,
    );
  }

  late final _xmlTextWriterEndCDATAPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(xmlTextWriterPtr)>>(
          'xmlTextWriterEndCDATA');
  late final _xmlTextWriterEndCDATA =
      _xmlTextWriterEndCDATAPtr.asFunction<int Function(xmlTextWriterPtr)>();

  int xmlTextWriterWriteFormatCDATA(
    xmlTextWriterPtr writer,
    ffi.Pointer<ffi.Char> format,
  ) {
    return _xmlTextWriterWriteFormatCDATA(
      writer,
      format,
    );
  }

  late final _xmlTextWriterWriteFormatCDATAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(xmlTextWriterPtr,
              ffi.Pointer<ffi.Char>)>>('xmlTextWriterWriteFormatCDATA');
  late final _xmlTextWriterWriteFormatCDATA = _xmlTextWriterWriteFormatCDATAPtr
      .asFunction<int Function(xmlTextWriterPtr, ffi.Pointer<ffi.Char>)>();

  int xmlTextWriterWriteVFormatCDATA(
    xmlTextWriterPtr writer,
    ffi.Pointer<ffi.Char> format,
    ffi.Pointer<__va_list_tag> argptr,
  ) {
    return _xmlTextWriterWriteVFormatCDATA(
      writer,
      format,
      argptr,
    );
  }

  late final _xmlTextWriterWriteVFormatCDATAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(xmlTextWriterPtr, ffi.Pointer<ffi.Char>,
              ffi.Pointer<__va_list_tag>)>>('xmlTextWriterWriteVFormatCDATA');
  late final _xmlTextWriterWriteVFormatCDATA =
      _xmlTextWriterWriteVFormatCDATAPtr.asFunction<
          int Function(xmlTextWriterPtr, ffi.Pointer<ffi.Char>,
              ffi.Pointer<__va_list_tag>)>();

  int xmlTextWriterWriteCDATA(
    xmlTextWriterPtr writer,
    ffi.Pointer<xmlChar> content,
  ) {
    return _xmlTextWriterWriteCDATA(
      writer,
      content,
    );
  }

  late final _xmlTextWriterWriteCDATAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(xmlTextWriterPtr,
              ffi.Pointer<xmlChar>)>>('xmlTextWriterWriteCDATA');
  late final _xmlTextWriterWriteCDATA = _xmlTextWriterWriteCDATAPtr
      .asFunction<int Function(xmlTextWriterPtr, ffi.Pointer<xmlChar>)>();

  int xmlTextWriterStartDTD(
    xmlTextWriterPtr writer,
    ffi.Pointer<xmlChar> name,
    ffi.Pointer<xmlChar> pubid,
    ffi.Pointer<xmlChar> sysid,
  ) {
    return _xmlTextWriterStartDTD(
      writer,
      name,
      pubid,
      sysid,
    );
  }

  late final _xmlTextWriterStartDTDPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              xmlTextWriterPtr,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>)>>('xmlTextWriterStartDTD');
  late final _xmlTextWriterStartDTD = _xmlTextWriterStartDTDPtr.asFunction<
      int Function(xmlTextWriterPtr, ffi.Pointer<xmlChar>, ffi.Pointer<xmlChar>,
          ffi.Pointer<xmlChar>)>();

  int xmlTextWriterEndDTD(
    xmlTextWriterPtr writer,
  ) {
    return _xmlTextWriterEndDTD(
      writer,
    );
  }

  late final _xmlTextWriterEndDTDPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(xmlTextWriterPtr)>>(
          'xmlTextWriterEndDTD');
  late final _xmlTextWriterEndDTD =
      _xmlTextWriterEndDTDPtr.asFunction<int Function(xmlTextWriterPtr)>();

  int xmlTextWriterWriteFormatDTD(
    xmlTextWriterPtr writer,
    ffi.Pointer<xmlChar> name,
    ffi.Pointer<xmlChar> pubid,
    ffi.Pointer<xmlChar> sysid,
    ffi.Pointer<ffi.Char> format,
  ) {
    return _xmlTextWriterWriteFormatDTD(
      writer,
      name,
      pubid,
      sysid,
      format,
    );
  }

  late final _xmlTextWriterWriteFormatDTDPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              xmlTextWriterPtr,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<ffi.Char>)>>('xmlTextWriterWriteFormatDTD');
  late final _xmlTextWriterWriteFormatDTD =
      _xmlTextWriterWriteFormatDTDPtr.asFunction<
          int Function(
              xmlTextWriterPtr,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<ffi.Char>)>();

  int xmlTextWriterWriteVFormatDTD(
    xmlTextWriterPtr writer,
    ffi.Pointer<xmlChar> name,
    ffi.Pointer<xmlChar> pubid,
    ffi.Pointer<xmlChar> sysid,
    ffi.Pointer<ffi.Char> format,
    ffi.Pointer<__va_list_tag> argptr,
  ) {
    return _xmlTextWriterWriteVFormatDTD(
      writer,
      name,
      pubid,
      sysid,
      format,
      argptr,
    );
  }

  late final _xmlTextWriterWriteVFormatDTDPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              xmlTextWriterPtr,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<__va_list_tag>)>>('xmlTextWriterWriteVFormatDTD');
  late final _xmlTextWriterWriteVFormatDTD =
      _xmlTextWriterWriteVFormatDTDPtr.asFunction<
          int Function(
              xmlTextWriterPtr,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<__va_list_tag>)>();

  int xmlTextWriterWriteDTD(
    xmlTextWriterPtr writer,
    ffi.Pointer<xmlChar> name,
    ffi.Pointer<xmlChar> pubid,
    ffi.Pointer<xmlChar> sysid,
    ffi.Pointer<xmlChar> subset,
  ) {
    return _xmlTextWriterWriteDTD(
      writer,
      name,
      pubid,
      sysid,
      subset,
    );
  }

  late final _xmlTextWriterWriteDTDPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              xmlTextWriterPtr,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>)>>('xmlTextWriterWriteDTD');
  late final _xmlTextWriterWriteDTD = _xmlTextWriterWriteDTDPtr.asFunction<
      int Function(xmlTextWriterPtr, ffi.Pointer<xmlChar>, ffi.Pointer<xmlChar>,
          ffi.Pointer<xmlChar>, ffi.Pointer<xmlChar>)>();

  int xmlTextWriterStartDTDElement(
    xmlTextWriterPtr writer,
    ffi.Pointer<xmlChar> name,
  ) {
    return _xmlTextWriterStartDTDElement(
      writer,
      name,
    );
  }

  late final _xmlTextWriterStartDTDElementPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(xmlTextWriterPtr,
              ffi.Pointer<xmlChar>)>>('xmlTextWriterStartDTDElement');
  late final _xmlTextWriterStartDTDElement = _xmlTextWriterStartDTDElementPtr
      .asFunction<int Function(xmlTextWriterPtr, ffi.Pointer<xmlChar>)>();

  int xmlTextWriterEndDTDElement(
    xmlTextWriterPtr writer,
  ) {
    return _xmlTextWriterEndDTDElement(
      writer,
    );
  }

  late final _xmlTextWriterEndDTDElementPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(xmlTextWriterPtr)>>(
          'xmlTextWriterEndDTDElement');
  late final _xmlTextWriterEndDTDElement = _xmlTextWriterEndDTDElementPtr
      .asFunction<int Function(xmlTextWriterPtr)>();

  int xmlTextWriterWriteFormatDTDElement(
    xmlTextWriterPtr writer,
    ffi.Pointer<xmlChar> name,
    ffi.Pointer<ffi.Char> format,
  ) {
    return _xmlTextWriterWriteFormatDTDElement(
      writer,
      name,
      format,
    );
  }

  late final _xmlTextWriterWriteFormatDTDElementPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(xmlTextWriterPtr, ffi.Pointer<xmlChar>,
              ffi.Pointer<ffi.Char>)>>('xmlTextWriterWriteFormatDTDElement');
  late final _xmlTextWriterWriteFormatDTDElement =
      _xmlTextWriterWriteFormatDTDElementPtr.asFunction<
          int Function(
              xmlTextWriterPtr, ffi.Pointer<xmlChar>, ffi.Pointer<ffi.Char>)>();

  int xmlTextWriterWriteVFormatDTDElement(
    xmlTextWriterPtr writer,
    ffi.Pointer<xmlChar> name,
    ffi.Pointer<ffi.Char> format,
    ffi.Pointer<__va_list_tag> argptr,
  ) {
    return _xmlTextWriterWriteVFormatDTDElement(
      writer,
      name,
      format,
      argptr,
    );
  }

  late final _xmlTextWriterWriteVFormatDTDElementPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(xmlTextWriterPtr, ffi.Pointer<xmlChar>,
                  ffi.Pointer<ffi.Char>, ffi.Pointer<__va_list_tag>)>>(
      'xmlTextWriterWriteVFormatDTDElement');
  late final _xmlTextWriterWriteVFormatDTDElement =
      _xmlTextWriterWriteVFormatDTDElementPtr.asFunction<
          int Function(xmlTextWriterPtr, ffi.Pointer<xmlChar>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<__va_list_tag>)>();

  int xmlTextWriterWriteDTDElement(
    xmlTextWriterPtr writer,
    ffi.Pointer<xmlChar> name,
    ffi.Pointer<xmlChar> content,
  ) {
    return _xmlTextWriterWriteDTDElement(
      writer,
      name,
      content,
    );
  }

  late final _xmlTextWriterWriteDTDElementPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(xmlTextWriterPtr, ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>)>>('xmlTextWriterWriteDTDElement');
  late final _xmlTextWriterWriteDTDElement =
      _xmlTextWriterWriteDTDElementPtr.asFunction<
          int Function(
              xmlTextWriterPtr, ffi.Pointer<xmlChar>, ffi.Pointer<xmlChar>)>();

  int xmlTextWriterStartDTDAttlist(
    xmlTextWriterPtr writer,
    ffi.Pointer<xmlChar> name,
  ) {
    return _xmlTextWriterStartDTDAttlist(
      writer,
      name,
    );
  }

  late final _xmlTextWriterStartDTDAttlistPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(xmlTextWriterPtr,
              ffi.Pointer<xmlChar>)>>('xmlTextWriterStartDTDAttlist');
  late final _xmlTextWriterStartDTDAttlist = _xmlTextWriterStartDTDAttlistPtr
      .asFunction<int Function(xmlTextWriterPtr, ffi.Pointer<xmlChar>)>();

  int xmlTextWriterEndDTDAttlist(
    xmlTextWriterPtr writer,
  ) {
    return _xmlTextWriterEndDTDAttlist(
      writer,
    );
  }

  late final _xmlTextWriterEndDTDAttlistPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(xmlTextWriterPtr)>>(
          'xmlTextWriterEndDTDAttlist');
  late final _xmlTextWriterEndDTDAttlist = _xmlTextWriterEndDTDAttlistPtr
      .asFunction<int Function(xmlTextWriterPtr)>();

  int xmlTextWriterWriteFormatDTDAttlist(
    xmlTextWriterPtr writer,
    ffi.Pointer<xmlChar> name,
    ffi.Pointer<ffi.Char> format,
  ) {
    return _xmlTextWriterWriteFormatDTDAttlist(
      writer,
      name,
      format,
    );
  }

  late final _xmlTextWriterWriteFormatDTDAttlistPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(xmlTextWriterPtr, ffi.Pointer<xmlChar>,
              ffi.Pointer<ffi.Char>)>>('xmlTextWriterWriteFormatDTDAttlist');
  late final _xmlTextWriterWriteFormatDTDAttlist =
      _xmlTextWriterWriteFormatDTDAttlistPtr.asFunction<
          int Function(
              xmlTextWriterPtr, ffi.Pointer<xmlChar>, ffi.Pointer<ffi.Char>)>();

  int xmlTextWriterWriteVFormatDTDAttlist(
    xmlTextWriterPtr writer,
    ffi.Pointer<xmlChar> name,
    ffi.Pointer<ffi.Char> format,
    ffi.Pointer<__va_list_tag> argptr,
  ) {
    return _xmlTextWriterWriteVFormatDTDAttlist(
      writer,
      name,
      format,
      argptr,
    );
  }

  late final _xmlTextWriterWriteVFormatDTDAttlistPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(xmlTextWriterPtr, ffi.Pointer<xmlChar>,
                  ffi.Pointer<ffi.Char>, ffi.Pointer<__va_list_tag>)>>(
      'xmlTextWriterWriteVFormatDTDAttlist');
  late final _xmlTextWriterWriteVFormatDTDAttlist =
      _xmlTextWriterWriteVFormatDTDAttlistPtr.asFunction<
          int Function(xmlTextWriterPtr, ffi.Pointer<xmlChar>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<__va_list_tag>)>();

  int xmlTextWriterWriteDTDAttlist(
    xmlTextWriterPtr writer,
    ffi.Pointer<xmlChar> name,
    ffi.Pointer<xmlChar> content,
  ) {
    return _xmlTextWriterWriteDTDAttlist(
      writer,
      name,
      content,
    );
  }

  late final _xmlTextWriterWriteDTDAttlistPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(xmlTextWriterPtr, ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>)>>('xmlTextWriterWriteDTDAttlist');
  late final _xmlTextWriterWriteDTDAttlist =
      _xmlTextWriterWriteDTDAttlistPtr.asFunction<
          int Function(
              xmlTextWriterPtr, ffi.Pointer<xmlChar>, ffi.Pointer<xmlChar>)>();

  int xmlTextWriterStartDTDEntity(
    xmlTextWriterPtr writer,
    int pe,
    ffi.Pointer<xmlChar> name,
  ) {
    return _xmlTextWriterStartDTDEntity(
      writer,
      pe,
      name,
    );
  }

  late final _xmlTextWriterStartDTDEntityPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(xmlTextWriterPtr, ffi.Int,
              ffi.Pointer<xmlChar>)>>('xmlTextWriterStartDTDEntity');
  late final _xmlTextWriterStartDTDEntity = _xmlTextWriterStartDTDEntityPtr
      .asFunction<int Function(xmlTextWriterPtr, int, ffi.Pointer<xmlChar>)>();

  int xmlTextWriterEndDTDEntity(
    xmlTextWriterPtr writer,
  ) {
    return _xmlTextWriterEndDTDEntity(
      writer,
    );
  }

  late final _xmlTextWriterEndDTDEntityPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(xmlTextWriterPtr)>>(
          'xmlTextWriterEndDTDEntity');
  late final _xmlTextWriterEndDTDEntity = _xmlTextWriterEndDTDEntityPtr
      .asFunction<int Function(xmlTextWriterPtr)>();

  int xmlTextWriterWriteFormatDTDInternalEntity(
    xmlTextWriterPtr writer,
    int pe,
    ffi.Pointer<xmlChar> name,
    ffi.Pointer<ffi.Char> format,
  ) {
    return _xmlTextWriterWriteFormatDTDInternalEntity(
      writer,
      pe,
      name,
      format,
    );
  }

  late final _xmlTextWriterWriteFormatDTDInternalEntityPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(xmlTextWriterPtr, ffi.Int, ffi.Pointer<xmlChar>,
                  ffi.Pointer<ffi.Char>)>>(
      'xmlTextWriterWriteFormatDTDInternalEntity');
  late final _xmlTextWriterWriteFormatDTDInternalEntity =
      _xmlTextWriterWriteFormatDTDInternalEntityPtr.asFunction<
          int Function(xmlTextWriterPtr, int, ffi.Pointer<xmlChar>,
              ffi.Pointer<ffi.Char>)>();

  int xmlTextWriterWriteVFormatDTDInternalEntity(
    xmlTextWriterPtr writer,
    int pe,
    ffi.Pointer<xmlChar> name,
    ffi.Pointer<ffi.Char> format,
    ffi.Pointer<__va_list_tag> argptr,
  ) {
    return _xmlTextWriterWriteVFormatDTDInternalEntity(
      writer,
      pe,
      name,
      format,
      argptr,
    );
  }

  late final _xmlTextWriterWriteVFormatDTDInternalEntityPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(xmlTextWriterPtr, ffi.Int, ffi.Pointer<xmlChar>,
                  ffi.Pointer<ffi.Char>, ffi.Pointer<__va_list_tag>)>>(
      'xmlTextWriterWriteVFormatDTDInternalEntity');
  late final _xmlTextWriterWriteVFormatDTDInternalEntity =
      _xmlTextWriterWriteVFormatDTDInternalEntityPtr.asFunction<
          int Function(xmlTextWriterPtr, int, ffi.Pointer<xmlChar>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<__va_list_tag>)>();

  int xmlTextWriterWriteDTDInternalEntity(
    xmlTextWriterPtr writer,
    int pe,
    ffi.Pointer<xmlChar> name,
    ffi.Pointer<xmlChar> content,
  ) {
    return _xmlTextWriterWriteDTDInternalEntity(
      writer,
      pe,
      name,
      content,
    );
  }

  late final _xmlTextWriterWriteDTDInternalEntityPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(xmlTextWriterPtr, ffi.Int, ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>)>>('xmlTextWriterWriteDTDInternalEntity');
  late final _xmlTextWriterWriteDTDInternalEntity =
      _xmlTextWriterWriteDTDInternalEntityPtr.asFunction<
          int Function(xmlTextWriterPtr, int, ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>)>();

  int xmlTextWriterWriteDTDExternalEntity(
    xmlTextWriterPtr writer,
    int pe,
    ffi.Pointer<xmlChar> name,
    ffi.Pointer<xmlChar> pubid,
    ffi.Pointer<xmlChar> sysid,
    ffi.Pointer<xmlChar> ndataid,
  ) {
    return _xmlTextWriterWriteDTDExternalEntity(
      writer,
      pe,
      name,
      pubid,
      sysid,
      ndataid,
    );
  }

  late final _xmlTextWriterWriteDTDExternalEntityPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              xmlTextWriterPtr,
              ffi.Int,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>)>>('xmlTextWriterWriteDTDExternalEntity');
  late final _xmlTextWriterWriteDTDExternalEntity =
      _xmlTextWriterWriteDTDExternalEntityPtr.asFunction<
          int Function(
              xmlTextWriterPtr,
              int,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>)>();

  int xmlTextWriterWriteDTDExternalEntityContents(
    xmlTextWriterPtr writer,
    ffi.Pointer<xmlChar> pubid,
    ffi.Pointer<xmlChar> sysid,
    ffi.Pointer<xmlChar> ndataid,
  ) {
    return _xmlTextWriterWriteDTDExternalEntityContents(
      writer,
      pubid,
      sysid,
      ndataid,
    );
  }

  late final _xmlTextWriterWriteDTDExternalEntityContentsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(xmlTextWriterPtr, ffi.Pointer<xmlChar>,
                  ffi.Pointer<xmlChar>, ffi.Pointer<xmlChar>)>>(
      'xmlTextWriterWriteDTDExternalEntityContents');
  late final _xmlTextWriterWriteDTDExternalEntityContents =
      _xmlTextWriterWriteDTDExternalEntityContentsPtr.asFunction<
          int Function(xmlTextWriterPtr, ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>, ffi.Pointer<xmlChar>)>();

  int xmlTextWriterWriteDTDEntity(
    xmlTextWriterPtr writer,
    int pe,
    ffi.Pointer<xmlChar> name,
    ffi.Pointer<xmlChar> pubid,
    ffi.Pointer<xmlChar> sysid,
    ffi.Pointer<xmlChar> ndataid,
    ffi.Pointer<xmlChar> content,
  ) {
    return _xmlTextWriterWriteDTDEntity(
      writer,
      pe,
      name,
      pubid,
      sysid,
      ndataid,
      content,
    );
  }

  late final _xmlTextWriterWriteDTDEntityPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              xmlTextWriterPtr,
              ffi.Int,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>)>>('xmlTextWriterWriteDTDEntity');
  late final _xmlTextWriterWriteDTDEntity =
      _xmlTextWriterWriteDTDEntityPtr.asFunction<
          int Function(
              xmlTextWriterPtr,
              int,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>)>();

  int xmlTextWriterWriteDTDNotation(
    xmlTextWriterPtr writer,
    ffi.Pointer<xmlChar> name,
    ffi.Pointer<xmlChar> pubid,
    ffi.Pointer<xmlChar> sysid,
  ) {
    return _xmlTextWriterWriteDTDNotation(
      writer,
      name,
      pubid,
      sysid,
    );
  }

  late final _xmlTextWriterWriteDTDNotationPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              xmlTextWriterPtr,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>)>>('xmlTextWriterWriteDTDNotation');
  late final _xmlTextWriterWriteDTDNotation =
      _xmlTextWriterWriteDTDNotationPtr.asFunction<
          int Function(xmlTextWriterPtr, ffi.Pointer<xmlChar>,
              ffi.Pointer<xmlChar>, ffi.Pointer<xmlChar>)>();

  int xmlTextWriterSetIndent(
    xmlTextWriterPtr writer,
    int indent,
  ) {
    return _xmlTextWriterSetIndent(
      writer,
      indent,
    );
  }

  late final _xmlTextWriterSetIndentPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(xmlTextWriterPtr, ffi.Int)>>(
          'xmlTextWriterSetIndent');
  late final _xmlTextWriterSetIndent = _xmlTextWriterSetIndentPtr
      .asFunction<int Function(xmlTextWriterPtr, int)>();

  int xmlTextWriterSetIndentString(
    xmlTextWriterPtr writer,
    ffi.Pointer<xmlChar> str,
  ) {
    return _xmlTextWriterSetIndentString(
      writer,
      str,
    );
  }

  late final _xmlTextWriterSetIndentStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(xmlTextWriterPtr,
              ffi.Pointer<xmlChar>)>>('xmlTextWriterSetIndentString');
  late final _xmlTextWriterSetIndentString = _xmlTextWriterSetIndentStringPtr
      .asFunction<int Function(xmlTextWriterPtr, ffi.Pointer<xmlChar>)>();

  int xmlTextWriterSetQuoteChar(
    xmlTextWriterPtr writer,
    int quotechar,
  ) {
    return _xmlTextWriterSetQuoteChar(
      writer,
      quotechar,
    );
  }

  late final _xmlTextWriterSetQuoteCharPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(xmlTextWriterPtr, xmlChar)>>(
          'xmlTextWriterSetQuoteChar');
  late final _xmlTextWriterSetQuoteChar = _xmlTextWriterSetQuoteCharPtr
      .asFunction<int Function(xmlTextWriterPtr, int)>();

  int xmlTextWriterFlush(
    xmlTextWriterPtr writer,
  ) {
    return _xmlTextWriterFlush(
      writer,
    );
  }

  late final _xmlTextWriterFlushPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(xmlTextWriterPtr)>>(
          'xmlTextWriterFlush');
  late final _xmlTextWriterFlush =
      _xmlTextWriterFlushPtr.asFunction<int Function(xmlTextWriterPtr)>();
}

/// xmlChar:
///
/// This is a basic byte in an UTF-8 encoded string.
/// It's unsigned allowing to pinpoint case where char * are assigned
/// to xmlChar * (possibly making serialization back impossible).
typedef xmlChar = ffi.UnsignedChar;
typedef DartxmlChar = int;

final class __va_list_tag extends ffi.Struct {
  @ffi.UnsignedInt()
  external int gp_offset;

  @ffi.UnsignedInt()
  external int fp_offset;

  external ffi.Pointer<ffi.Void> overflow_arg_area;

  external ffi.Pointer<ffi.Void> reg_save_area;
}

final class _xmlParserInputBuffer extends ffi.Struct {
  external ffi.Pointer<ffi.Void> context;

  external xmlInputReadCallback readcallback;

  external xmlInputCloseCallback closecallback;

  external xmlCharEncodingHandlerPtr encoder;

  external xmlBufPtr buffer;

  external xmlBufPtr raw;

  @ffi.Int()
  external int compressed;

  @ffi.Int()
  external int error;

  @ffi.UnsignedLong()
  external int rawconsumed;
}

/// xmlInputReadCallback:
/// @context:  an Input context
/// @buffer:  the buffer to store data read
/// @len:  the length of the buffer in bytes
///
/// Callback used in the I/O Input API to read the resource
///
/// Returns the number of bytes read or -1 in case of error
typedef xmlInputReadCallback
    = ffi.Pointer<ffi.NativeFunction<xmlInputReadCallbackFunction>>;
typedef xmlInputReadCallbackFunction = ffi.Int Function(
    ffi.Pointer<ffi.Void> context, ffi.Pointer<ffi.Char> buffer, ffi.Int len);
typedef DartxmlInputReadCallbackFunction = int Function(
    ffi.Pointer<ffi.Void> context, ffi.Pointer<ffi.Char> buffer, int len);

/// xmlInputCloseCallback:
/// @context:  an Input context
///
/// Callback used in the I/O Input API to close the resource
///
/// Returns 0 or -1 in case of error
typedef xmlInputCloseCallback
    = ffi.Pointer<ffi.NativeFunction<xmlInputCloseCallbackFunction>>;
typedef xmlInputCloseCallbackFunction = ffi.Int Function(
    ffi.Pointer<ffi.Void> context);
typedef DartxmlInputCloseCallbackFunction = int Function(
    ffi.Pointer<ffi.Void> context);
typedef xmlCharEncodingHandlerPtr = ffi.Pointer<xmlCharEncodingHandler>;
typedef xmlCharEncodingHandler = _xmlCharEncodingHandler;

final class _xmlCharEncodingHandler extends ffi.Struct {
  external ffi.Pointer<ffi.Char> name;

  external xmlCharEncodingInputFunc input;

  external xmlCharEncodingOutputFunc output;

  external iconv_t iconv_in;

  external iconv_t iconv_out;

  external ffi.Pointer<uconv_t> uconv_in;

  external ffi.Pointer<uconv_t> uconv_out;
}

/// xmlCharEncodingInputFunc:
/// @out:  a pointer to an array of bytes to store the UTF-8 result
/// @outlen:  the length of @out
/// @in:  a pointer to an array of chars in the original encoding
/// @inlen:  the length of @in
///
/// Take a block of chars in the original encoding and try to convert
/// it to an UTF-8 block of chars out.
///
/// Returns the number of bytes written, -1 if lack of space, or -2
/// if the transcoding failed.
/// The value of @inlen after return is the number of octets consumed
/// if the return value is positive, else unpredictiable.
/// The value of @outlen after return is the number of octets consumed.
typedef xmlCharEncodingInputFunc
    = ffi.Pointer<ffi.NativeFunction<xmlCharEncodingInputFuncFunction>>;
typedef xmlCharEncodingInputFuncFunction = ffi.Int Function(
    ffi.Pointer<ffi.UnsignedChar> out,
    ffi.Pointer<ffi.Int> outlen,
    ffi.Pointer<ffi.UnsignedChar> in1,
    ffi.Pointer<ffi.Int> inlen);
typedef DartxmlCharEncodingInputFuncFunction = int Function(
    ffi.Pointer<ffi.UnsignedChar> out,
    ffi.Pointer<ffi.Int> outlen,
    ffi.Pointer<ffi.UnsignedChar> in1,
    ffi.Pointer<ffi.Int> inlen);

/// xmlCharEncodingOutputFunc:
/// @out:  a pointer to an array of bytes to store the result
/// @outlen:  the length of @out
/// @in:  a pointer to an array of UTF-8 chars
/// @inlen:  the length of @in
///
/// Take a block of UTF-8 chars in and try to convert it to another
/// encoding.
/// Note: a first call designed to produce heading info is called with
/// in = NULL. If stateful this should also initialize the encoder state.
///
/// Returns the number of bytes written, -1 if lack of space, or -2
/// if the transcoding failed.
/// The value of @inlen after return is the number of octets consumed
/// if the return value is positive, else unpredictiable.
/// The value of @outlen after return is the number of octets produced.
typedef xmlCharEncodingOutputFunc
    = ffi.Pointer<ffi.NativeFunction<xmlCharEncodingOutputFuncFunction>>;
typedef xmlCharEncodingOutputFuncFunction = ffi.Int Function(
    ffi.Pointer<ffi.UnsignedChar> out,
    ffi.Pointer<ffi.Int> outlen,
    ffi.Pointer<ffi.UnsignedChar> in1,
    ffi.Pointer<ffi.Int> inlen);
typedef DartxmlCharEncodingOutputFuncFunction = int Function(
    ffi.Pointer<ffi.UnsignedChar> out,
    ffi.Pointer<ffi.Int> outlen,
    ffi.Pointer<ffi.UnsignedChar> in1,
    ffi.Pointer<ffi.Int> inlen);
typedef iconv_t = ffi.Pointer<ffi.Void>;
typedef uconv_t = _uconv_t;

final class _uconv_t extends ffi.Struct {
  external ffi.Pointer<UConverter> uconv;

  external ffi.Pointer<UConverter> utf8;

  @ffi.Array.multi([1024])
  external ffi.Array<UChar> pivot_buf;

  external ffi.Pointer<UChar> pivot_source;

  external ffi.Pointer<UChar> pivot_target;
}

final class UConverter extends ffi.Opaque {}

typedef UChar = ffi.Uint16;
typedef DartUChar = int;

/// xmlBufPtr:
///
/// A pointer to a buffer structure, the actual structure internals are not
/// public
typedef xmlBufPtr = ffi.Pointer<xmlBuf>;

/// xmlBuf:
///
/// A buffer structure, new one, the actual structure internals are not public
typedef xmlBuf = _xmlBuf;

final class _xmlBuf extends ffi.Opaque {}

final class _xmlOutputBuffer extends ffi.Struct {
  external ffi.Pointer<ffi.Void> context;

  external xmlOutputWriteCallback writecallback;

  external xmlOutputCloseCallback closecallback;

  external xmlCharEncodingHandlerPtr encoder;

  external xmlBufPtr buffer;

  external xmlBufPtr conv;

  @ffi.Int()
  external int written;

  @ffi.Int()
  external int error;
}

/// xmlOutputWriteCallback:
/// @context:  an Output context
/// @buffer:  the buffer of data to write
/// @len:  the length of the buffer in bytes
///
/// Callback used in the I/O Output API to write to the resource
///
/// Returns the number of bytes written or -1 in case of error
typedef xmlOutputWriteCallback
    = ffi.Pointer<ffi.NativeFunction<xmlOutputWriteCallbackFunction>>;
typedef xmlOutputWriteCallbackFunction = ffi.Int Function(
    ffi.Pointer<ffi.Void> context, ffi.Pointer<ffi.Char> buffer, ffi.Int len);
typedef DartxmlOutputWriteCallbackFunction = int Function(
    ffi.Pointer<ffi.Void> context, ffi.Pointer<ffi.Char> buffer, int len);

/// xmlOutputCloseCallback:
/// @context:  an Output context
///
/// Callback used in the I/O Output API to close the resource
///
/// Returns 0 or -1 in case of error
typedef xmlOutputCloseCallback
    = ffi.Pointer<ffi.NativeFunction<xmlOutputCloseCallbackFunction>>;
typedef xmlOutputCloseCallbackFunction = ffi.Int Function(
    ffi.Pointer<ffi.Void> context);
typedef DartxmlOutputCloseCallbackFunction = int Function(
    ffi.Pointer<ffi.Void> context);

final class _xmlParserInput extends ffi.Struct {
  external xmlParserInputBufferPtr buf;

  external ffi.Pointer<ffi.Char> filename;

  external ffi.Pointer<ffi.Char> directory;

  external ffi.Pointer<xmlChar> base;

  external ffi.Pointer<xmlChar> cur;

  external ffi.Pointer<xmlChar> end;

  @ffi.Int()
  external int length;

  @ffi.Int()
  external int line;

  @ffi.Int()
  external int col;

  @ffi.UnsignedLong()
  external int consumed;

  external xmlParserInputDeallocate free;

  external ffi.Pointer<xmlChar> encoding;

  external ffi.Pointer<xmlChar> version;

  @ffi.Int()
  external int standalone;

  @ffi.Int()
  external int id;
}

typedef xmlParserInputBufferPtr = ffi.Pointer<xmlParserInputBuffer>;
typedef xmlParserInputBuffer = _xmlParserInputBuffer;

/// xmlParserInputDeallocate:
/// @str:  the string to deallocate
///
/// Callback for freeing some parser input allocations.
typedef xmlParserInputDeallocate
    = ffi.Pointer<ffi.NativeFunction<xmlParserInputDeallocateFunction>>;
typedef xmlParserInputDeallocateFunction = ffi.Void Function(
    ffi.Pointer<xmlChar> str);
typedef DartxmlParserInputDeallocateFunction = void Function(
    ffi.Pointer<xmlChar> str);

/// xmlParserCtxt:
///
/// The parser context.
/// NOTE This doesn't completely define the parser state, the (current ?)
/// design of the parser uses recursive function calls since this allow
/// and easy mapping from the production rules of the specification
/// to the actual code. The drawback is that the actual function call
/// also reflect the parser state. However most of the parsing routines
/// takes as the only argument the parser context pointer, so migrating
/// to a state based parser for progressive parsing shouldn't be too hard.
final class _xmlParserCtxt extends ffi.Struct {
  external ffi.Pointer<_xmlSAXHandler> sax;

  external ffi.Pointer<ffi.Void> userData;

  external xmlDocPtr myDoc;

  @ffi.Int()
  external int wellFormed;

  @ffi.Int()
  external int replaceEntities;

  external ffi.Pointer<xmlChar> version;

  external ffi.Pointer<xmlChar> encoding;

  @ffi.Int()
  external int standalone;

  @ffi.Int()
  external int html;

  external xmlParserInputPtr input;

  @ffi.Int()
  external int inputNr;

  @ffi.Int()
  external int inputMax;

  external ffi.Pointer<xmlParserInputPtr> inputTab;

  external xmlNodePtr node;

  @ffi.Int()
  external int nodeNr;

  @ffi.Int()
  external int nodeMax;

  external ffi.Pointer<xmlNodePtr> nodeTab;

  @ffi.Int()
  external int record_info;

  external xmlParserNodeInfoSeq node_seq;

  @ffi.Int()
  external int errNo;

  @ffi.Int()
  external int hasExternalSubset;

  @ffi.Int()
  external int hasPErefs;

  @ffi.Int()
  external int external1;

  @ffi.Int()
  external int valid;

  @ffi.Int()
  external int validate;

  external xmlValidCtxt vctxt;

  @ffi.Int32()
  external int instate;

  @ffi.Int()
  external int token;

  external ffi.Pointer<ffi.Char> directory;

  external ffi.Pointer<xmlChar> name;

  @ffi.Int()
  external int nameNr;

  @ffi.Int()
  external int nameMax;

  external ffi.Pointer<ffi.Pointer<xmlChar>> nameTab;

  @ffi.Long()
  external int nbChars;

  @ffi.Long()
  external int checkIndex;

  @ffi.Int()
  external int keepBlanks;

  @ffi.Int()
  external int disableSAX;

  @ffi.Int()
  external int inSubset;

  external ffi.Pointer<xmlChar> intSubName;

  external ffi.Pointer<xmlChar> extSubURI;

  external ffi.Pointer<xmlChar> extSubSystem;

  external ffi.Pointer<ffi.Int> space;

  @ffi.Int()
  external int spaceNr;

  @ffi.Int()
  external int spaceMax;

  external ffi.Pointer<ffi.Int> spaceTab;

  @ffi.Int()
  external int depth;

  external xmlParserInputPtr entity;

  @ffi.Int()
  external int charset;

  @ffi.Int()
  external int nodelen;

  @ffi.Int()
  external int nodemem;

  @ffi.Int()
  external int pedantic;

  external ffi.Pointer<ffi.Void> _private;

  @ffi.Int()
  external int loadsubset;

  @ffi.Int()
  external int linenumbers;

  external ffi.Pointer<ffi.Void> catalogs;

  @ffi.Int()
  external int recovery;

  @ffi.Int()
  external int progressive;

  external xmlDictPtr dict;

  external ffi.Pointer<ffi.Pointer<xmlChar>> atts;

  @ffi.Int()
  external int maxatts;

  @ffi.Int()
  external int docdict;

  external ffi.Pointer<xmlChar> str_xml;

  external ffi.Pointer<xmlChar> str_xmlns;

  external ffi.Pointer<xmlChar> str_xml_ns;

  @ffi.Int()
  external int sax2;

  @ffi.Int()
  external int nsNr;

  @ffi.Int()
  external int nsMax;

  external ffi.Pointer<ffi.Pointer<xmlChar>> nsTab;

  external ffi.Pointer<ffi.Int> attallocs;

  external ffi.Pointer<xmlStartTag> pushTab;

  external xmlHashTablePtr attsDefault;

  external xmlHashTablePtr attsSpecial;

  @ffi.Int()
  external int nsWellFormed;

  @ffi.Int()
  external int options;

  @ffi.Int()
  external int dictNames;

  @ffi.Int()
  external int freeElemsNr;

  external xmlNodePtr freeElems;

  @ffi.Int()
  external int freeAttrsNr;

  external xmlAttrPtr freeAttrs;

  external xmlError lastError;

  @ffi.Int32()
  external int parseMode;

  @ffi.UnsignedLong()
  external int nbentities;

  @ffi.UnsignedLong()
  external int sizeentities;

  external ffi.Pointer<xmlParserNodeInfo> nodeInfo;

  @ffi.Int()
  external int nodeInfoNr;

  @ffi.Int()
  external int nodeInfoMax;

  external ffi.Pointer<xmlParserNodeInfo> nodeInfoTab;

  @ffi.Int()
  external int input_id;

  @ffi.UnsignedLong()
  external int sizeentcopy;
}

final class _xmlSAXHandler extends ffi.Struct {
  external internalSubsetSAXFunc internalSubset;

  external isStandaloneSAXFunc isStandalone;

  external hasInternalSubsetSAXFunc hasInternalSubset;

  external hasExternalSubsetSAXFunc hasExternalSubset;

  external resolveEntitySAXFunc resolveEntity;

  external getEntitySAXFunc getEntity;

  external entityDeclSAXFunc entityDecl;

  external notationDeclSAXFunc notationDecl;

  external attributeDeclSAXFunc attributeDecl;

  external elementDeclSAXFunc elementDecl;

  external unparsedEntityDeclSAXFunc unparsedEntityDecl;

  external setDocumentLocatorSAXFunc setDocumentLocator;

  external startDocumentSAXFunc startDocument;

  external endDocumentSAXFunc endDocument;

  external startElementSAXFunc startElement;

  external endElementSAXFunc endElement;

  external referenceSAXFunc reference;

  external charactersSAXFunc characters;

  external ignorableWhitespaceSAXFunc ignorableWhitespace;

  external processingInstructionSAXFunc processingInstruction;

  external commentSAXFunc comment;

  external warningSAXFunc warning;

  external errorSAXFunc error;

  external fatalErrorSAXFunc fatalError;

  external getParameterEntitySAXFunc getParameterEntity;

  external cdataBlockSAXFunc cdataBlock;

  external externalSubsetSAXFunc externalSubset;

  @ffi.UnsignedInt()
  external int initialized;

  external ffi.Pointer<ffi.Void> _private;

  external startElementNsSAX2Func startElementNs;

  external endElementNsSAX2Func endElementNs;

  external xmlStructuredErrorFunc serror;
}

/// internalSubsetSAXFunc:
/// @ctx:  the user data (XML parser context)
/// @name:  the root element name
/// @ExternalID:  the external ID
/// @SystemID:  the SYSTEM ID (e.g. filename or URL)
///
/// Callback on internal subset declaration.
typedef internalSubsetSAXFunc
    = ffi.Pointer<ffi.NativeFunction<internalSubsetSAXFuncFunction>>;
typedef internalSubsetSAXFuncFunction = ffi.Void Function(
    ffi.Pointer<ffi.Void> ctx,
    ffi.Pointer<xmlChar> name,
    ffi.Pointer<xmlChar> ExternalID,
    ffi.Pointer<xmlChar> SystemID);
typedef DartinternalSubsetSAXFuncFunction = void Function(
    ffi.Pointer<ffi.Void> ctx,
    ffi.Pointer<xmlChar> name,
    ffi.Pointer<xmlChar> ExternalID,
    ffi.Pointer<xmlChar> SystemID);

/// isStandaloneSAXFunc:
/// @ctx:  the user data (XML parser context)
///
/// Is this document tagged standalone?
///
/// Returns 1 if true
typedef isStandaloneSAXFunc
    = ffi.Pointer<ffi.NativeFunction<isStandaloneSAXFuncFunction>>;
typedef isStandaloneSAXFuncFunction = ffi.Int Function(
    ffi.Pointer<ffi.Void> ctx);
typedef DartisStandaloneSAXFuncFunction = int Function(
    ffi.Pointer<ffi.Void> ctx);

/// hasInternalSubsetSAXFunc:
/// @ctx:  the user data (XML parser context)
///
/// Does this document has an internal subset.
///
/// Returns 1 if true
typedef hasInternalSubsetSAXFunc
    = ffi.Pointer<ffi.NativeFunction<hasInternalSubsetSAXFuncFunction>>;
typedef hasInternalSubsetSAXFuncFunction = ffi.Int Function(
    ffi.Pointer<ffi.Void> ctx);
typedef DarthasInternalSubsetSAXFuncFunction = int Function(
    ffi.Pointer<ffi.Void> ctx);

/// hasExternalSubsetSAXFunc:
/// @ctx:  the user data (XML parser context)
///
/// Does this document has an external subset?
///
/// Returns 1 if true
typedef hasExternalSubsetSAXFunc
    = ffi.Pointer<ffi.NativeFunction<hasExternalSubsetSAXFuncFunction>>;
typedef hasExternalSubsetSAXFuncFunction = ffi.Int Function(
    ffi.Pointer<ffi.Void> ctx);
typedef DarthasExternalSubsetSAXFuncFunction = int Function(
    ffi.Pointer<ffi.Void> ctx);

/// resolveEntitySAXFunc:
/// @ctx:  the user data (XML parser context)
/// @publicId: The public ID of the entity
/// @systemId: The system ID of the entity
///
/// Callback:
/// The entity loader, to control the loading of external entities,
/// the application can either:
/// - override this resolveEntity() callback in the SAX block
/// - or better use the xmlSetExternalEntityLoader() function to
/// set up it's own entity resolution routine
///
/// Returns the xmlParserInputPtr if inlined or NULL for DOM behaviour.
typedef resolveEntitySAXFunc
    = ffi.Pointer<ffi.NativeFunction<resolveEntitySAXFuncFunction>>;
typedef resolveEntitySAXFuncFunction = xmlParserInputPtr Function(
    ffi.Pointer<ffi.Void> ctx,
    ffi.Pointer<xmlChar> publicId,
    ffi.Pointer<xmlChar> systemId);
typedef xmlParserInputPtr = ffi.Pointer<xmlParserInput>;
typedef xmlParserInput = _xmlParserInput;

/// getEntitySAXFunc:
/// @ctx:  the user data (XML parser context)
/// @name: The entity name
///
/// Get an entity by name.
///
/// Returns the xmlEntityPtr if found.
typedef getEntitySAXFunc
    = ffi.Pointer<ffi.NativeFunction<getEntitySAXFuncFunction>>;
typedef getEntitySAXFuncFunction = xmlEntityPtr Function(
    ffi.Pointer<ffi.Void> ctx, ffi.Pointer<xmlChar> name);
typedef xmlEntityPtr = ffi.Pointer<xmlEntity>;
typedef xmlEntity = _xmlEntity;

final class _xmlEntity extends ffi.Struct {
  external ffi.Pointer<ffi.Void> _private;

  @ffi.Int32()
  external int type;

  external ffi.Pointer<xmlChar> name;

  external ffi.Pointer<_xmlNode> children;

  external ffi.Pointer<_xmlNode> last;

  external ffi.Pointer<_xmlDtd> parent;

  external ffi.Pointer<_xmlNode> next;

  external ffi.Pointer<_xmlNode> prev;

  external ffi.Pointer<_xmlDoc> doc;

  external ffi.Pointer<xmlChar> orig;

  external ffi.Pointer<xmlChar> content;

  @ffi.Int()
  external int length;

  @ffi.Int32()
  external int etype;

  external ffi.Pointer<xmlChar> ExternalID;

  external ffi.Pointer<xmlChar> SystemID;

  external ffi.Pointer<_xmlEntity> nexte;

  external ffi.Pointer<xmlChar> URI;

  @ffi.Int()
  external int owner;

  @ffi.Int()
  external int checked;
}

abstract class xmlElementType {
  static const int XML_ELEMENT_NODE = 1;
  static const int XML_ATTRIBUTE_NODE = 2;
  static const int XML_TEXT_NODE = 3;
  static const int XML_CDATA_SECTION_NODE = 4;
  static const int XML_ENTITY_REF_NODE = 5;
  static const int XML_ENTITY_NODE = 6;
  static const int XML_PI_NODE = 7;
  static const int XML_COMMENT_NODE = 8;
  static const int XML_DOCUMENT_NODE = 9;
  static const int XML_DOCUMENT_TYPE_NODE = 10;
  static const int XML_DOCUMENT_FRAG_NODE = 11;
  static const int XML_NOTATION_NODE = 12;
  static const int XML_HTML_DOCUMENT_NODE = 13;
  static const int XML_DTD_NODE = 14;
  static const int XML_ELEMENT_DECL = 15;
  static const int XML_ATTRIBUTE_DECL = 16;
  static const int XML_ENTITY_DECL = 17;
  static const int XML_NAMESPACE_DECL = 18;
  static const int XML_XINCLUDE_START = 19;
  static const int XML_XINCLUDE_END = 20;
  static const int XML_DOCB_DOCUMENT_NODE = 21;
}

final class _xmlNode extends ffi.Struct {
  external ffi.Pointer<ffi.Void> _private;

  @ffi.Int32()
  external int type;

  external ffi.Pointer<xmlChar> name;

  external ffi.Pointer<_xmlNode> children;

  external ffi.Pointer<_xmlNode> last;

  external ffi.Pointer<_xmlNode> parent;

  external ffi.Pointer<_xmlNode> next;

  external ffi.Pointer<_xmlNode> prev;

  external ffi.Pointer<_xmlDoc> doc;

  external ffi.Pointer<xmlNs> ns;

  external ffi.Pointer<xmlChar> content;

  external ffi.Pointer<_xmlAttr> properties;

  external ffi.Pointer<xmlNs> nsDef;

  external ffi.Pointer<ffi.Void> psvi;

  @ffi.UnsignedShort()
  external int line;

  @ffi.UnsignedShort()
  external int extra;
}

final class _xmlDoc extends ffi.Struct {
  external ffi.Pointer<ffi.Void> _private;

  @ffi.Int32()
  external int type;

  external ffi.Pointer<ffi.Char> name;

  external ffi.Pointer<_xmlNode> children;

  external ffi.Pointer<_xmlNode> last;

  external ffi.Pointer<_xmlNode> parent;

  external ffi.Pointer<_xmlNode> next;

  external ffi.Pointer<_xmlNode> prev;

  external ffi.Pointer<_xmlDoc> doc;

  @ffi.Int()
  external int compression;

  @ffi.Int()
  external int standalone;

  external ffi.Pointer<_xmlDtd> intSubset;

  external ffi.Pointer<_xmlDtd> extSubset;

  external ffi.Pointer<_xmlNs> oldNs;

  external ffi.Pointer<xmlChar> version;

  external ffi.Pointer<xmlChar> encoding;

  external ffi.Pointer<ffi.Void> ids;

  external ffi.Pointer<ffi.Void> refs;

  external ffi.Pointer<xmlChar> URL;

  @ffi.Int()
  external int charset;

  external ffi.Pointer<_xmlDict> dict;

  external ffi.Pointer<ffi.Void> psvi;

  @ffi.Int()
  external int parseFlags;

  @ffi.Int()
  external int properties;
}

final class _xmlDtd extends ffi.Struct {
  external ffi.Pointer<ffi.Void> _private;

  @ffi.Int32()
  external int type;

  external ffi.Pointer<xmlChar> name;

  external ffi.Pointer<_xmlNode> children;

  external ffi.Pointer<_xmlNode> last;

  external ffi.Pointer<_xmlDoc> parent;

  external ffi.Pointer<_xmlNode> next;

  external ffi.Pointer<_xmlNode> prev;

  external ffi.Pointer<_xmlDoc> doc;

  external ffi.Pointer<ffi.Void> notations;

  external ffi.Pointer<ffi.Void> elements;

  external ffi.Pointer<ffi.Void> attributes;

  external ffi.Pointer<ffi.Void> entities;

  external ffi.Pointer<xmlChar> ExternalID;

  external ffi.Pointer<xmlChar> SystemID;

  external ffi.Pointer<ffi.Void> pentities;
}

final class _xmlNs extends ffi.Struct {
  external ffi.Pointer<_xmlNs> next;

  @ffi.Int32()
  external int type;

  external ffi.Pointer<xmlChar> href;

  external ffi.Pointer<xmlChar> prefix;

  external ffi.Pointer<ffi.Void> _private;

  external ffi.Pointer<_xmlDoc> context;
}

final class _xmlDict extends ffi.Opaque {}

/// xmlNs:
///
/// An XML namespace.
/// Note that prefix == NULL is valid, it defines the default namespace
/// within the subtree (until overridden).
///
/// xmlNsType is unified with xmlElementType.
typedef xmlNs = _xmlNs;

final class _xmlAttr extends ffi.Struct {
  external ffi.Pointer<ffi.Void> _private;

  @ffi.Int32()
  external int type;

  external ffi.Pointer<xmlChar> name;

  external ffi.Pointer<_xmlNode> children;

  external ffi.Pointer<_xmlNode> last;

  external ffi.Pointer<_xmlNode> parent;

  external ffi.Pointer<_xmlAttr> next;

  external ffi.Pointer<_xmlAttr> prev;

  external ffi.Pointer<_xmlDoc> doc;

  external ffi.Pointer<xmlNs> ns;

  @ffi.Int32()
  external int atype;

  external ffi.Pointer<ffi.Void> psvi;
}

/// xmlAttributeType:
///
/// A DTD Attribute type definition.
abstract class xmlAttributeType {
  static const int XML_ATTRIBUTE_CDATA = 1;
  static const int XML_ATTRIBUTE_ID = 2;
  static const int XML_ATTRIBUTE_IDREF = 3;
  static const int XML_ATTRIBUTE_IDREFS = 4;
  static const int XML_ATTRIBUTE_ENTITY = 5;
  static const int XML_ATTRIBUTE_ENTITIES = 6;
  static const int XML_ATTRIBUTE_NMTOKEN = 7;
  static const int XML_ATTRIBUTE_NMTOKENS = 8;
  static const int XML_ATTRIBUTE_ENUMERATION = 9;
  static const int XML_ATTRIBUTE_NOTATION = 10;
}

abstract class xmlEntityType {
  static const int XML_INTERNAL_GENERAL_ENTITY = 1;
  static const int XML_EXTERNAL_GENERAL_PARSED_ENTITY = 2;
  static const int XML_EXTERNAL_GENERAL_UNPARSED_ENTITY = 3;
  static const int XML_INTERNAL_PARAMETER_ENTITY = 4;
  static const int XML_EXTERNAL_PARAMETER_ENTITY = 5;
  static const int XML_INTERNAL_PREDEFINED_ENTITY = 6;
}

/// entityDeclSAXFunc:
/// @ctx:  the user data (XML parser context)
/// @name:  the entity name
/// @type:  the entity type
/// @publicId: The public ID of the entity
/// @systemId: The system ID of the entity
/// @content: the entity value (without processing).
///
/// An entity definition has been parsed.
typedef entityDeclSAXFunc
    = ffi.Pointer<ffi.NativeFunction<entityDeclSAXFuncFunction>>;
typedef entityDeclSAXFuncFunction = ffi.Void Function(
    ffi.Pointer<ffi.Void> ctx,
    ffi.Pointer<xmlChar> name,
    ffi.Int type,
    ffi.Pointer<xmlChar> publicId,
    ffi.Pointer<xmlChar> systemId,
    ffi.Pointer<xmlChar> content);
typedef DartentityDeclSAXFuncFunction = void Function(
    ffi.Pointer<ffi.Void> ctx,
    ffi.Pointer<xmlChar> name,
    int type,
    ffi.Pointer<xmlChar> publicId,
    ffi.Pointer<xmlChar> systemId,
    ffi.Pointer<xmlChar> content);

/// notationDeclSAXFunc:
/// @ctx:  the user data (XML parser context)
/// @name: The name of the notation
/// @publicId: The public ID of the entity
/// @systemId: The system ID of the entity
///
/// What to do when a notation declaration has been parsed.
typedef notationDeclSAXFunc
    = ffi.Pointer<ffi.NativeFunction<notationDeclSAXFuncFunction>>;
typedef notationDeclSAXFuncFunction = ffi.Void Function(
    ffi.Pointer<ffi.Void> ctx,
    ffi.Pointer<xmlChar> name,
    ffi.Pointer<xmlChar> publicId,
    ffi.Pointer<xmlChar> systemId);
typedef DartnotationDeclSAXFuncFunction = void Function(
    ffi.Pointer<ffi.Void> ctx,
    ffi.Pointer<xmlChar> name,
    ffi.Pointer<xmlChar> publicId,
    ffi.Pointer<xmlChar> systemId);

/// attributeDeclSAXFunc:
/// @ctx:  the user data (XML parser context)
/// @elem:  the name of the element
/// @fullname:  the attribute name
/// @type:  the attribute type
/// @def:  the type of default value
/// @defaultValue: the attribute default value
/// @tree:  the tree of enumerated value set
///
/// An attribute definition has been parsed.
typedef attributeDeclSAXFunc
    = ffi.Pointer<ffi.NativeFunction<attributeDeclSAXFuncFunction>>;
typedef attributeDeclSAXFuncFunction = ffi.Void Function(
    ffi.Pointer<ffi.Void> ctx,
    ffi.Pointer<xmlChar> elem,
    ffi.Pointer<xmlChar> fullname,
    ffi.Int type,
    ffi.Int def,
    ffi.Pointer<xmlChar> defaultValue,
    xmlEnumerationPtr tree);
typedef DartattributeDeclSAXFuncFunction = void Function(
    ffi.Pointer<ffi.Void> ctx,
    ffi.Pointer<xmlChar> elem,
    ffi.Pointer<xmlChar> fullname,
    int type,
    int def,
    ffi.Pointer<xmlChar> defaultValue,
    xmlEnumerationPtr tree);
typedef xmlEnumerationPtr = ffi.Pointer<xmlEnumeration>;

/// xmlEnumeration:
///
/// List structure used when there is an enumeration in DTDs.
typedef xmlEnumeration = _xmlEnumeration;

final class _xmlEnumeration extends ffi.Struct {
  external ffi.Pointer<_xmlEnumeration> next;

  external ffi.Pointer<xmlChar> name;
}

/// elementDeclSAXFunc:
/// @ctx:  the user data (XML parser context)
/// @name:  the element name
/// @type:  the element type
/// @content: the element value tree
///
/// An element definition has been parsed.
typedef elementDeclSAXFunc
    = ffi.Pointer<ffi.NativeFunction<elementDeclSAXFuncFunction>>;
typedef elementDeclSAXFuncFunction = ffi.Void Function(
    ffi.Pointer<ffi.Void> ctx,
    ffi.Pointer<xmlChar> name,
    ffi.Int type,
    xmlElementContentPtr content);
typedef DartelementDeclSAXFuncFunction = void Function(
    ffi.Pointer<ffi.Void> ctx,
    ffi.Pointer<xmlChar> name,
    int type,
    xmlElementContentPtr content);
typedef xmlElementContentPtr = ffi.Pointer<xmlElementContent>;

/// xmlElementContent:
///
/// An XML Element content as stored after parsing an element definition
/// in a DTD.
typedef xmlElementContent = _xmlElementContent;

final class _xmlElementContent extends ffi.Struct {
  @ffi.Int32()
  external int type;

  @ffi.Int32()
  external int ocur;

  external ffi.Pointer<xmlChar> name;

  external ffi.Pointer<_xmlElementContent> c1;

  external ffi.Pointer<_xmlElementContent> c2;

  external ffi.Pointer<_xmlElementContent> parent;

  external ffi.Pointer<xmlChar> prefix;
}

/// xmlElementContentType:
///
/// Possible definitions of element content types.
abstract class xmlElementContentType {
  static const int XML_ELEMENT_CONTENT_PCDATA = 1;
  static const int XML_ELEMENT_CONTENT_ELEMENT = 2;
  static const int XML_ELEMENT_CONTENT_SEQ = 3;
  static const int XML_ELEMENT_CONTENT_OR = 4;
}

/// xmlElementContentOccur:
///
/// Possible definitions of element content occurrences.
abstract class xmlElementContentOccur {
  static const int XML_ELEMENT_CONTENT_ONCE = 1;
  static const int XML_ELEMENT_CONTENT_OPT = 2;
  static const int XML_ELEMENT_CONTENT_MULT = 3;
  static const int XML_ELEMENT_CONTENT_PLUS = 4;
}

/// unparsedEntityDeclSAXFunc:
/// @ctx:  the user data (XML parser context)
/// @name: The name of the entity
/// @publicId: The public ID of the entity
/// @systemId: The system ID of the entity
/// @notationName: the name of the notation
///
/// What to do when an unparsed entity declaration is parsed.
typedef unparsedEntityDeclSAXFunc
    = ffi.Pointer<ffi.NativeFunction<unparsedEntityDeclSAXFuncFunction>>;
typedef unparsedEntityDeclSAXFuncFunction = ffi.Void Function(
    ffi.Pointer<ffi.Void> ctx,
    ffi.Pointer<xmlChar> name,
    ffi.Pointer<xmlChar> publicId,
    ffi.Pointer<xmlChar> systemId,
    ffi.Pointer<xmlChar> notationName);
typedef DartunparsedEntityDeclSAXFuncFunction = void Function(
    ffi.Pointer<ffi.Void> ctx,
    ffi.Pointer<xmlChar> name,
    ffi.Pointer<xmlChar> publicId,
    ffi.Pointer<xmlChar> systemId,
    ffi.Pointer<xmlChar> notationName);

/// setDocumentLocatorSAXFunc:
/// @ctx:  the user data (XML parser context)
/// @loc: A SAX Locator
///
/// Receive the document locator at startup, actually xmlDefaultSAXLocator.
/// Everything is available on the context, so this is useless in our case.
typedef setDocumentLocatorSAXFunc
    = ffi.Pointer<ffi.NativeFunction<setDocumentLocatorSAXFuncFunction>>;
typedef setDocumentLocatorSAXFuncFunction = ffi.Void Function(
    ffi.Pointer<ffi.Void> ctx, xmlSAXLocatorPtr loc);
typedef DartsetDocumentLocatorSAXFuncFunction = void Function(
    ffi.Pointer<ffi.Void> ctx, xmlSAXLocatorPtr loc);
typedef xmlSAXLocatorPtr = ffi.Pointer<xmlSAXLocator>;
typedef xmlSAXLocator = _xmlSAXLocator;

/// xmlSAXLocator:
///
/// A SAX Locator.
final class _xmlSAXLocator extends ffi.Struct {
  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<xmlChar> Function(ffi.Pointer<ffi.Void> ctx)>>
      getPublicId;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<xmlChar> Function(ffi.Pointer<ffi.Void> ctx)>>
      getSystemId;

  external ffi
      .Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void> ctx)>>
      getLineNumber;

  external ffi
      .Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void> ctx)>>
      getColumnNumber;
}

/// startDocumentSAXFunc:
/// @ctx:  the user data (XML parser context)
///
/// Called when the document start being processed.
typedef startDocumentSAXFunc
    = ffi.Pointer<ffi.NativeFunction<startDocumentSAXFuncFunction>>;
typedef startDocumentSAXFuncFunction = ffi.Void Function(
    ffi.Pointer<ffi.Void> ctx);
typedef DartstartDocumentSAXFuncFunction = void Function(
    ffi.Pointer<ffi.Void> ctx);

/// endDocumentSAXFunc:
/// @ctx:  the user data (XML parser context)
///
/// Called when the document end has been detected.
typedef endDocumentSAXFunc
    = ffi.Pointer<ffi.NativeFunction<endDocumentSAXFuncFunction>>;
typedef endDocumentSAXFuncFunction = ffi.Void Function(
    ffi.Pointer<ffi.Void> ctx);
typedef DartendDocumentSAXFuncFunction = void Function(
    ffi.Pointer<ffi.Void> ctx);

/// startElementSAXFunc:
/// @ctx:  the user data (XML parser context)
/// @name:  The element name, including namespace prefix
/// @atts:  An array of name/value attributes pairs, NULL terminated
///
/// Called when an opening tag has been processed.
typedef startElementSAXFunc
    = ffi.Pointer<ffi.NativeFunction<startElementSAXFuncFunction>>;
typedef startElementSAXFuncFunction = ffi.Void Function(
    ffi.Pointer<ffi.Void> ctx,
    ffi.Pointer<xmlChar> name,
    ffi.Pointer<ffi.Pointer<xmlChar>> atts);
typedef DartstartElementSAXFuncFunction = void Function(
    ffi.Pointer<ffi.Void> ctx,
    ffi.Pointer<xmlChar> name,
    ffi.Pointer<ffi.Pointer<xmlChar>> atts);

/// endElementSAXFunc:
/// @ctx:  the user data (XML parser context)
/// @name:  The element name
///
/// Called when the end of an element has been detected.
typedef endElementSAXFunc
    = ffi.Pointer<ffi.NativeFunction<endElementSAXFuncFunction>>;
typedef endElementSAXFuncFunction = ffi.Void Function(
    ffi.Pointer<ffi.Void> ctx, ffi.Pointer<xmlChar> name);
typedef DartendElementSAXFuncFunction = void Function(
    ffi.Pointer<ffi.Void> ctx, ffi.Pointer<xmlChar> name);

/// referenceSAXFunc:
/// @ctx:  the user data (XML parser context)
/// @name:  The entity name
///
/// Called when an entity reference is detected.
typedef referenceSAXFunc
    = ffi.Pointer<ffi.NativeFunction<referenceSAXFuncFunction>>;
typedef referenceSAXFuncFunction = ffi.Void Function(
    ffi.Pointer<ffi.Void> ctx, ffi.Pointer<xmlChar> name);
typedef DartreferenceSAXFuncFunction = void Function(
    ffi.Pointer<ffi.Void> ctx, ffi.Pointer<xmlChar> name);

/// charactersSAXFunc:
/// @ctx:  the user data (XML parser context)
/// @ch:  a xmlChar string
/// @len: the number of xmlChar
///
/// Receiving some chars from the parser.
typedef charactersSAXFunc
    = ffi.Pointer<ffi.NativeFunction<charactersSAXFuncFunction>>;
typedef charactersSAXFuncFunction = ffi.Void Function(
    ffi.Pointer<ffi.Void> ctx, ffi.Pointer<xmlChar> ch, ffi.Int len);
typedef DartcharactersSAXFuncFunction = void Function(
    ffi.Pointer<ffi.Void> ctx, ffi.Pointer<xmlChar> ch, int len);

/// ignorableWhitespaceSAXFunc:
/// @ctx:  the user data (XML parser context)
/// @ch:  a xmlChar string
/// @len: the number of xmlChar
///
/// Receiving some ignorable whitespaces from the parser.
/// UNUSED: by default the DOM building will use characters.
typedef ignorableWhitespaceSAXFunc
    = ffi.Pointer<ffi.NativeFunction<ignorableWhitespaceSAXFuncFunction>>;
typedef ignorableWhitespaceSAXFuncFunction = ffi.Void Function(
    ffi.Pointer<ffi.Void> ctx, ffi.Pointer<xmlChar> ch, ffi.Int len);
typedef DartignorableWhitespaceSAXFuncFunction = void Function(
    ffi.Pointer<ffi.Void> ctx, ffi.Pointer<xmlChar> ch, int len);

/// processingInstructionSAXFunc:
/// @ctx:  the user data (XML parser context)
/// @target:  the target name
/// @data: the PI data's
///
/// A processing instruction has been parsed.
typedef processingInstructionSAXFunc
    = ffi.Pointer<ffi.NativeFunction<processingInstructionSAXFuncFunction>>;
typedef processingInstructionSAXFuncFunction = ffi.Void Function(
    ffi.Pointer<ffi.Void> ctx,
    ffi.Pointer<xmlChar> target,
    ffi.Pointer<xmlChar> data);
typedef DartprocessingInstructionSAXFuncFunction = void Function(
    ffi.Pointer<ffi.Void> ctx,
    ffi.Pointer<xmlChar> target,
    ffi.Pointer<xmlChar> data);

/// commentSAXFunc:
/// @ctx:  the user data (XML parser context)
/// @value:  the comment content
///
/// A comment has been parsed.
typedef commentSAXFunc
    = ffi.Pointer<ffi.NativeFunction<commentSAXFuncFunction>>;
typedef commentSAXFuncFunction = ffi.Void Function(
    ffi.Pointer<ffi.Void> ctx, ffi.Pointer<xmlChar> value);
typedef DartcommentSAXFuncFunction = void Function(
    ffi.Pointer<ffi.Void> ctx, ffi.Pointer<xmlChar> value);

/// warningSAXFunc:
/// @ctx:  an XML parser context
/// @msg:  the message to display/transmit
/// @...:  extra parameters for the message display
///
/// Display and format a warning messages, callback.
typedef warningSAXFunc
    = ffi.Pointer<ffi.NativeFunction<warningSAXFuncFunction>>;
typedef warningSAXFuncFunction = ffi.Void Function(
    ffi.Pointer<ffi.Void> ctx, ffi.Pointer<ffi.Char> msg);
typedef DartwarningSAXFuncFunction = void Function(
    ffi.Pointer<ffi.Void> ctx, ffi.Pointer<ffi.Char> msg);

/// errorSAXFunc:
/// @ctx:  an XML parser context
/// @msg:  the message to display/transmit
/// @...:  extra parameters for the message display
///
/// Display and format an error messages, callback.
typedef errorSAXFunc = ffi.Pointer<ffi.NativeFunction<errorSAXFuncFunction>>;
typedef errorSAXFuncFunction = ffi.Void Function(
    ffi.Pointer<ffi.Void> ctx, ffi.Pointer<ffi.Char> msg);
typedef DarterrorSAXFuncFunction = void Function(
    ffi.Pointer<ffi.Void> ctx, ffi.Pointer<ffi.Char> msg);

/// fatalErrorSAXFunc:
/// @ctx:  an XML parser context
/// @msg:  the message to display/transmit
/// @...:  extra parameters for the message display
///
/// Display and format fatal error messages, callback.
/// Note: so far fatalError() SAX callbacks are not used, error()
/// get all the callbacks for errors.
typedef fatalErrorSAXFunc
    = ffi.Pointer<ffi.NativeFunction<fatalErrorSAXFuncFunction>>;
typedef fatalErrorSAXFuncFunction = ffi.Void Function(
    ffi.Pointer<ffi.Void> ctx, ffi.Pointer<ffi.Char> msg);
typedef DartfatalErrorSAXFuncFunction = void Function(
    ffi.Pointer<ffi.Void> ctx, ffi.Pointer<ffi.Char> msg);

/// getParameterEntitySAXFunc:
/// @ctx:  the user data (XML parser context)
/// @name: The entity name
///
/// Get a parameter entity by name.
///
/// Returns the xmlEntityPtr if found.
typedef getParameterEntitySAXFunc
    = ffi.Pointer<ffi.NativeFunction<getParameterEntitySAXFuncFunction>>;
typedef getParameterEntitySAXFuncFunction = xmlEntityPtr Function(
    ffi.Pointer<ffi.Void> ctx, ffi.Pointer<xmlChar> name);

/// cdataBlockSAXFunc:
/// @ctx:  the user data (XML parser context)
/// @value:  The pcdata content
/// @len:  the block length
///
/// Called when a pcdata block has been parsed.
typedef cdataBlockSAXFunc
    = ffi.Pointer<ffi.NativeFunction<cdataBlockSAXFuncFunction>>;
typedef cdataBlockSAXFuncFunction = ffi.Void Function(
    ffi.Pointer<ffi.Void> ctx, ffi.Pointer<xmlChar> value, ffi.Int len);
typedef DartcdataBlockSAXFuncFunction = void Function(
    ffi.Pointer<ffi.Void> ctx, ffi.Pointer<xmlChar> value, int len);

/// externalSubsetSAXFunc:
/// @ctx:  the user data (XML parser context)
/// @name:  the root element name
/// @ExternalID:  the external ID
/// @SystemID:  the SYSTEM ID (e.g. filename or URL)
///
/// Callback on external subset declaration.
typedef externalSubsetSAXFunc
    = ffi.Pointer<ffi.NativeFunction<externalSubsetSAXFuncFunction>>;
typedef externalSubsetSAXFuncFunction = ffi.Void Function(
    ffi.Pointer<ffi.Void> ctx,
    ffi.Pointer<xmlChar> name,
    ffi.Pointer<xmlChar> ExternalID,
    ffi.Pointer<xmlChar> SystemID);
typedef DartexternalSubsetSAXFuncFunction = void Function(
    ffi.Pointer<ffi.Void> ctx,
    ffi.Pointer<xmlChar> name,
    ffi.Pointer<xmlChar> ExternalID,
    ffi.Pointer<xmlChar> SystemID);

/// startElementNsSAX2Func:
/// @ctx:  the user data (XML parser context)
/// @localname:  the local name of the element
/// @prefix:  the element namespace prefix if available
/// @URI:  the element namespace name if available
/// @nb_namespaces:  number of namespace definitions on that node
/// @namespaces:  pointer to the array of prefix/URI pairs namespace definitions
/// @nb_attributes:  the number of attributes on that node
/// @nb_defaulted:  the number of defaulted attributes. The defaulted
/// ones are at the end of the array
/// @attributes:  pointer to the array of (localname/prefix/URI/value/end)
/// attribute values.
///
/// SAX2 callback when an element start has been detected by the parser.
/// It provides the namespace information for the element, as well as
/// the new namespace declarations on the element.
typedef startElementNsSAX2Func
    = ffi.Pointer<ffi.NativeFunction<startElementNsSAX2FuncFunction>>;
typedef startElementNsSAX2FuncFunction = ffi.Void Function(
    ffi.Pointer<ffi.Void> ctx,
    ffi.Pointer<xmlChar> localname,
    ffi.Pointer<xmlChar> prefix,
    ffi.Pointer<xmlChar> URI,
    ffi.Int nb_namespaces,
    ffi.Pointer<ffi.Pointer<xmlChar>> namespaces,
    ffi.Int nb_attributes,
    ffi.Int nb_defaulted,
    ffi.Pointer<ffi.Pointer<xmlChar>> attributes);
typedef DartstartElementNsSAX2FuncFunction = void Function(
    ffi.Pointer<ffi.Void> ctx,
    ffi.Pointer<xmlChar> localname,
    ffi.Pointer<xmlChar> prefix,
    ffi.Pointer<xmlChar> URI,
    int nb_namespaces,
    ffi.Pointer<ffi.Pointer<xmlChar>> namespaces,
    int nb_attributes,
    int nb_defaulted,
    ffi.Pointer<ffi.Pointer<xmlChar>> attributes);

/// endElementNsSAX2Func:
/// @ctx:  the user data (XML parser context)
/// @localname:  the local name of the element
/// @prefix:  the element namespace prefix if available
/// @URI:  the element namespace name if available
///
/// SAX2 callback when an element end has been detected by the parser.
/// It provides the namespace information for the element.
typedef endElementNsSAX2Func
    = ffi.Pointer<ffi.NativeFunction<endElementNsSAX2FuncFunction>>;
typedef endElementNsSAX2FuncFunction = ffi.Void Function(
    ffi.Pointer<ffi.Void> ctx,
    ffi.Pointer<xmlChar> localname,
    ffi.Pointer<xmlChar> prefix,
    ffi.Pointer<xmlChar> URI);
typedef DartendElementNsSAX2FuncFunction = void Function(
    ffi.Pointer<ffi.Void> ctx,
    ffi.Pointer<xmlChar> localname,
    ffi.Pointer<xmlChar> prefix,
    ffi.Pointer<xmlChar> URI);

/// xmlStructuredErrorFunc:
/// @userData:  user provided data for the error callback
/// @error:  the error being raised.
///
/// Signature of the function to use when there is an error and
/// the module handles the new error reporting mechanism.
typedef xmlStructuredErrorFunc
    = ffi.Pointer<ffi.NativeFunction<xmlStructuredErrorFuncFunction>>;
typedef xmlStructuredErrorFuncFunction = ffi.Void Function(
    ffi.Pointer<ffi.Void> userData, xmlErrorPtr error);
typedef DartxmlStructuredErrorFuncFunction = void Function(
    ffi.Pointer<ffi.Void> userData, xmlErrorPtr error);
typedef xmlErrorPtr = ffi.Pointer<xmlError>;

/// xmlError:
///
/// An XML Error instance.
typedef xmlError = _xmlError;

final class _xmlError extends ffi.Struct {
  @ffi.Int()
  external int domain;

  @ffi.Int()
  external int code;

  external ffi.Pointer<ffi.Char> message;

  @ffi.Int32()
  external int level;

  external ffi.Pointer<ffi.Char> file;

  @ffi.Int()
  external int line;

  external ffi.Pointer<ffi.Char> str1;

  external ffi.Pointer<ffi.Char> str2;

  external ffi.Pointer<ffi.Char> str3;

  @ffi.Int()
  external int int1;

  @ffi.Int()
  external int int2;

  external ffi.Pointer<ffi.Void> ctxt;

  external ffi.Pointer<ffi.Void> node;
}

/// xmlErrorLevel:
///
/// Indicates the level of an error
abstract class xmlErrorLevel {
  static const int XML_ERR_NONE = 0;
  static const int XML_ERR_WARNING = 1;
  static const int XML_ERR_ERROR = 2;
  static const int XML_ERR_FATAL = 3;
}

typedef xmlDocPtr = ffi.Pointer<xmlDoc>;

/// xmlDoc:
///
/// An XML document.
typedef xmlDoc = _xmlDoc;
typedef xmlNodePtr = ffi.Pointer<xmlNode>;

/// xmlNode:
///
/// A node in an XML tree.
typedef xmlNode = _xmlNode;
typedef xmlParserNodeInfoSeq = _xmlParserNodeInfoSeq;

final class _xmlParserNodeInfoSeq extends ffi.Struct {
  @ffi.UnsignedLong()
  external int maximum;

  @ffi.UnsignedLong()
  external int length;

  external ffi.Pointer<xmlParserNodeInfo> buffer;
}

/// xmlParserNodeInfo:
///
/// The parser can be asked to collect Node information, i.e. at what
/// place in the file they were detected.
/// NOTE: This is off by default and not very well tested.
typedef xmlParserNodeInfo = _xmlParserNodeInfo;

final class _xmlParserNodeInfo extends ffi.Struct {
  external ffi.Pointer<_xmlNode> node;

  @ffi.UnsignedLong()
  external int begin_pos;

  @ffi.UnsignedLong()
  external int begin_line;

  @ffi.UnsignedLong()
  external int end_pos;

  @ffi.UnsignedLong()
  external int end_line;
}

typedef xmlValidCtxt = _xmlValidCtxt;

final class _xmlValidCtxt extends ffi.Struct {
  external ffi.Pointer<ffi.Void> userData;

  external xmlValidityErrorFunc error;

  external xmlValidityWarningFunc warning;

  external xmlNodePtr node;

  @ffi.Int()
  external int nodeNr;

  @ffi.Int()
  external int nodeMax;

  external ffi.Pointer<xmlNodePtr> nodeTab;

  @ffi.UnsignedInt()
  external int finishDtd;

  external xmlDocPtr doc;

  @ffi.Int()
  external int valid;

  external ffi.Pointer<xmlValidState> vstate;

  @ffi.Int()
  external int vstateNr;

  @ffi.Int()
  external int vstateMax;

  external ffi.Pointer<xmlValidState> vstateTab;

  external xmlAutomataPtr am;

  external xmlAutomataStatePtr state;
}

/// xmlValidityErrorFunc:
/// @ctx:  usually an xmlValidCtxtPtr to a validity error context,
/// but comes from ctxt->userData (which normally contains such
/// a pointer); ctxt->userData can be changed by the user.
/// @msg:  the string to format *printf like vararg
/// @...:  remaining arguments to the format
///
/// Callback called when a validity error is found. This is a message
/// oriented function similar to an *printf function.
typedef xmlValidityErrorFunc
    = ffi.Pointer<ffi.NativeFunction<xmlValidityErrorFuncFunction>>;
typedef xmlValidityErrorFuncFunction = ffi.Void Function(
    ffi.Pointer<ffi.Void> ctx, ffi.Pointer<ffi.Char> msg);
typedef DartxmlValidityErrorFuncFunction = void Function(
    ffi.Pointer<ffi.Void> ctx, ffi.Pointer<ffi.Char> msg);

/// xmlValidityWarningFunc:
/// @ctx:  usually an xmlValidCtxtPtr to a validity error context,
/// but comes from ctxt->userData (which normally contains such
/// a pointer); ctxt->userData can be changed by the user.
/// @msg:  the string to format *printf like vararg
/// @...:  remaining arguments to the format
///
/// Callback called when a validity warning is found. This is a message
/// oriented function similar to an *printf function.
typedef xmlValidityWarningFunc
    = ffi.Pointer<ffi.NativeFunction<xmlValidityWarningFuncFunction>>;
typedef xmlValidityWarningFuncFunction = ffi.Void Function(
    ffi.Pointer<ffi.Void> ctx, ffi.Pointer<ffi.Char> msg);
typedef DartxmlValidityWarningFuncFunction = void Function(
    ffi.Pointer<ffi.Void> ctx, ffi.Pointer<ffi.Char> msg);
typedef xmlValidState = _xmlValidState;

final class _xmlValidState extends ffi.Opaque {}

typedef xmlAutomataPtr = ffi.Pointer<xmlAutomata>;

/// xmlAutomataPtr:
///
/// A libxml automata description, It can be compiled into a regexp
typedef xmlAutomata = _xmlAutomata;

final class _xmlAutomata extends ffi.Opaque {}

typedef xmlAutomataStatePtr = ffi.Pointer<xmlAutomataState>;

/// xmlAutomataStatePtr:
///
/// A state int the automata description,
typedef xmlAutomataState = _xmlAutomataState;

final class _xmlAutomataState extends ffi.Opaque {}

/// xmlParserInputState:
///
/// The parser is now working also as a state based parser.
/// The recursive one use the state info for entities processing.
abstract class xmlParserInputState {
  static const int XML_PARSER_EOF = -1;
  static const int XML_PARSER_START = 0;
  static const int XML_PARSER_MISC = 1;
  static const int XML_PARSER_PI = 2;
  static const int XML_PARSER_DTD = 3;
  static const int XML_PARSER_PROLOG = 4;
  static const int XML_PARSER_COMMENT = 5;
  static const int XML_PARSER_START_TAG = 6;
  static const int XML_PARSER_CONTENT = 7;
  static const int XML_PARSER_CDATA_SECTION = 8;
  static const int XML_PARSER_END_TAG = 9;
  static const int XML_PARSER_ENTITY_DECL = 10;
  static const int XML_PARSER_ENTITY_VALUE = 11;
  static const int XML_PARSER_ATTRIBUTE_VALUE = 12;
  static const int XML_PARSER_SYSTEM_LITERAL = 13;
  static const int XML_PARSER_EPILOG = 14;
  static const int XML_PARSER_IGNORE = 15;
  static const int XML_PARSER_PUBLIC_LITERAL = 16;
}

typedef xmlDictPtr = ffi.Pointer<xmlDict>;
typedef xmlDict = _xmlDict;
typedef xmlStartTag = _xmlStartTag;

final class _xmlStartTag extends ffi.Opaque {}

typedef xmlHashTablePtr = ffi.Pointer<xmlHashTable>;
typedef xmlHashTable = _xmlHashTable;

final class _xmlHashTable extends ffi.Opaque {}

typedef xmlAttrPtr = ffi.Pointer<xmlAttr>;

/// xmlAttr:
///
/// An attribute on an XML node.
typedef xmlAttr = _xmlAttr;

/// xmlParserMode:
///
/// A parser can operate in various modes
abstract class xmlParserMode {
  static const int XML_PARSE_UNKNOWN = 0;
  static const int XML_PARSE_DOM = 1;
  static const int XML_PARSE_SAX = 2;
  static const int XML_PARSE_PUSH_DOM = 3;
  static const int XML_PARSE_PUSH_SAX = 4;
  static const int XML_PARSE_READER = 5;
}

/// xmlBufferAllocationScheme:
///
/// A buffer allocation scheme can be defined to either match exactly the
/// need or double it's allocated size each time it is found too small.
abstract class xmlBufferAllocationScheme {
  static const int XML_BUFFER_ALLOC_DOUBLEIT = 0;
  static const int XML_BUFFER_ALLOC_EXACT = 1;
  static const int XML_BUFFER_ALLOC_IMMUTABLE = 2;
  static const int XML_BUFFER_ALLOC_IO = 3;
  static const int XML_BUFFER_ALLOC_HYBRID = 4;
  static const int XML_BUFFER_ALLOC_BOUNDED = 5;
}

final class _xmlBuffer extends ffi.Struct {
  external ffi.Pointer<xmlChar> content;

  @ffi.UnsignedInt()
  external int use;

  @ffi.UnsignedInt()
  external int size;

  @ffi.Int32()
  external int alloc;

  external ffi.Pointer<xmlChar> contentIO;
}

final class _xmlNotation extends ffi.Struct {
  external ffi.Pointer<xmlChar> name;

  external ffi.Pointer<xmlChar> PublicID;

  external ffi.Pointer<xmlChar> SystemID;
}

/// xmlAttributeDefault:
///
/// A DTD Attribute default definition.
abstract class xmlAttributeDefault {
  static const int XML_ATTRIBUTE_NONE = 1;
  static const int XML_ATTRIBUTE_REQUIRED = 2;
  static const int XML_ATTRIBUTE_IMPLIED = 3;
  static const int XML_ATTRIBUTE_FIXED = 4;
}

final class _xmlAttribute extends ffi.Struct {
  external ffi.Pointer<ffi.Void> _private;

  @ffi.Int32()
  external int type;

  external ffi.Pointer<xmlChar> name;

  external ffi.Pointer<_xmlNode> children;

  external ffi.Pointer<_xmlNode> last;

  external ffi.Pointer<_xmlDtd> parent;

  external ffi.Pointer<_xmlNode> next;

  external ffi.Pointer<_xmlNode> prev;

  external ffi.Pointer<_xmlDoc> doc;

  external ffi.Pointer<_xmlAttribute> nexth;

  @ffi.Int32()
  external int atype;

  @ffi.Int32()
  external int def;

  external ffi.Pointer<xmlChar> defaultValue;

  external xmlEnumerationPtr tree;

  external ffi.Pointer<xmlChar> prefix;

  external ffi.Pointer<xmlChar> elem;
}

/// xmlElementTypeVal:
///
/// The different possibilities for an element content type.
abstract class xmlElementTypeVal {
  static const int XML_ELEMENT_TYPE_UNDEFINED = 0;
  static const int XML_ELEMENT_TYPE_EMPTY = 1;
  static const int XML_ELEMENT_TYPE_ANY = 2;
  static const int XML_ELEMENT_TYPE_MIXED = 3;
  static const int XML_ELEMENT_TYPE_ELEMENT = 4;
}

final class _xmlRegexp extends ffi.Opaque {}

final class _xmlRegExecCtxt extends ffi.Opaque {}

typedef xmlRegexpPtr = ffi.Pointer<xmlRegexp>;

/// xmlRegexpPtr:
///
/// A libxml regular expression, they can actually be far more complex
/// thank the POSIX regex expressions.
typedef xmlRegexp = _xmlRegexp;
typedef FILE = _IO_FILE;

final class _IO_FILE extends ffi.Struct {
  @ffi.Int()
  external int _flags;

  external ffi.Pointer<ffi.Char> _IO_read_ptr;

  external ffi.Pointer<ffi.Char> _IO_read_end;

  external ffi.Pointer<ffi.Char> _IO_read_base;

  external ffi.Pointer<ffi.Char> _IO_write_base;

  external ffi.Pointer<ffi.Char> _IO_write_ptr;

  external ffi.Pointer<ffi.Char> _IO_write_end;

  external ffi.Pointer<ffi.Char> _IO_buf_base;

  external ffi.Pointer<ffi.Char> _IO_buf_end;

  external ffi.Pointer<ffi.Char> _IO_save_base;

  external ffi.Pointer<ffi.Char> _IO_backup_base;

  external ffi.Pointer<ffi.Char> _IO_save_end;

  external ffi.Pointer<_IO_marker> _markers;

  external ffi.Pointer<_IO_FILE> _chain;

  @ffi.Int()
  external int _fileno;

  @ffi.Int()
  external int _flags2;

  @__off_t()
  external int _old_offset;

  @ffi.UnsignedShort()
  external int _cur_column;

  @ffi.SignedChar()
  external int _vtable_offset;

  @ffi.Array.multi([1])
  external ffi.Array<ffi.Char> _shortbuf;

  external ffi.Pointer<_IO_lock_t> _lock;

  @__off64_t()
  external int _offset;

  external ffi.Pointer<_IO_codecvt> _codecvt;

  external ffi.Pointer<_IO_wide_data> _wide_data;

  external ffi.Pointer<_IO_FILE> _freeres_list;

  external ffi.Pointer<ffi.Void> _freeres_buf;

  @ffi.Size()
  external int __pad5;

  @ffi.Int()
  external int _mode;

  @ffi.Array.multi([20])
  external ffi.Array<ffi.Char> _unused2;
}

final class _IO_marker extends ffi.Opaque {}

typedef __off_t = ffi.Long;
typedef Dart__off_t = int;
typedef _IO_lock_t = ffi.Void;
typedef Dart_IO_lock_t = void;
typedef __off64_t = ffi.Long;
typedef Dart__off64_t = int;

final class _IO_codecvt extends ffi.Opaque {}

final class _IO_wide_data extends ffi.Opaque {}

typedef xmlRegExecCtxtPtr = ffi.Pointer<xmlRegExecCtxt>;

/// xmlRegExecCtxtPtr:
///
/// A libxml progressive regular expression evaluation context
typedef xmlRegExecCtxt = _xmlRegExecCtxt;

/// xmlRegExecCallbacks:
/// @exec: the regular expression context
/// @token: the current token string
/// @transdata: transition data
/// @inputdata: input data
///
/// Callback function when doing a transition in the automata
typedef xmlRegExecCallbacks
    = ffi.Pointer<ffi.NativeFunction<xmlRegExecCallbacksFunction>>;
typedef xmlRegExecCallbacksFunction = ffi.Void Function(
    xmlRegExecCtxtPtr exec,
    ffi.Pointer<xmlChar> token,
    ffi.Pointer<ffi.Void> transdata,
    ffi.Pointer<ffi.Void> inputdata);
typedef DartxmlRegExecCallbacksFunction = void Function(
    xmlRegExecCtxtPtr exec,
    ffi.Pointer<xmlChar> token,
    ffi.Pointer<ffi.Void> transdata,
    ffi.Pointer<ffi.Void> inputdata);

final class _xmlElement extends ffi.Struct {
  external ffi.Pointer<ffi.Void> _private;

  @ffi.Int32()
  external int type;

  external ffi.Pointer<xmlChar> name;

  external ffi.Pointer<_xmlNode> children;

  external ffi.Pointer<_xmlNode> last;

  external ffi.Pointer<_xmlDtd> parent;

  external ffi.Pointer<_xmlNode> next;

  external ffi.Pointer<_xmlNode> prev;

  external ffi.Pointer<_xmlDoc> doc;

  @ffi.Int32()
  external int etype;

  external xmlElementContentPtr content;

  external xmlAttributePtr attributes;

  external ffi.Pointer<xmlChar> prefix;

  external xmlRegexpPtr contModel;
}

typedef xmlAttributePtr = ffi.Pointer<xmlAttribute>;

/// xmlAttribute:
///
/// An Attribute declaration in a DTD.
typedef xmlAttribute = _xmlAttribute;

final class _xmlID extends ffi.Struct {
  external ffi.Pointer<_xmlID> next;

  external ffi.Pointer<xmlChar> value;

  external xmlAttrPtr attr;

  external ffi.Pointer<xmlChar> name;

  @ffi.Int()
  external int lineno;

  external ffi.Pointer<_xmlDoc> doc;
}

final class _xmlRef extends ffi.Struct {
  external ffi.Pointer<_xmlRef> next;

  external ffi.Pointer<xmlChar> value;

  external xmlAttrPtr attr;

  external ffi.Pointer<xmlChar> name;

  @ffi.Int()
  external int lineno;
}

/// xmlDocProperty
///
/// Set of properties of the document as found by the parser
/// Some of them are linked to similarly named xmlParserOption
abstract class xmlDocProperties {
  static const int XML_DOC_WELLFORMED = 1;
  static const int XML_DOC_NSVALID = 2;
  static const int XML_DOC_OLD10 = 4;
  static const int XML_DOC_DTDVALID = 8;
  static const int XML_DOC_XINCLUDE = 16;
  static const int XML_DOC_USERBUILT = 32;
  static const int XML_DOC_INTERNAL = 64;
  static const int XML_DOC_HTML = 128;
}

/// xmlDOMWrapCtxt:
///
/// Context for DOM wrapper-operations.
final class _xmlDOMWrapCtxt extends ffi.Struct {
  external ffi.Pointer<ffi.Void> _private;

  @ffi.Int()
  external int type;

  external ffi.Pointer<ffi.Void> namespaceMap;

  external xmlDOMWrapAcquireNsFunction getNsForNodeFunc;
}

/// xmlDOMWrapAcquireNsFunction:
/// @ctxt:  a DOM wrapper context
/// @node:  the context node (element or attribute)
/// @nsName:  the requested namespace name
/// @nsPrefix:  the requested namespace prefix
///
/// A function called to acquire namespaces (xmlNs) from the wrapper.
///
/// Returns an xmlNsPtr or NULL in case of an error.
typedef xmlDOMWrapAcquireNsFunction
    = ffi.Pointer<ffi.NativeFunction<xmlDOMWrapAcquireNsFunctionFunction>>;
typedef xmlDOMWrapAcquireNsFunctionFunction = xmlNsPtr Function(
    xmlDOMWrapCtxtPtr ctxt,
    xmlNodePtr node,
    ffi.Pointer<xmlChar> nsName,
    ffi.Pointer<xmlChar> nsPrefix);
typedef xmlNsPtr = ffi.Pointer<xmlNs>;
typedef xmlDOMWrapCtxtPtr = ffi.Pointer<xmlDOMWrapCtxt>;
typedef xmlDOMWrapCtxt = _xmlDOMWrapCtxt;
typedef xmlBufferPtr = ffi.Pointer<xmlBuffer>;

/// xmlBuffer:
///
/// A buffer structure, this old construct is limited to 2GB and
/// is being deprecated, use API with xmlBuf instead
typedef xmlBuffer = _xmlBuffer;
typedef xmlDtdPtr = ffi.Pointer<xmlDtd>;

/// xmlDtd:
///
/// An XML DTD, as defined by <!DOCTYPE ... There is actually one for
/// the internal subset and for the external subset.
typedef xmlDtd = _xmlDtd;
typedef xmlOutputBufferPtr = ffi.Pointer<xmlOutputBuffer>;
typedef xmlOutputBuffer = _xmlOutputBuffer;

/// xmlFreeFunc:
/// @mem: an already allocated block of memory
///
/// Signature for a free() implementation.
typedef xmlFreeFunc = ffi.Pointer<ffi.NativeFunction<xmlFreeFuncFunction>>;
typedef xmlFreeFuncFunction = ffi.Void Function(ffi.Pointer<ffi.Void> mem);
typedef DartxmlFreeFuncFunction = void Function(ffi.Pointer<ffi.Void> mem);

/// xmlMallocFunc:
/// @size:  the size requested in bytes
///
/// Signature for a malloc() implementation.
///
/// Returns a pointer to the newly allocated block or NULL in case of error.
typedef xmlMallocFunc = ffi.Pointer<ffi.NativeFunction<xmlMallocFuncFunction>>;
typedef xmlMallocFuncFunction = ffi.Pointer<ffi.Void> Function(ffi.Size size);
typedef DartxmlMallocFuncFunction = ffi.Pointer<ffi.Void> Function(int size);

/// xmlReallocFunc:
/// @mem: an already allocated block of memory
/// @size:  the new size requested in bytes
///
/// Signature for a realloc() implementation.
///
/// Returns a pointer to the newly reallocated block or NULL in case of error.
typedef xmlReallocFunc
    = ffi.Pointer<ffi.NativeFunction<xmlReallocFuncFunction>>;
typedef xmlReallocFuncFunction = ffi.Pointer<ffi.Void> Function(
    ffi.Pointer<ffi.Void> mem, ffi.Size size);
typedef DartxmlReallocFuncFunction = ffi.Pointer<ffi.Void> Function(
    ffi.Pointer<ffi.Void> mem, int size);

/// xmlStrdupFunc:
/// @str: a zero terminated string
///
/// Signature for an strdup() implementation.
///
/// Returns the copy of the string or NULL in case of error.
typedef xmlStrdupFunc = ffi.Pointer<ffi.NativeFunction<xmlStrdupFuncFunction>>;
typedef xmlStrdupFuncFunction = ffi.Pointer<ffi.Char> Function(
    ffi.Pointer<ffi.Char> str);

final class _xmlMutex extends ffi.Opaque {}

final class _xmlRMutex extends ffi.Opaque {}

/// xmlHashDeallocator:
/// @payload:  the data in the hash
/// @name:  the name associated
///
/// Callback to free data from a hash.
typedef xmlHashDeallocator
    = ffi.Pointer<ffi.NativeFunction<xmlHashDeallocatorFunction>>;
typedef xmlHashDeallocatorFunction = ffi.Void Function(
    ffi.Pointer<ffi.Void> payload, ffi.Pointer<xmlChar> name);
typedef DartxmlHashDeallocatorFunction = void Function(
    ffi.Pointer<ffi.Void> payload, ffi.Pointer<xmlChar> name);

/// xmlHashCopier:
/// @payload:  the data in the hash
/// @name:  the name associated
///
/// Callback to copy data from a hash.
///
/// Returns a copy of the data or NULL in case of error.
typedef xmlHashCopier = ffi.Pointer<ffi.NativeFunction<xmlHashCopierFunction>>;
typedef xmlHashCopierFunction = ffi.Pointer<ffi.Void> Function(
    ffi.Pointer<ffi.Void> payload, ffi.Pointer<xmlChar> name);

/// xmlHashScanner:
/// @payload:  the data in the hash
/// @data:  extra scanner data
/// @name:  the name associated
///
/// Callback when scanning data in a hash with the simple scanner.
typedef xmlHashScanner
    = ffi.Pointer<ffi.NativeFunction<xmlHashScannerFunction>>;
typedef xmlHashScannerFunction = ffi.Void Function(
    ffi.Pointer<ffi.Void> payload,
    ffi.Pointer<ffi.Void> data,
    ffi.Pointer<xmlChar> name);
typedef DartxmlHashScannerFunction = void Function(
    ffi.Pointer<ffi.Void> payload,
    ffi.Pointer<ffi.Void> data,
    ffi.Pointer<xmlChar> name);

/// xmlHashScannerFull:
/// @payload:  the data in the hash
/// @data:  extra scanner data
/// @name:  the name associated
/// @name2:  the second name associated
/// @name3:  the third name associated
///
/// Callback when scanning data in a hash with the full scanner.
typedef xmlHashScannerFull
    = ffi.Pointer<ffi.NativeFunction<xmlHashScannerFullFunction>>;
typedef xmlHashScannerFullFunction = ffi.Void Function(
    ffi.Pointer<ffi.Void> payload,
    ffi.Pointer<ffi.Void> data,
    ffi.Pointer<xmlChar> name,
    ffi.Pointer<xmlChar> name2,
    ffi.Pointer<xmlChar> name3);
typedef DartxmlHashScannerFullFunction = void Function(
    ffi.Pointer<ffi.Void> payload,
    ffi.Pointer<ffi.Void> data,
    ffi.Pointer<xmlChar> name,
    ffi.Pointer<xmlChar> name2,
    ffi.Pointer<xmlChar> name3);

/// xmlErrorDomain:
///
/// Indicates where an error may have come from
abstract class xmlErrorDomain {
  static const int XML_FROM_NONE = 0;
  static const int XML_FROM_PARSER = 1;
  static const int XML_FROM_TREE = 2;
  static const int XML_FROM_NAMESPACE = 3;
  static const int XML_FROM_DTD = 4;
  static const int XML_FROM_HTML = 5;
  static const int XML_FROM_MEMORY = 6;
  static const int XML_FROM_OUTPUT = 7;
  static const int XML_FROM_IO = 8;
  static const int XML_FROM_FTP = 9;
  static const int XML_FROM_HTTP = 10;
  static const int XML_FROM_XINCLUDE = 11;
  static const int XML_FROM_XPATH = 12;
  static const int XML_FROM_XPOINTER = 13;
  static const int XML_FROM_REGEXP = 14;
  static const int XML_FROM_DATATYPE = 15;
  static const int XML_FROM_SCHEMASP = 16;
  static const int XML_FROM_SCHEMASV = 17;
  static const int XML_FROM_RELAXNGP = 18;
  static const int XML_FROM_RELAXNGV = 19;
  static const int XML_FROM_CATALOG = 20;
  static const int XML_FROM_C14N = 21;
  static const int XML_FROM_XSLT = 22;
  static const int XML_FROM_VALID = 23;
  static const int XML_FROM_CHECK = 24;
  static const int XML_FROM_WRITER = 25;
  static const int XML_FROM_MODULE = 26;
  static const int XML_FROM_I18N = 27;
  static const int XML_FROM_SCHEMATRONV = 28;
  static const int XML_FROM_BUFFER = 29;
  static const int XML_FROM_URI = 30;
}

/// xmlParserError:
///
/// This is an error that the XML (or HTML) parser can generate
abstract class xmlParserErrors {
  static const int XML_ERR_OK = 0;
  static const int XML_ERR_INTERNAL_ERROR = 1;
  static const int XML_ERR_NO_MEMORY = 2;
  static const int XML_ERR_DOCUMENT_START = 3;
  static const int XML_ERR_DOCUMENT_EMPTY = 4;
  static const int XML_ERR_DOCUMENT_END = 5;
  static const int XML_ERR_INVALID_HEX_CHARREF = 6;
  static const int XML_ERR_INVALID_DEC_CHARREF = 7;
  static const int XML_ERR_INVALID_CHARREF = 8;
  static const int XML_ERR_INVALID_CHAR = 9;
  static const int XML_ERR_CHARREF_AT_EOF = 10;
  static const int XML_ERR_CHARREF_IN_PROLOG = 11;
  static const int XML_ERR_CHARREF_IN_EPILOG = 12;
  static const int XML_ERR_CHARREF_IN_DTD = 13;
  static const int XML_ERR_ENTITYREF_AT_EOF = 14;
  static const int XML_ERR_ENTITYREF_IN_PROLOG = 15;
  static const int XML_ERR_ENTITYREF_IN_EPILOG = 16;
  static const int XML_ERR_ENTITYREF_IN_DTD = 17;
  static const int XML_ERR_PEREF_AT_EOF = 18;
  static const int XML_ERR_PEREF_IN_PROLOG = 19;
  static const int XML_ERR_PEREF_IN_EPILOG = 20;
  static const int XML_ERR_PEREF_IN_INT_SUBSET = 21;
  static const int XML_ERR_ENTITYREF_NO_NAME = 22;
  static const int XML_ERR_ENTITYREF_SEMICOL_MISSING = 23;
  static const int XML_ERR_PEREF_NO_NAME = 24;
  static const int XML_ERR_PEREF_SEMICOL_MISSING = 25;
  static const int XML_ERR_UNDECLARED_ENTITY = 26;
  static const int XML_WAR_UNDECLARED_ENTITY = 27;
  static const int XML_ERR_UNPARSED_ENTITY = 28;
  static const int XML_ERR_ENTITY_IS_EXTERNAL = 29;
  static const int XML_ERR_ENTITY_IS_PARAMETER = 30;
  static const int XML_ERR_UNKNOWN_ENCODING = 31;
  static const int XML_ERR_UNSUPPORTED_ENCODING = 32;
  static const int XML_ERR_STRING_NOT_STARTED = 33;
  static const int XML_ERR_STRING_NOT_CLOSED = 34;
  static const int XML_ERR_NS_DECL_ERROR = 35;
  static const int XML_ERR_ENTITY_NOT_STARTED = 36;
  static const int XML_ERR_ENTITY_NOT_FINISHED = 37;
  static const int XML_ERR_LT_IN_ATTRIBUTE = 38;
  static const int XML_ERR_ATTRIBUTE_NOT_STARTED = 39;
  static const int XML_ERR_ATTRIBUTE_NOT_FINISHED = 40;
  static const int XML_ERR_ATTRIBUTE_WITHOUT_VALUE = 41;
  static const int XML_ERR_ATTRIBUTE_REDEFINED = 42;
  static const int XML_ERR_LITERAL_NOT_STARTED = 43;
  static const int XML_ERR_LITERAL_NOT_FINISHED = 44;
  static const int XML_ERR_COMMENT_NOT_FINISHED = 45;
  static const int XML_ERR_PI_NOT_STARTED = 46;
  static const int XML_ERR_PI_NOT_FINISHED = 47;
  static const int XML_ERR_NOTATION_NOT_STARTED = 48;
  static const int XML_ERR_NOTATION_NOT_FINISHED = 49;
  static const int XML_ERR_ATTLIST_NOT_STARTED = 50;
  static const int XML_ERR_ATTLIST_NOT_FINISHED = 51;
  static const int XML_ERR_MIXED_NOT_STARTED = 52;
  static const int XML_ERR_MIXED_NOT_FINISHED = 53;
  static const int XML_ERR_ELEMCONTENT_NOT_STARTED = 54;
  static const int XML_ERR_ELEMCONTENT_NOT_FINISHED = 55;
  static const int XML_ERR_XMLDECL_NOT_STARTED = 56;
  static const int XML_ERR_XMLDECL_NOT_FINISHED = 57;
  static const int XML_ERR_CONDSEC_NOT_STARTED = 58;
  static const int XML_ERR_CONDSEC_NOT_FINISHED = 59;
  static const int XML_ERR_EXT_SUBSET_NOT_FINISHED = 60;
  static const int XML_ERR_DOCTYPE_NOT_FINISHED = 61;
  static const int XML_ERR_MISPLACED_CDATA_END = 62;
  static const int XML_ERR_CDATA_NOT_FINISHED = 63;
  static const int XML_ERR_RESERVED_XML_NAME = 64;
  static const int XML_ERR_SPACE_REQUIRED = 65;
  static const int XML_ERR_SEPARATOR_REQUIRED = 66;
  static const int XML_ERR_NMTOKEN_REQUIRED = 67;
  static const int XML_ERR_NAME_REQUIRED = 68;
  static const int XML_ERR_PCDATA_REQUIRED = 69;
  static const int XML_ERR_URI_REQUIRED = 70;
  static const int XML_ERR_PUBID_REQUIRED = 71;
  static const int XML_ERR_LT_REQUIRED = 72;
  static const int XML_ERR_GT_REQUIRED = 73;
  static const int XML_ERR_LTSLASH_REQUIRED = 74;
  static const int XML_ERR_EQUAL_REQUIRED = 75;
  static const int XML_ERR_TAG_NAME_MISMATCH = 76;
  static const int XML_ERR_TAG_NOT_FINISHED = 77;
  static const int XML_ERR_STANDALONE_VALUE = 78;
  static const int XML_ERR_ENCODING_NAME = 79;
  static const int XML_ERR_HYPHEN_IN_COMMENT = 80;
  static const int XML_ERR_INVALID_ENCODING = 81;
  static const int XML_ERR_EXT_ENTITY_STANDALONE = 82;
  static const int XML_ERR_CONDSEC_INVALID = 83;
  static const int XML_ERR_VALUE_REQUIRED = 84;
  static const int XML_ERR_NOT_WELL_BALANCED = 85;
  static const int XML_ERR_EXTRA_CONTENT = 86;
  static const int XML_ERR_ENTITY_CHAR_ERROR = 87;
  static const int XML_ERR_ENTITY_PE_INTERNAL = 88;
  static const int XML_ERR_ENTITY_LOOP = 89;
  static const int XML_ERR_ENTITY_BOUNDARY = 90;
  static const int XML_ERR_INVALID_URI = 91;
  static const int XML_ERR_URI_FRAGMENT = 92;
  static const int XML_WAR_CATALOG_PI = 93;
  static const int XML_ERR_NO_DTD = 94;
  static const int XML_ERR_CONDSEC_INVALID_KEYWORD = 95;
  static const int XML_ERR_VERSION_MISSING = 96;
  static const int XML_WAR_UNKNOWN_VERSION = 97;
  static const int XML_WAR_LANG_VALUE = 98;
  static const int XML_WAR_NS_URI = 99;
  static const int XML_WAR_NS_URI_RELATIVE = 100;
  static const int XML_ERR_MISSING_ENCODING = 101;
  static const int XML_WAR_SPACE_VALUE = 102;
  static const int XML_ERR_NOT_STANDALONE = 103;
  static const int XML_ERR_ENTITY_PROCESSING = 104;
  static const int XML_ERR_NOTATION_PROCESSING = 105;
  static const int XML_WAR_NS_COLUMN = 106;
  static const int XML_WAR_ENTITY_REDEFINED = 107;
  static const int XML_ERR_UNKNOWN_VERSION = 108;
  static const int XML_ERR_VERSION_MISMATCH = 109;
  static const int XML_ERR_NAME_TOO_LONG = 110;
  static const int XML_ERR_USER_STOP = 111;
  static const int XML_NS_ERR_XML_NAMESPACE = 200;
  static const int XML_NS_ERR_UNDEFINED_NAMESPACE = 201;
  static const int XML_NS_ERR_QNAME = 202;
  static const int XML_NS_ERR_ATTRIBUTE_REDEFINED = 203;
  static const int XML_NS_ERR_EMPTY = 204;
  static const int XML_NS_ERR_COLON = 205;
  static const int XML_DTD_ATTRIBUTE_DEFAULT = 500;
  static const int XML_DTD_ATTRIBUTE_REDEFINED = 501;
  static const int XML_DTD_ATTRIBUTE_VALUE = 502;
  static const int XML_DTD_CONTENT_ERROR = 503;
  static const int XML_DTD_CONTENT_MODEL = 504;
  static const int XML_DTD_CONTENT_NOT_DETERMINIST = 505;
  static const int XML_DTD_DIFFERENT_PREFIX = 506;
  static const int XML_DTD_ELEM_DEFAULT_NAMESPACE = 507;
  static const int XML_DTD_ELEM_NAMESPACE = 508;
  static const int XML_DTD_ELEM_REDEFINED = 509;
  static const int XML_DTD_EMPTY_NOTATION = 510;
  static const int XML_DTD_ENTITY_TYPE = 511;
  static const int XML_DTD_ID_FIXED = 512;
  static const int XML_DTD_ID_REDEFINED = 513;
  static const int XML_DTD_ID_SUBSET = 514;
  static const int XML_DTD_INVALID_CHILD = 515;
  static const int XML_DTD_INVALID_DEFAULT = 516;
  static const int XML_DTD_LOAD_ERROR = 517;
  static const int XML_DTD_MISSING_ATTRIBUTE = 518;
  static const int XML_DTD_MIXED_CORRUPT = 519;
  static const int XML_DTD_MULTIPLE_ID = 520;
  static const int XML_DTD_NO_DOC = 521;
  static const int XML_DTD_NO_DTD = 522;
  static const int XML_DTD_NO_ELEM_NAME = 523;
  static const int XML_DTD_NO_PREFIX = 524;
  static const int XML_DTD_NO_ROOT = 525;
  static const int XML_DTD_NOTATION_REDEFINED = 526;
  static const int XML_DTD_NOTATION_VALUE = 527;
  static const int XML_DTD_NOT_EMPTY = 528;
  static const int XML_DTD_NOT_PCDATA = 529;
  static const int XML_DTD_NOT_STANDALONE = 530;
  static const int XML_DTD_ROOT_NAME = 531;
  static const int XML_DTD_STANDALONE_WHITE_SPACE = 532;
  static const int XML_DTD_UNKNOWN_ATTRIBUTE = 533;
  static const int XML_DTD_UNKNOWN_ELEM = 534;
  static const int XML_DTD_UNKNOWN_ENTITY = 535;
  static const int XML_DTD_UNKNOWN_ID = 536;
  static const int XML_DTD_UNKNOWN_NOTATION = 537;
  static const int XML_DTD_STANDALONE_DEFAULTED = 538;
  static const int XML_DTD_XMLID_VALUE = 539;
  static const int XML_DTD_XMLID_TYPE = 540;
  static const int XML_DTD_DUP_TOKEN = 541;
  static const int XML_HTML_STRUCURE_ERROR = 800;
  static const int XML_HTML_UNKNOWN_TAG = 801;
  static const int XML_RNGP_ANYNAME_ATTR_ANCESTOR = 1000;
  static const int XML_RNGP_ATTR_CONFLICT = 1001;
  static const int XML_RNGP_ATTRIBUTE_CHILDREN = 1002;
  static const int XML_RNGP_ATTRIBUTE_CONTENT = 1003;
  static const int XML_RNGP_ATTRIBUTE_EMPTY = 1004;
  static const int XML_RNGP_ATTRIBUTE_NOOP = 1005;
  static const int XML_RNGP_CHOICE_CONTENT = 1006;
  static const int XML_RNGP_CHOICE_EMPTY = 1007;
  static const int XML_RNGP_CREATE_FAILURE = 1008;
  static const int XML_RNGP_DATA_CONTENT = 1009;
  static const int XML_RNGP_DEF_CHOICE_AND_INTERLEAVE = 1010;
  static const int XML_RNGP_DEFINE_CREATE_FAILED = 1011;
  static const int XML_RNGP_DEFINE_EMPTY = 1012;
  static const int XML_RNGP_DEFINE_MISSING = 1013;
  static const int XML_RNGP_DEFINE_NAME_MISSING = 1014;
  static const int XML_RNGP_ELEM_CONTENT_EMPTY = 1015;
  static const int XML_RNGP_ELEM_CONTENT_ERROR = 1016;
  static const int XML_RNGP_ELEMENT_EMPTY = 1017;
  static const int XML_RNGP_ELEMENT_CONTENT = 1018;
  static const int XML_RNGP_ELEMENT_NAME = 1019;
  static const int XML_RNGP_ELEMENT_NO_CONTENT = 1020;
  static const int XML_RNGP_ELEM_TEXT_CONFLICT = 1021;
  static const int XML_RNGP_EMPTY = 1022;
  static const int XML_RNGP_EMPTY_CONSTRUCT = 1023;
  static const int XML_RNGP_EMPTY_CONTENT = 1024;
  static const int XML_RNGP_EMPTY_NOT_EMPTY = 1025;
  static const int XML_RNGP_ERROR_TYPE_LIB = 1026;
  static const int XML_RNGP_EXCEPT_EMPTY = 1027;
  static const int XML_RNGP_EXCEPT_MISSING = 1028;
  static const int XML_RNGP_EXCEPT_MULTIPLE = 1029;
  static const int XML_RNGP_EXCEPT_NO_CONTENT = 1030;
  static const int XML_RNGP_EXTERNALREF_EMTPY = 1031;
  static const int XML_RNGP_EXTERNAL_REF_FAILURE = 1032;
  static const int XML_RNGP_EXTERNALREF_RECURSE = 1033;
  static const int XML_RNGP_FORBIDDEN_ATTRIBUTE = 1034;
  static const int XML_RNGP_FOREIGN_ELEMENT = 1035;
  static const int XML_RNGP_GRAMMAR_CONTENT = 1036;
  static const int XML_RNGP_GRAMMAR_EMPTY = 1037;
  static const int XML_RNGP_GRAMMAR_MISSING = 1038;
  static const int XML_RNGP_GRAMMAR_NO_START = 1039;
  static const int XML_RNGP_GROUP_ATTR_CONFLICT = 1040;
  static const int XML_RNGP_HREF_ERROR = 1041;
  static const int XML_RNGP_INCLUDE_EMPTY = 1042;
  static const int XML_RNGP_INCLUDE_FAILURE = 1043;
  static const int XML_RNGP_INCLUDE_RECURSE = 1044;
  static const int XML_RNGP_INTERLEAVE_ADD = 1045;
  static const int XML_RNGP_INTERLEAVE_CREATE_FAILED = 1046;
  static const int XML_RNGP_INTERLEAVE_EMPTY = 1047;
  static const int XML_RNGP_INTERLEAVE_NO_CONTENT = 1048;
  static const int XML_RNGP_INVALID_DEFINE_NAME = 1049;
  static const int XML_RNGP_INVALID_URI = 1050;
  static const int XML_RNGP_INVALID_VALUE = 1051;
  static const int XML_RNGP_MISSING_HREF = 1052;
  static const int XML_RNGP_NAME_MISSING = 1053;
  static const int XML_RNGP_NEED_COMBINE = 1054;
  static const int XML_RNGP_NOTALLOWED_NOT_EMPTY = 1055;
  static const int XML_RNGP_NSNAME_ATTR_ANCESTOR = 1056;
  static const int XML_RNGP_NSNAME_NO_NS = 1057;
  static const int XML_RNGP_PARAM_FORBIDDEN = 1058;
  static const int XML_RNGP_PARAM_NAME_MISSING = 1059;
  static const int XML_RNGP_PARENTREF_CREATE_FAILED = 1060;
  static const int XML_RNGP_PARENTREF_NAME_INVALID = 1061;
  static const int XML_RNGP_PARENTREF_NO_NAME = 1062;
  static const int XML_RNGP_PARENTREF_NO_PARENT = 1063;
  static const int XML_RNGP_PARENTREF_NOT_EMPTY = 1064;
  static const int XML_RNGP_PARSE_ERROR = 1065;
  static const int XML_RNGP_PAT_ANYNAME_EXCEPT_ANYNAME = 1066;
  static const int XML_RNGP_PAT_ATTR_ATTR = 1067;
  static const int XML_RNGP_PAT_ATTR_ELEM = 1068;
  static const int XML_RNGP_PAT_DATA_EXCEPT_ATTR = 1069;
  static const int XML_RNGP_PAT_DATA_EXCEPT_ELEM = 1070;
  static const int XML_RNGP_PAT_DATA_EXCEPT_EMPTY = 1071;
  static const int XML_RNGP_PAT_DATA_EXCEPT_GROUP = 1072;
  static const int XML_RNGP_PAT_DATA_EXCEPT_INTERLEAVE = 1073;
  static const int XML_RNGP_PAT_DATA_EXCEPT_LIST = 1074;
  static const int XML_RNGP_PAT_DATA_EXCEPT_ONEMORE = 1075;
  static const int XML_RNGP_PAT_DATA_EXCEPT_REF = 1076;
  static const int XML_RNGP_PAT_DATA_EXCEPT_TEXT = 1077;
  static const int XML_RNGP_PAT_LIST_ATTR = 1078;
  static const int XML_RNGP_PAT_LIST_ELEM = 1079;
  static const int XML_RNGP_PAT_LIST_INTERLEAVE = 1080;
  static const int XML_RNGP_PAT_LIST_LIST = 1081;
  static const int XML_RNGP_PAT_LIST_REF = 1082;
  static const int XML_RNGP_PAT_LIST_TEXT = 1083;
  static const int XML_RNGP_PAT_NSNAME_EXCEPT_ANYNAME = 1084;
  static const int XML_RNGP_PAT_NSNAME_EXCEPT_NSNAME = 1085;
  static const int XML_RNGP_PAT_ONEMORE_GROUP_ATTR = 1086;
  static const int XML_RNGP_PAT_ONEMORE_INTERLEAVE_ATTR = 1087;
  static const int XML_RNGP_PAT_START_ATTR = 1088;
  static const int XML_RNGP_PAT_START_DATA = 1089;
  static const int XML_RNGP_PAT_START_EMPTY = 1090;
  static const int XML_RNGP_PAT_START_GROUP = 1091;
  static const int XML_RNGP_PAT_START_INTERLEAVE = 1092;
  static const int XML_RNGP_PAT_START_LIST = 1093;
  static const int XML_RNGP_PAT_START_ONEMORE = 1094;
  static const int XML_RNGP_PAT_START_TEXT = 1095;
  static const int XML_RNGP_PAT_START_VALUE = 1096;
  static const int XML_RNGP_PREFIX_UNDEFINED = 1097;
  static const int XML_RNGP_REF_CREATE_FAILED = 1098;
  static const int XML_RNGP_REF_CYCLE = 1099;
  static const int XML_RNGP_REF_NAME_INVALID = 1100;
  static const int XML_RNGP_REF_NO_DEF = 1101;
  static const int XML_RNGP_REF_NO_NAME = 1102;
  static const int XML_RNGP_REF_NOT_EMPTY = 1103;
  static const int XML_RNGP_START_CHOICE_AND_INTERLEAVE = 1104;
  static const int XML_RNGP_START_CONTENT = 1105;
  static const int XML_RNGP_START_EMPTY = 1106;
  static const int XML_RNGP_START_MISSING = 1107;
  static const int XML_RNGP_TEXT_EXPECTED = 1108;
  static const int XML_RNGP_TEXT_HAS_CHILD = 1109;
  static const int XML_RNGP_TYPE_MISSING = 1110;
  static const int XML_RNGP_TYPE_NOT_FOUND = 1111;
  static const int XML_RNGP_TYPE_VALUE = 1112;
  static const int XML_RNGP_UNKNOWN_ATTRIBUTE = 1113;
  static const int XML_RNGP_UNKNOWN_COMBINE = 1114;
  static const int XML_RNGP_UNKNOWN_CONSTRUCT = 1115;
  static const int XML_RNGP_UNKNOWN_TYPE_LIB = 1116;
  static const int XML_RNGP_URI_FRAGMENT = 1117;
  static const int XML_RNGP_URI_NOT_ABSOLUTE = 1118;
  static const int XML_RNGP_VALUE_EMPTY = 1119;
  static const int XML_RNGP_VALUE_NO_CONTENT = 1120;
  static const int XML_RNGP_XMLNS_NAME = 1121;
  static const int XML_RNGP_XML_NS = 1122;
  static const int XML_XPATH_EXPRESSION_OK = 1200;
  static const int XML_XPATH_NUMBER_ERROR = 1201;
  static const int XML_XPATH_UNFINISHED_LITERAL_ERROR = 1202;
  static const int XML_XPATH_START_LITERAL_ERROR = 1203;
  static const int XML_XPATH_VARIABLE_REF_ERROR = 1204;
  static const int XML_XPATH_UNDEF_VARIABLE_ERROR = 1205;
  static const int XML_XPATH_INVALID_PREDICATE_ERROR = 1206;
  static const int XML_XPATH_EXPR_ERROR = 1207;
  static const int XML_XPATH_UNCLOSED_ERROR = 1208;
  static const int XML_XPATH_UNKNOWN_FUNC_ERROR = 1209;
  static const int XML_XPATH_INVALID_OPERAND = 1210;
  static const int XML_XPATH_INVALID_TYPE = 1211;
  static const int XML_XPATH_INVALID_ARITY = 1212;
  static const int XML_XPATH_INVALID_CTXT_SIZE = 1213;
  static const int XML_XPATH_INVALID_CTXT_POSITION = 1214;
  static const int XML_XPATH_MEMORY_ERROR = 1215;
  static const int XML_XPTR_SYNTAX_ERROR = 1216;
  static const int XML_XPTR_RESOURCE_ERROR = 1217;
  static const int XML_XPTR_SUB_RESOURCE_ERROR = 1218;
  static const int XML_XPATH_UNDEF_PREFIX_ERROR = 1219;
  static const int XML_XPATH_ENCODING_ERROR = 1220;
  static const int XML_XPATH_INVALID_CHAR_ERROR = 1221;
  static const int XML_TREE_INVALID_HEX = 1300;
  static const int XML_TREE_INVALID_DEC = 1301;
  static const int XML_TREE_UNTERMINATED_ENTITY = 1302;
  static const int XML_TREE_NOT_UTF8 = 1303;
  static const int XML_SAVE_NOT_UTF8 = 1400;
  static const int XML_SAVE_CHAR_INVALID = 1401;
  static const int XML_SAVE_NO_DOCTYPE = 1402;
  static const int XML_SAVE_UNKNOWN_ENCODING = 1403;
  static const int XML_REGEXP_COMPILE_ERROR = 1450;
  static const int XML_IO_UNKNOWN = 1500;
  static const int XML_IO_EACCES = 1501;
  static const int XML_IO_EAGAIN = 1502;
  static const int XML_IO_EBADF = 1503;
  static const int XML_IO_EBADMSG = 1504;
  static const int XML_IO_EBUSY = 1505;
  static const int XML_IO_ECANCELED = 1506;
  static const int XML_IO_ECHILD = 1507;
  static const int XML_IO_EDEADLK = 1508;
  static const int XML_IO_EDOM = 1509;
  static const int XML_IO_EEXIST = 1510;
  static const int XML_IO_EFAULT = 1511;
  static const int XML_IO_EFBIG = 1512;
  static const int XML_IO_EINPROGRESS = 1513;
  static const int XML_IO_EINTR = 1514;
  static const int XML_IO_EINVAL = 1515;
  static const int XML_IO_EIO = 1516;
  static const int XML_IO_EISDIR = 1517;
  static const int XML_IO_EMFILE = 1518;
  static const int XML_IO_EMLINK = 1519;
  static const int XML_IO_EMSGSIZE = 1520;
  static const int XML_IO_ENAMETOOLONG = 1521;
  static const int XML_IO_ENFILE = 1522;
  static const int XML_IO_ENODEV = 1523;
  static const int XML_IO_ENOENT = 1524;
  static const int XML_IO_ENOEXEC = 1525;
  static const int XML_IO_ENOLCK = 1526;
  static const int XML_IO_ENOMEM = 1527;
  static const int XML_IO_ENOSPC = 1528;
  static const int XML_IO_ENOSYS = 1529;
  static const int XML_IO_ENOTDIR = 1530;
  static const int XML_IO_ENOTEMPTY = 1531;
  static const int XML_IO_ENOTSUP = 1532;
  static const int XML_IO_ENOTTY = 1533;
  static const int XML_IO_ENXIO = 1534;
  static const int XML_IO_EPERM = 1535;
  static const int XML_IO_EPIPE = 1536;
  static const int XML_IO_ERANGE = 1537;
  static const int XML_IO_EROFS = 1538;
  static const int XML_IO_ESPIPE = 1539;
  static const int XML_IO_ESRCH = 1540;
  static const int XML_IO_ETIMEDOUT = 1541;
  static const int XML_IO_EXDEV = 1542;
  static const int XML_IO_NETWORK_ATTEMPT = 1543;
  static const int XML_IO_ENCODER = 1544;
  static const int XML_IO_FLUSH = 1545;
  static const int XML_IO_WRITE = 1546;
  static const int XML_IO_NO_INPUT = 1547;
  static const int XML_IO_BUFFER_FULL = 1548;
  static const int XML_IO_LOAD_ERROR = 1549;
  static const int XML_IO_ENOTSOCK = 1550;
  static const int XML_IO_EISCONN = 1551;
  static const int XML_IO_ECONNREFUSED = 1552;
  static const int XML_IO_ENETUNREACH = 1553;
  static const int XML_IO_EADDRINUSE = 1554;
  static const int XML_IO_EALREADY = 1555;
  static const int XML_IO_EAFNOSUPPORT = 1556;
  static const int XML_XINCLUDE_RECURSION = 1600;
  static const int XML_XINCLUDE_PARSE_VALUE = 1601;
  static const int XML_XINCLUDE_ENTITY_DEF_MISMATCH = 1602;
  static const int XML_XINCLUDE_NO_HREF = 1603;
  static const int XML_XINCLUDE_NO_FALLBACK = 1604;
  static const int XML_XINCLUDE_HREF_URI = 1605;
  static const int XML_XINCLUDE_TEXT_FRAGMENT = 1606;
  static const int XML_XINCLUDE_TEXT_DOCUMENT = 1607;
  static const int XML_XINCLUDE_INVALID_CHAR = 1608;
  static const int XML_XINCLUDE_BUILD_FAILED = 1609;
  static const int XML_XINCLUDE_UNKNOWN_ENCODING = 1610;
  static const int XML_XINCLUDE_MULTIPLE_ROOT = 1611;
  static const int XML_XINCLUDE_XPTR_FAILED = 1612;
  static const int XML_XINCLUDE_XPTR_RESULT = 1613;
  static const int XML_XINCLUDE_INCLUDE_IN_INCLUDE = 1614;
  static const int XML_XINCLUDE_FALLBACKS_IN_INCLUDE = 1615;
  static const int XML_XINCLUDE_FALLBACK_NOT_IN_INCLUDE = 1616;
  static const int XML_XINCLUDE_DEPRECATED_NS = 1617;
  static const int XML_XINCLUDE_FRAGMENT_ID = 1618;
  static const int XML_CATALOG_MISSING_ATTR = 1650;
  static const int XML_CATALOG_ENTRY_BROKEN = 1651;
  static const int XML_CATALOG_PREFER_VALUE = 1652;
  static const int XML_CATALOG_NOT_CATALOG = 1653;
  static const int XML_CATALOG_RECURSION = 1654;
  static const int XML_SCHEMAP_PREFIX_UNDEFINED = 1700;
  static const int XML_SCHEMAP_ATTRFORMDEFAULT_VALUE = 1701;
  static const int XML_SCHEMAP_ATTRGRP_NONAME_NOREF = 1702;
  static const int XML_SCHEMAP_ATTR_NONAME_NOREF = 1703;
  static const int XML_SCHEMAP_COMPLEXTYPE_NONAME_NOREF = 1704;
  static const int XML_SCHEMAP_ELEMFORMDEFAULT_VALUE = 1705;
  static const int XML_SCHEMAP_ELEM_NONAME_NOREF = 1706;
  static const int XML_SCHEMAP_EXTENSION_NO_BASE = 1707;
  static const int XML_SCHEMAP_FACET_NO_VALUE = 1708;
  static const int XML_SCHEMAP_FAILED_BUILD_IMPORT = 1709;
  static const int XML_SCHEMAP_GROUP_NONAME_NOREF = 1710;
  static const int XML_SCHEMAP_IMPORT_NAMESPACE_NOT_URI = 1711;
  static const int XML_SCHEMAP_IMPORT_REDEFINE_NSNAME = 1712;
  static const int XML_SCHEMAP_IMPORT_SCHEMA_NOT_URI = 1713;
  static const int XML_SCHEMAP_INVALID_BOOLEAN = 1714;
  static const int XML_SCHEMAP_INVALID_ENUM = 1715;
  static const int XML_SCHEMAP_INVALID_FACET = 1716;
  static const int XML_SCHEMAP_INVALID_FACET_VALUE = 1717;
  static const int XML_SCHEMAP_INVALID_MAXOCCURS = 1718;
  static const int XML_SCHEMAP_INVALID_MINOCCURS = 1719;
  static const int XML_SCHEMAP_INVALID_REF_AND_SUBTYPE = 1720;
  static const int XML_SCHEMAP_INVALID_WHITE_SPACE = 1721;
  static const int XML_SCHEMAP_NOATTR_NOREF = 1722;
  static const int XML_SCHEMAP_NOTATION_NO_NAME = 1723;
  static const int XML_SCHEMAP_NOTYPE_NOREF = 1724;
  static const int XML_SCHEMAP_REF_AND_SUBTYPE = 1725;
  static const int XML_SCHEMAP_RESTRICTION_NONAME_NOREF = 1726;
  static const int XML_SCHEMAP_SIMPLETYPE_NONAME = 1727;
  static const int XML_SCHEMAP_TYPE_AND_SUBTYPE = 1728;
  static const int XML_SCHEMAP_UNKNOWN_ALL_CHILD = 1729;
  static const int XML_SCHEMAP_UNKNOWN_ANYATTRIBUTE_CHILD = 1730;
  static const int XML_SCHEMAP_UNKNOWN_ATTR_CHILD = 1731;
  static const int XML_SCHEMAP_UNKNOWN_ATTRGRP_CHILD = 1732;
  static const int XML_SCHEMAP_UNKNOWN_ATTRIBUTE_GROUP = 1733;
  static const int XML_SCHEMAP_UNKNOWN_BASE_TYPE = 1734;
  static const int XML_SCHEMAP_UNKNOWN_CHOICE_CHILD = 1735;
  static const int XML_SCHEMAP_UNKNOWN_COMPLEXCONTENT_CHILD = 1736;
  static const int XML_SCHEMAP_UNKNOWN_COMPLEXTYPE_CHILD = 1737;
  static const int XML_SCHEMAP_UNKNOWN_ELEM_CHILD = 1738;
  static const int XML_SCHEMAP_UNKNOWN_EXTENSION_CHILD = 1739;
  static const int XML_SCHEMAP_UNKNOWN_FACET_CHILD = 1740;
  static const int XML_SCHEMAP_UNKNOWN_FACET_TYPE = 1741;
  static const int XML_SCHEMAP_UNKNOWN_GROUP_CHILD = 1742;
  static const int XML_SCHEMAP_UNKNOWN_IMPORT_CHILD = 1743;
  static const int XML_SCHEMAP_UNKNOWN_LIST_CHILD = 1744;
  static const int XML_SCHEMAP_UNKNOWN_NOTATION_CHILD = 1745;
  static const int XML_SCHEMAP_UNKNOWN_PROCESSCONTENT_CHILD = 1746;
  static const int XML_SCHEMAP_UNKNOWN_REF = 1747;
  static const int XML_SCHEMAP_UNKNOWN_RESTRICTION_CHILD = 1748;
  static const int XML_SCHEMAP_UNKNOWN_SCHEMAS_CHILD = 1749;
  static const int XML_SCHEMAP_UNKNOWN_SEQUENCE_CHILD = 1750;
  static const int XML_SCHEMAP_UNKNOWN_SIMPLECONTENT_CHILD = 1751;
  static const int XML_SCHEMAP_UNKNOWN_SIMPLETYPE_CHILD = 1752;
  static const int XML_SCHEMAP_UNKNOWN_TYPE = 1753;
  static const int XML_SCHEMAP_UNKNOWN_UNION_CHILD = 1754;
  static const int XML_SCHEMAP_ELEM_DEFAULT_FIXED = 1755;
  static const int XML_SCHEMAP_REGEXP_INVALID = 1756;
  static const int XML_SCHEMAP_FAILED_LOAD = 1757;
  static const int XML_SCHEMAP_NOTHING_TO_PARSE = 1758;
  static const int XML_SCHEMAP_NOROOT = 1759;
  static const int XML_SCHEMAP_REDEFINED_GROUP = 1760;
  static const int XML_SCHEMAP_REDEFINED_TYPE = 1761;
  static const int XML_SCHEMAP_REDEFINED_ELEMENT = 1762;
  static const int XML_SCHEMAP_REDEFINED_ATTRGROUP = 1763;
  static const int XML_SCHEMAP_REDEFINED_ATTR = 1764;
  static const int XML_SCHEMAP_REDEFINED_NOTATION = 1765;
  static const int XML_SCHEMAP_FAILED_PARSE = 1766;
  static const int XML_SCHEMAP_UNKNOWN_PREFIX = 1767;
  static const int XML_SCHEMAP_DEF_AND_PREFIX = 1768;
  static const int XML_SCHEMAP_UNKNOWN_INCLUDE_CHILD = 1769;
  static const int XML_SCHEMAP_INCLUDE_SCHEMA_NOT_URI = 1770;
  static const int XML_SCHEMAP_INCLUDE_SCHEMA_NO_URI = 1771;
  static const int XML_SCHEMAP_NOT_SCHEMA = 1772;
  static const int XML_SCHEMAP_UNKNOWN_MEMBER_TYPE = 1773;
  static const int XML_SCHEMAP_INVALID_ATTR_USE = 1774;
  static const int XML_SCHEMAP_RECURSIVE = 1775;
  static const int XML_SCHEMAP_SUPERNUMEROUS_LIST_ITEM_TYPE = 1776;
  static const int XML_SCHEMAP_INVALID_ATTR_COMBINATION = 1777;
  static const int XML_SCHEMAP_INVALID_ATTR_INLINE_COMBINATION = 1778;
  static const int XML_SCHEMAP_MISSING_SIMPLETYPE_CHILD = 1779;
  static const int XML_SCHEMAP_INVALID_ATTR_NAME = 1780;
  static const int XML_SCHEMAP_REF_AND_CONTENT = 1781;
  static const int XML_SCHEMAP_CT_PROPS_CORRECT_1 = 1782;
  static const int XML_SCHEMAP_CT_PROPS_CORRECT_2 = 1783;
  static const int XML_SCHEMAP_CT_PROPS_CORRECT_3 = 1784;
  static const int XML_SCHEMAP_CT_PROPS_CORRECT_4 = 1785;
  static const int XML_SCHEMAP_CT_PROPS_CORRECT_5 = 1786;
  static const int XML_SCHEMAP_DERIVATION_OK_RESTRICTION_1 = 1787;
  static const int XML_SCHEMAP_DERIVATION_OK_RESTRICTION_2_1_1 = 1788;
  static const int XML_SCHEMAP_DERIVATION_OK_RESTRICTION_2_1_2 = 1789;
  static const int XML_SCHEMAP_DERIVATION_OK_RESTRICTION_2_2 = 1790;
  static const int XML_SCHEMAP_DERIVATION_OK_RESTRICTION_3 = 1791;
  static const int XML_SCHEMAP_WILDCARD_INVALID_NS_MEMBER = 1792;
  static const int XML_SCHEMAP_INTERSECTION_NOT_EXPRESSIBLE = 1793;
  static const int XML_SCHEMAP_UNION_NOT_EXPRESSIBLE = 1794;
  static const int XML_SCHEMAP_SRC_IMPORT_3_1 = 1795;
  static const int XML_SCHEMAP_SRC_IMPORT_3_2 = 1796;
  static const int XML_SCHEMAP_DERIVATION_OK_RESTRICTION_4_1 = 1797;
  static const int XML_SCHEMAP_DERIVATION_OK_RESTRICTION_4_2 = 1798;
  static const int XML_SCHEMAP_DERIVATION_OK_RESTRICTION_4_3 = 1799;
  static const int XML_SCHEMAP_COS_CT_EXTENDS_1_3 = 1800;
  static const int XML_SCHEMAV_NOROOT = 1801;
  static const int XML_SCHEMAV_UNDECLAREDELEM = 1802;
  static const int XML_SCHEMAV_NOTTOPLEVEL = 1803;
  static const int XML_SCHEMAV_MISSING = 1804;
  static const int XML_SCHEMAV_WRONGELEM = 1805;
  static const int XML_SCHEMAV_NOTYPE = 1806;
  static const int XML_SCHEMAV_NOROLLBACK = 1807;
  static const int XML_SCHEMAV_ISABSTRACT = 1808;
  static const int XML_SCHEMAV_NOTEMPTY = 1809;
  static const int XML_SCHEMAV_ELEMCONT = 1810;
  static const int XML_SCHEMAV_HAVEDEFAULT = 1811;
  static const int XML_SCHEMAV_NOTNILLABLE = 1812;
  static const int XML_SCHEMAV_EXTRACONTENT = 1813;
  static const int XML_SCHEMAV_INVALIDATTR = 1814;
  static const int XML_SCHEMAV_INVALIDELEM = 1815;
  static const int XML_SCHEMAV_NOTDETERMINIST = 1816;
  static const int XML_SCHEMAV_CONSTRUCT = 1817;
  static const int XML_SCHEMAV_INTERNAL = 1818;
  static const int XML_SCHEMAV_NOTSIMPLE = 1819;
  static const int XML_SCHEMAV_ATTRUNKNOWN = 1820;
  static const int XML_SCHEMAV_ATTRINVALID = 1821;
  static const int XML_SCHEMAV_VALUE = 1822;
  static const int XML_SCHEMAV_FACET = 1823;
  static const int XML_SCHEMAV_CVC_DATATYPE_VALID_1_2_1 = 1824;
  static const int XML_SCHEMAV_CVC_DATATYPE_VALID_1_2_2 = 1825;
  static const int XML_SCHEMAV_CVC_DATATYPE_VALID_1_2_3 = 1826;
  static const int XML_SCHEMAV_CVC_TYPE_3_1_1 = 1827;
  static const int XML_SCHEMAV_CVC_TYPE_3_1_2 = 1828;
  static const int XML_SCHEMAV_CVC_FACET_VALID = 1829;
  static const int XML_SCHEMAV_CVC_LENGTH_VALID = 1830;
  static const int XML_SCHEMAV_CVC_MINLENGTH_VALID = 1831;
  static const int XML_SCHEMAV_CVC_MAXLENGTH_VALID = 1832;
  static const int XML_SCHEMAV_CVC_MININCLUSIVE_VALID = 1833;
  static const int XML_SCHEMAV_CVC_MAXINCLUSIVE_VALID = 1834;
  static const int XML_SCHEMAV_CVC_MINEXCLUSIVE_VALID = 1835;
  static const int XML_SCHEMAV_CVC_MAXEXCLUSIVE_VALID = 1836;
  static const int XML_SCHEMAV_CVC_TOTALDIGITS_VALID = 1837;
  static const int XML_SCHEMAV_CVC_FRACTIONDIGITS_VALID = 1838;
  static const int XML_SCHEMAV_CVC_PATTERN_VALID = 1839;
  static const int XML_SCHEMAV_CVC_ENUMERATION_VALID = 1840;
  static const int XML_SCHEMAV_CVC_COMPLEX_TYPE_2_1 = 1841;
  static const int XML_SCHEMAV_CVC_COMPLEX_TYPE_2_2 = 1842;
  static const int XML_SCHEMAV_CVC_COMPLEX_TYPE_2_3 = 1843;
  static const int XML_SCHEMAV_CVC_COMPLEX_TYPE_2_4 = 1844;
  static const int XML_SCHEMAV_CVC_ELT_1 = 1845;
  static const int XML_SCHEMAV_CVC_ELT_2 = 1846;
  static const int XML_SCHEMAV_CVC_ELT_3_1 = 1847;
  static const int XML_SCHEMAV_CVC_ELT_3_2_1 = 1848;
  static const int XML_SCHEMAV_CVC_ELT_3_2_2 = 1849;
  static const int XML_SCHEMAV_CVC_ELT_4_1 = 1850;
  static const int XML_SCHEMAV_CVC_ELT_4_2 = 1851;
  static const int XML_SCHEMAV_CVC_ELT_4_3 = 1852;
  static const int XML_SCHEMAV_CVC_ELT_5_1_1 = 1853;
  static const int XML_SCHEMAV_CVC_ELT_5_1_2 = 1854;
  static const int XML_SCHEMAV_CVC_ELT_5_2_1 = 1855;
  static const int XML_SCHEMAV_CVC_ELT_5_2_2_1 = 1856;
  static const int XML_SCHEMAV_CVC_ELT_5_2_2_2_1 = 1857;
  static const int XML_SCHEMAV_CVC_ELT_5_2_2_2_2 = 1858;
  static const int XML_SCHEMAV_CVC_ELT_6 = 1859;
  static const int XML_SCHEMAV_CVC_ELT_7 = 1860;
  static const int XML_SCHEMAV_CVC_ATTRIBUTE_1 = 1861;
  static const int XML_SCHEMAV_CVC_ATTRIBUTE_2 = 1862;
  static const int XML_SCHEMAV_CVC_ATTRIBUTE_3 = 1863;
  static const int XML_SCHEMAV_CVC_ATTRIBUTE_4 = 1864;
  static const int XML_SCHEMAV_CVC_COMPLEX_TYPE_3_1 = 1865;
  static const int XML_SCHEMAV_CVC_COMPLEX_TYPE_3_2_1 = 1866;
  static const int XML_SCHEMAV_CVC_COMPLEX_TYPE_3_2_2 = 1867;
  static const int XML_SCHEMAV_CVC_COMPLEX_TYPE_4 = 1868;
  static const int XML_SCHEMAV_CVC_COMPLEX_TYPE_5_1 = 1869;
  static const int XML_SCHEMAV_CVC_COMPLEX_TYPE_5_2 = 1870;
  static const int XML_SCHEMAV_ELEMENT_CONTENT = 1871;
  static const int XML_SCHEMAV_DOCUMENT_ELEMENT_MISSING = 1872;
  static const int XML_SCHEMAV_CVC_COMPLEX_TYPE_1 = 1873;
  static const int XML_SCHEMAV_CVC_AU = 1874;
  static const int XML_SCHEMAV_CVC_TYPE_1 = 1875;
  static const int XML_SCHEMAV_CVC_TYPE_2 = 1876;
  static const int XML_SCHEMAV_CVC_IDC = 1877;
  static const int XML_SCHEMAV_CVC_WILDCARD = 1878;
  static const int XML_SCHEMAV_MISC = 1879;
  static const int XML_XPTR_UNKNOWN_SCHEME = 1900;
  static const int XML_XPTR_CHILDSEQ_START = 1901;
  static const int XML_XPTR_EVAL_FAILED = 1902;
  static const int XML_XPTR_EXTRA_OBJECTS = 1903;
  static const int XML_C14N_CREATE_CTXT = 1950;
  static const int XML_C14N_REQUIRES_UTF8 = 1951;
  static const int XML_C14N_CREATE_STACK = 1952;
  static const int XML_C14N_INVALID_NODE = 1953;
  static const int XML_C14N_UNKNOW_NODE = 1954;
  static const int XML_C14N_RELATIVE_NAMESPACE = 1955;
  static const int XML_FTP_PASV_ANSWER = 2000;
  static const int XML_FTP_EPSV_ANSWER = 2001;
  static const int XML_FTP_ACCNT = 2002;
  static const int XML_FTP_URL_SYNTAX = 2003;
  static const int XML_HTTP_URL_SYNTAX = 2020;
  static const int XML_HTTP_USE_IP = 2021;
  static const int XML_HTTP_UNKNOWN_HOST = 2022;
  static const int XML_SCHEMAP_SRC_SIMPLE_TYPE_1 = 3000;
  static const int XML_SCHEMAP_SRC_SIMPLE_TYPE_2 = 3001;
  static const int XML_SCHEMAP_SRC_SIMPLE_TYPE_3 = 3002;
  static const int XML_SCHEMAP_SRC_SIMPLE_TYPE_4 = 3003;
  static const int XML_SCHEMAP_SRC_RESOLVE = 3004;
  static const int XML_SCHEMAP_SRC_RESTRICTION_BASE_OR_SIMPLETYPE = 3005;
  static const int XML_SCHEMAP_SRC_LIST_ITEMTYPE_OR_SIMPLETYPE = 3006;
  static const int XML_SCHEMAP_SRC_UNION_MEMBERTYPES_OR_SIMPLETYPES = 3007;
  static const int XML_SCHEMAP_ST_PROPS_CORRECT_1 = 3008;
  static const int XML_SCHEMAP_ST_PROPS_CORRECT_2 = 3009;
  static const int XML_SCHEMAP_ST_PROPS_CORRECT_3 = 3010;
  static const int XML_SCHEMAP_COS_ST_RESTRICTS_1_1 = 3011;
  static const int XML_SCHEMAP_COS_ST_RESTRICTS_1_2 = 3012;
  static const int XML_SCHEMAP_COS_ST_RESTRICTS_1_3_1 = 3013;
  static const int XML_SCHEMAP_COS_ST_RESTRICTS_1_3_2 = 3014;
  static const int XML_SCHEMAP_COS_ST_RESTRICTS_2_1 = 3015;
  static const int XML_SCHEMAP_COS_ST_RESTRICTS_2_3_1_1 = 3016;
  static const int XML_SCHEMAP_COS_ST_RESTRICTS_2_3_1_2 = 3017;
  static const int XML_SCHEMAP_COS_ST_RESTRICTS_2_3_2_1 = 3018;
  static const int XML_SCHEMAP_COS_ST_RESTRICTS_2_3_2_2 = 3019;
  static const int XML_SCHEMAP_COS_ST_RESTRICTS_2_3_2_3 = 3020;
  static const int XML_SCHEMAP_COS_ST_RESTRICTS_2_3_2_4 = 3021;
  static const int XML_SCHEMAP_COS_ST_RESTRICTS_2_3_2_5 = 3022;
  static const int XML_SCHEMAP_COS_ST_RESTRICTS_3_1 = 3023;
  static const int XML_SCHEMAP_COS_ST_RESTRICTS_3_3_1 = 3024;
  static const int XML_SCHEMAP_COS_ST_RESTRICTS_3_3_1_2 = 3025;
  static const int XML_SCHEMAP_COS_ST_RESTRICTS_3_3_2_2 = 3026;
  static const int XML_SCHEMAP_COS_ST_RESTRICTS_3_3_2_1 = 3027;
  static const int XML_SCHEMAP_COS_ST_RESTRICTS_3_3_2_3 = 3028;
  static const int XML_SCHEMAP_COS_ST_RESTRICTS_3_3_2_4 = 3029;
  static const int XML_SCHEMAP_COS_ST_RESTRICTS_3_3_2_5 = 3030;
  static const int XML_SCHEMAP_COS_ST_DERIVED_OK_2_1 = 3031;
  static const int XML_SCHEMAP_COS_ST_DERIVED_OK_2_2 = 3032;
  static const int XML_SCHEMAP_S4S_ELEM_NOT_ALLOWED = 3033;
  static const int XML_SCHEMAP_S4S_ELEM_MISSING = 3034;
  static const int XML_SCHEMAP_S4S_ATTR_NOT_ALLOWED = 3035;
  static const int XML_SCHEMAP_S4S_ATTR_MISSING = 3036;
  static const int XML_SCHEMAP_S4S_ATTR_INVALID_VALUE = 3037;
  static const int XML_SCHEMAP_SRC_ELEMENT_1 = 3038;
  static const int XML_SCHEMAP_SRC_ELEMENT_2_1 = 3039;
  static const int XML_SCHEMAP_SRC_ELEMENT_2_2 = 3040;
  static const int XML_SCHEMAP_SRC_ELEMENT_3 = 3041;
  static const int XML_SCHEMAP_P_PROPS_CORRECT_1 = 3042;
  static const int XML_SCHEMAP_P_PROPS_CORRECT_2_1 = 3043;
  static const int XML_SCHEMAP_P_PROPS_CORRECT_2_2 = 3044;
  static const int XML_SCHEMAP_E_PROPS_CORRECT_2 = 3045;
  static const int XML_SCHEMAP_E_PROPS_CORRECT_3 = 3046;
  static const int XML_SCHEMAP_E_PROPS_CORRECT_4 = 3047;
  static const int XML_SCHEMAP_E_PROPS_CORRECT_5 = 3048;
  static const int XML_SCHEMAP_E_PROPS_CORRECT_6 = 3049;
  static const int XML_SCHEMAP_SRC_INCLUDE = 3050;
  static const int XML_SCHEMAP_SRC_ATTRIBUTE_1 = 3051;
  static const int XML_SCHEMAP_SRC_ATTRIBUTE_2 = 3052;
  static const int XML_SCHEMAP_SRC_ATTRIBUTE_3_1 = 3053;
  static const int XML_SCHEMAP_SRC_ATTRIBUTE_3_2 = 3054;
  static const int XML_SCHEMAP_SRC_ATTRIBUTE_4 = 3055;
  static const int XML_SCHEMAP_NO_XMLNS = 3056;
  static const int XML_SCHEMAP_NO_XSI = 3057;
  static const int XML_SCHEMAP_COS_VALID_DEFAULT_1 = 3058;
  static const int XML_SCHEMAP_COS_VALID_DEFAULT_2_1 = 3059;
  static const int XML_SCHEMAP_COS_VALID_DEFAULT_2_2_1 = 3060;
  static const int XML_SCHEMAP_COS_VALID_DEFAULT_2_2_2 = 3061;
  static const int XML_SCHEMAP_CVC_SIMPLE_TYPE = 3062;
  static const int XML_SCHEMAP_COS_CT_EXTENDS_1_1 = 3063;
  static const int XML_SCHEMAP_SRC_IMPORT_1_1 = 3064;
  static const int XML_SCHEMAP_SRC_IMPORT_1_2 = 3065;
  static const int XML_SCHEMAP_SRC_IMPORT_2 = 3066;
  static const int XML_SCHEMAP_SRC_IMPORT_2_1 = 3067;
  static const int XML_SCHEMAP_SRC_IMPORT_2_2 = 3068;
  static const int XML_SCHEMAP_INTERNAL = 3069;
  static const int XML_SCHEMAP_NOT_DETERMINISTIC = 3070;
  static const int XML_SCHEMAP_SRC_ATTRIBUTE_GROUP_1 = 3071;
  static const int XML_SCHEMAP_SRC_ATTRIBUTE_GROUP_2 = 3072;
  static const int XML_SCHEMAP_SRC_ATTRIBUTE_GROUP_3 = 3073;
  static const int XML_SCHEMAP_MG_PROPS_CORRECT_1 = 3074;
  static const int XML_SCHEMAP_MG_PROPS_CORRECT_2 = 3075;
  static const int XML_SCHEMAP_SRC_CT_1 = 3076;
  static const int XML_SCHEMAP_DERIVATION_OK_RESTRICTION_2_1_3 = 3077;
  static const int XML_SCHEMAP_AU_PROPS_CORRECT_2 = 3078;
  static const int XML_SCHEMAP_A_PROPS_CORRECT_2 = 3079;
  static const int XML_SCHEMAP_C_PROPS_CORRECT = 3080;
  static const int XML_SCHEMAP_SRC_REDEFINE = 3081;
  static const int XML_SCHEMAP_SRC_IMPORT = 3082;
  static const int XML_SCHEMAP_WARN_SKIP_SCHEMA = 3083;
  static const int XML_SCHEMAP_WARN_UNLOCATED_SCHEMA = 3084;
  static const int XML_SCHEMAP_WARN_ATTR_REDECL_PROH = 3085;
  static const int XML_SCHEMAP_WARN_ATTR_POINTLESS_PROH = 3086;
  static const int XML_SCHEMAP_AG_PROPS_CORRECT = 3087;
  static const int XML_SCHEMAP_COS_CT_EXTENDS_1_2 = 3088;
  static const int XML_SCHEMAP_AU_PROPS_CORRECT = 3089;
  static const int XML_SCHEMAP_A_PROPS_CORRECT_3 = 3090;
  static const int XML_SCHEMAP_COS_ALL_LIMITED = 3091;
  static const int XML_SCHEMATRONV_ASSERT = 4000;
  static const int XML_SCHEMATRONV_REPORT = 4001;
  static const int XML_MODULE_OPEN = 4900;
  static const int XML_MODULE_CLOSE = 4901;
  static const int XML_CHECK_FOUND_ELEMENT = 5000;
  static const int XML_CHECK_FOUND_ATTRIBUTE = 5001;
  static const int XML_CHECK_FOUND_TEXT = 5002;
  static const int XML_CHECK_FOUND_CDATA = 5003;
  static const int XML_CHECK_FOUND_ENTITYREF = 5004;
  static const int XML_CHECK_FOUND_ENTITY = 5005;
  static const int XML_CHECK_FOUND_PI = 5006;
  static const int XML_CHECK_FOUND_COMMENT = 5007;
  static const int XML_CHECK_FOUND_DOCTYPE = 5008;
  static const int XML_CHECK_FOUND_FRAGMENT = 5009;
  static const int XML_CHECK_FOUND_NOTATION = 5010;
  static const int XML_CHECK_UNKNOWN_NODE = 5011;
  static const int XML_CHECK_ENTITY_TYPE = 5012;
  static const int XML_CHECK_NO_PARENT = 5013;
  static const int XML_CHECK_NO_DOC = 5014;
  static const int XML_CHECK_NO_NAME = 5015;
  static const int XML_CHECK_NO_ELEM = 5016;
  static const int XML_CHECK_WRONG_DOC = 5017;
  static const int XML_CHECK_NO_PREV = 5018;
  static const int XML_CHECK_WRONG_PREV = 5019;
  static const int XML_CHECK_NO_NEXT = 5020;
  static const int XML_CHECK_WRONG_NEXT = 5021;
  static const int XML_CHECK_NOT_DTD = 5022;
  static const int XML_CHECK_NOT_ATTR = 5023;
  static const int XML_CHECK_NOT_ATTR_DECL = 5024;
  static const int XML_CHECK_NOT_ELEM_DECL = 5025;
  static const int XML_CHECK_NOT_ENTITY_DECL = 5026;
  static const int XML_CHECK_NOT_NS_DECL = 5027;
  static const int XML_CHECK_NO_HREF = 5028;
  static const int XML_CHECK_WRONG_PARENT = 5029;
  static const int XML_CHECK_NS_SCOPE = 5030;
  static const int XML_CHECK_NS_ANCESTOR = 5031;
  static const int XML_CHECK_NOT_UTF8 = 5032;
  static const int XML_CHECK_NO_DICT = 5033;
  static const int XML_CHECK_NOT_NCNAME = 5034;
  static const int XML_CHECK_OUTSIDE_DICT = 5035;
  static const int XML_CHECK_WRONG_NAME = 5036;
  static const int XML_CHECK_NAME_NOT_NULL = 5037;
  static const int XML_I18N_NO_NAME = 6000;
  static const int XML_I18N_NO_HANDLER = 6001;
  static const int XML_I18N_EXCESS_HANDLER = 6002;
  static const int XML_I18N_CONV_FAILED = 6003;
  static const int XML_I18N_NO_OUTPUT = 6004;
  static const int XML_BUF_OVERFLOW = 7000;
}

/// xmlGenericErrorFunc:
/// @ctx:  a parsing context
/// @msg:  the message
/// @...:  the extra arguments of the varargs to format the message
///
/// Signature of the function to use when there is an error and
/// no parsing or validity context available .
typedef xmlGenericErrorFunc
    = ffi.Pointer<ffi.NativeFunction<xmlGenericErrorFuncFunction>>;
typedef xmlGenericErrorFuncFunction = ffi.Void Function(
    ffi.Pointer<ffi.Void> ctx, ffi.Pointer<ffi.Char> msg);
typedef DartxmlGenericErrorFuncFunction = void Function(
    ffi.Pointer<ffi.Void> ctx, ffi.Pointer<ffi.Char> msg);

final class _xmlLink extends ffi.Opaque {}

final class _xmlList extends ffi.Opaque {}

typedef xmlListPtr = ffi.Pointer<xmlList>;
typedef xmlList = _xmlList;

/// xmlListDeallocator:
/// @lk:  the data to deallocate
///
/// Callback function used to free data from a list.
typedef xmlListDeallocator
    = ffi.Pointer<ffi.NativeFunction<xmlListDeallocatorFunction>>;
typedef xmlListDeallocatorFunction = ffi.Void Function(xmlLinkPtr lk);
typedef DartxmlListDeallocatorFunction = void Function(xmlLinkPtr lk);
typedef xmlLinkPtr = ffi.Pointer<xmlLink>;
typedef xmlLink = _xmlLink;

/// xmlListDataCompare:
/// @data0: the first data
/// @data1: the second data
///
/// Callback function used to compare 2 data.
///
/// Returns 0 is equality, -1 or 1 otherwise depending on the ordering.
typedef xmlListDataCompare
    = ffi.Pointer<ffi.NativeFunction<xmlListDataCompareFunction>>;
typedef xmlListDataCompareFunction = ffi.Int Function(
    ffi.Pointer<ffi.Void> data0, ffi.Pointer<ffi.Void> data1);
typedef DartxmlListDataCompareFunction = int Function(
    ffi.Pointer<ffi.Void> data0, ffi.Pointer<ffi.Void> data1);

/// xmlListWalker:
/// @data: the data found in the list
/// @user: extra user provided data to the walker
///
/// Callback function used when walking a list with xmlListWalk().
///
/// Returns 0 to stop walking the list, 1 otherwise.
typedef xmlListWalker = ffi.Pointer<ffi.NativeFunction<xmlListWalkerFunction>>;
typedef xmlListWalkerFunction = ffi.Int Function(
    ffi.Pointer<ffi.Void> data, ffi.Pointer<ffi.Void> user);
typedef DartxmlListWalkerFunction = int Function(
    ffi.Pointer<ffi.Void> data, ffi.Pointer<ffi.Void> user);
typedef xmlNotationPtr = ffi.Pointer<xmlNotation>;

/// xmlNotation:
///
/// A DTD Notation definition.
typedef xmlNotation = _xmlNotation;
typedef xmlValidCtxtPtr = ffi.Pointer<xmlValidCtxt>;
typedef xmlNotationTablePtr = ffi.Pointer<xmlNotationTable>;
typedef xmlNotationTable = _xmlHashTable;
typedef xmlElementPtr = ffi.Pointer<xmlElement>;

/// xmlElement:
///
/// An XML Element declaration from a DTD.
typedef xmlElement = _xmlElement;
typedef xmlElementTablePtr = ffi.Pointer<xmlElementTable>;
typedef xmlElementTable = _xmlHashTable;
typedef xmlAttributeTablePtr = ffi.Pointer<xmlAttributeTable>;
typedef xmlAttributeTable = _xmlHashTable;
typedef xmlIDPtr = ffi.Pointer<xmlID>;

/// xmlID:
///
/// An XML ID instance.
typedef xmlID = _xmlID;
typedef xmlIDTablePtr = ffi.Pointer<xmlIDTable>;
typedef xmlIDTable = _xmlHashTable;
typedef xmlRefPtr = ffi.Pointer<xmlRef>;

/// xmlRef:
///
/// An XML IDREF instance.
typedef xmlRef = _xmlRef;
typedef xmlRefTablePtr = ffi.Pointer<xmlRefTable>;
typedef xmlRefTable = _xmlHashTable;
typedef xmlEntitiesTablePtr = ffi.Pointer<xmlEntitiesTable>;
typedef xmlEntitiesTable = _xmlHashTable;

final class _xmlSAXHandlerV1 extends ffi.Struct {
  external internalSubsetSAXFunc internalSubset;

  external isStandaloneSAXFunc isStandalone;

  external hasInternalSubsetSAXFunc hasInternalSubset;

  external hasExternalSubsetSAXFunc hasExternalSubset;

  external resolveEntitySAXFunc resolveEntity;

  external getEntitySAXFunc getEntity;

  external entityDeclSAXFunc entityDecl;

  external notationDeclSAXFunc notationDecl;

  external attributeDeclSAXFunc attributeDecl;

  external elementDeclSAXFunc elementDecl;

  external unparsedEntityDeclSAXFunc unparsedEntityDecl;

  external setDocumentLocatorSAXFunc setDocumentLocator;

  external startDocumentSAXFunc startDocument;

  external endDocumentSAXFunc endDocument;

  external startElementSAXFunc startElement;

  external endElementSAXFunc endElement;

  external referenceSAXFunc reference;

  external charactersSAXFunc characters;

  external ignorableWhitespaceSAXFunc ignorableWhitespace;

  external processingInstructionSAXFunc processingInstruction;

  external commentSAXFunc comment;

  external warningSAXFunc warning;

  external errorSAXFunc error;

  external fatalErrorSAXFunc fatalError;

  external getParameterEntitySAXFunc getParameterEntity;

  external cdataBlockSAXFunc cdataBlock;

  external externalSubsetSAXFunc externalSubset;

  @ffi.UnsignedInt()
  external int initialized;
}

abstract class xmlCharEncoding {
  static const int XML_CHAR_ENCODING_ERROR = -1;
  static const int XML_CHAR_ENCODING_NONE = 0;
  static const int XML_CHAR_ENCODING_UTF8 = 1;
  static const int XML_CHAR_ENCODING_UTF16LE = 2;
  static const int XML_CHAR_ENCODING_UTF16BE = 3;
  static const int XML_CHAR_ENCODING_UCS4LE = 4;
  static const int XML_CHAR_ENCODING_UCS4BE = 5;
  static const int XML_CHAR_ENCODING_EBCDIC = 6;
  static const int XML_CHAR_ENCODING_UCS4_2143 = 7;
  static const int XML_CHAR_ENCODING_UCS4_3412 = 8;
  static const int XML_CHAR_ENCODING_UCS2 = 9;
  static const int XML_CHAR_ENCODING_8859_1 = 10;
  static const int XML_CHAR_ENCODING_8859_2 = 11;
  static const int XML_CHAR_ENCODING_8859_3 = 12;
  static const int XML_CHAR_ENCODING_8859_4 = 13;
  static const int XML_CHAR_ENCODING_8859_5 = 14;
  static const int XML_CHAR_ENCODING_8859_6 = 15;
  static const int XML_CHAR_ENCODING_8859_7 = 16;
  static const int XML_CHAR_ENCODING_8859_8 = 17;
  static const int XML_CHAR_ENCODING_8859_9 = 18;
  static const int XML_CHAR_ENCODING_2022_JP = 19;
  static const int XML_CHAR_ENCODING_SHIFT_JIS = 20;
  static const int XML_CHAR_ENCODING_EUC_JP = 21;
  static const int XML_CHAR_ENCODING_ASCII = 22;
}

/// xmlInputMatchCallback:
/// @filename: the filename or URI
///
/// Callback used in the I/O Input API to detect if the current handler
/// can provide input functionality for this resource.
///
/// Returns 1 if yes and 0 if another Input module should be used
typedef xmlInputMatchCallback
    = ffi.Pointer<ffi.NativeFunction<xmlInputMatchCallbackFunction>>;
typedef xmlInputMatchCallbackFunction = ffi.Int Function(
    ffi.Pointer<ffi.Char> filename);
typedef DartxmlInputMatchCallbackFunction = int Function(
    ffi.Pointer<ffi.Char> filename);

/// xmlInputOpenCallback:
/// @filename: the filename or URI
///
/// Callback used in the I/O Input API to open the resource
///
/// Returns an Input context or NULL in case or error
typedef xmlInputOpenCallback
    = ffi.Pointer<ffi.NativeFunction<xmlInputOpenCallbackFunction>>;
typedef xmlInputOpenCallbackFunction = ffi.Pointer<ffi.Void> Function(
    ffi.Pointer<ffi.Char> filename);

/// xmlOutputMatchCallback:
/// @filename: the filename or URI
///
/// Callback used in the I/O Output API to detect if the current handler
/// can provide output functionality for this resource.
///
/// Returns 1 if yes and 0 if another Output module should be used
typedef xmlOutputMatchCallback
    = ffi.Pointer<ffi.NativeFunction<xmlOutputMatchCallbackFunction>>;
typedef xmlOutputMatchCallbackFunction = ffi.Int Function(
    ffi.Pointer<ffi.Char> filename);
typedef DartxmlOutputMatchCallbackFunction = int Function(
    ffi.Pointer<ffi.Char> filename);

/// xmlOutputOpenCallback:
/// @filename: the filename or URI
///
/// Callback used in the I/O Output API to open the resource
///
/// Returns an Output context or NULL in case or error
typedef xmlOutputOpenCallback
    = ffi.Pointer<ffi.NativeFunction<xmlOutputOpenCallbackFunction>>;
typedef xmlOutputOpenCallbackFunction = ffi.Pointer<ffi.Void> Function(
    ffi.Pointer<ffi.Char> filename);
typedef xmlParserCtxtPtr = ffi.Pointer<xmlParserCtxt>;
typedef xmlParserCtxt = _xmlParserCtxt;
typedef xmlSAXHandlerPtr = ffi.Pointer<xmlSAXHandler>;
typedef xmlSAXHandler = _xmlSAXHandler;
typedef xmlParserNodeInfoSeqPtr = ffi.Pointer<xmlParserNodeInfoSeq>;
typedef xmlParserNodeInfoPtr = ffi.Pointer<xmlParserNodeInfo>;

/// xmlExternalEntityLoader:
/// @URL: The System ID of the resource requested
/// @ID: The Public ID of the resource requested
/// @context: the XML parser context
///
/// External entity loaders types.
///
/// Returns the entity input parser.
typedef xmlExternalEntityLoader
    = ffi.Pointer<ffi.NativeFunction<xmlExternalEntityLoaderFunction>>;
typedef xmlExternalEntityLoaderFunction = xmlParserInputPtr Function(
    ffi.Pointer<ffi.Char> URL,
    ffi.Pointer<ffi.Char> ID,
    xmlParserCtxtPtr context);

/// xmlParserOption:
///
/// This is the set of XML parser options that can be passed down
/// to the xmlReadDoc() and similar calls.
abstract class xmlParserOption {
  static const int XML_PARSE_RECOVER = 1;
  static const int XML_PARSE_NOENT = 2;
  static const int XML_PARSE_DTDLOAD = 4;
  static const int XML_PARSE_DTDATTR = 8;
  static const int XML_PARSE_DTDVALID = 16;
  static const int XML_PARSE_NOERROR = 32;
  static const int XML_PARSE_NOWARNING = 64;
  static const int XML_PARSE_PEDANTIC = 128;
  static const int XML_PARSE_NOBLANKS = 256;
  static const int XML_PARSE_SAX1 = 512;
  static const int XML_PARSE_XINCLUDE = 1024;
  static const int XML_PARSE_NONET = 2048;
  static const int XML_PARSE_NODICT = 4096;
  static const int XML_PARSE_NSCLEAN = 8192;
  static const int XML_PARSE_NOCDATA = 16384;
  static const int XML_PARSE_NOXINCNODE = 32768;
  static const int XML_PARSE_COMPACT = 65536;
  static const int XML_PARSE_OLD10 = 131072;
  static const int XML_PARSE_NOBASEFIX = 262144;
  static const int XML_PARSE_HUGE = 524288;
  static const int XML_PARSE_OLDSAX = 1048576;
  static const int XML_PARSE_IGNORE_ENC = 2097152;
  static const int XML_PARSE_BIG_LINES = 4194304;
}

/// xmlFeature:
///
/// Used to examine the existence of features that can be enabled
/// or disabled at compile-time.
/// They used to be called XML_FEATURE_xxx but this clashed with Expat
abstract class xmlFeature {
  static const int XML_WITH_THREAD = 1;
  static const int XML_WITH_TREE = 2;
  static const int XML_WITH_OUTPUT = 3;
  static const int XML_WITH_PUSH = 4;
  static const int XML_WITH_READER = 5;
  static const int XML_WITH_PATTERN = 6;
  static const int XML_WITH_WRITER = 7;
  static const int XML_WITH_SAX1 = 8;
  static const int XML_WITH_FTP = 9;
  static const int XML_WITH_HTTP = 10;
  static const int XML_WITH_VALID = 11;
  static const int XML_WITH_HTML = 12;
  static const int XML_WITH_LEGACY = 13;
  static const int XML_WITH_C14N = 14;
  static const int XML_WITH_CATALOG = 15;
  static const int XML_WITH_XPATH = 16;
  static const int XML_WITH_XPTR = 17;
  static const int XML_WITH_XINCLUDE = 18;
  static const int XML_WITH_ICONV = 19;
  static const int XML_WITH_ISO8859X = 20;
  static const int XML_WITH_UNICODE = 21;
  static const int XML_WITH_REGEXP = 22;
  static const int XML_WITH_AUTOMATA = 23;
  static const int XML_WITH_EXPR = 24;
  static const int XML_WITH_SCHEMAS = 25;
  static const int XML_WITH_SCHEMATRON = 26;
  static const int XML_WITH_MODULES = 27;
  static const int XML_WITH_DEBUG = 28;
  static const int XML_WITH_DEBUG_MEM = 29;
  static const int XML_WITH_DEBUG_RUN = 30;
  static const int XML_WITH_ZLIB = 31;
  static const int XML_WITH_ICU = 32;
  static const int XML_WITH_LZMA = 33;
  static const int XML_WITH_NONE = 99999;
}

abstract class xlinkType {
  static const int XLINK_TYPE_NONE = 0;
  static const int XLINK_TYPE_SIMPLE = 1;
  static const int XLINK_TYPE_EXTENDED = 2;
  static const int XLINK_TYPE_EXTENDED_SET = 3;
}

abstract class xlinkShow {
  static const int XLINK_SHOW_NONE = 0;
  static const int XLINK_SHOW_NEW = 1;
  static const int XLINK_SHOW_EMBED = 2;
  static const int XLINK_SHOW_REPLACE = 3;
}

abstract class xlinkActuate {
  static const int XLINK_ACTUATE_NONE = 0;
  static const int XLINK_ACTUATE_AUTO = 1;
  static const int XLINK_ACTUATE_ONREQUEST = 2;
}

final class _xlinkHandler extends ffi.Struct {
  external xlinkSimpleLinkFunk simple;

  external xlinkExtendedLinkFunk extended;

  external xlinkExtendedLinkSetFunk set1;
}

/// xlinkSimpleLinkFunk:
/// @ctx:  user data pointer
/// @node:  the node carrying the link
/// @href:  the target of the link
/// @role:  the role string
/// @title:  the link title
///
/// This is the prototype for a simple link detection callback.
typedef xlinkSimpleLinkFunk
    = ffi.Pointer<ffi.NativeFunction<xlinkSimpleLinkFunkFunction>>;
typedef xlinkSimpleLinkFunkFunction = ffi.Void Function(
    ffi.Pointer<ffi.Void> ctx,
    xmlNodePtr node,
    xlinkHRef href,
    xlinkRole role,
    xlinkTitle title);
typedef DartxlinkSimpleLinkFunkFunction = void Function(
    ffi.Pointer<ffi.Void> ctx,
    xmlNodePtr node,
    xlinkHRef href,
    xlinkRole role,
    xlinkTitle title);

/// Various defines for the various Link properties.
///
/// NOTE: the link detection layer will try to resolve QName expansion
/// of namespaces. If "foo" is the prefix for "http://foo.com/"
/// then the link detection layer will expand role="foo:myrole"
/// to "http://foo.com/:myrole".
/// NOTE: the link detection layer will expand URI-References found on
/// href attributes by using the base mechanism if found.
typedef xlinkHRef = ffi.Pointer<xmlChar>;
typedef xlinkRole = ffi.Pointer<xmlChar>;
typedef xlinkTitle = ffi.Pointer<xmlChar>;

/// xlinkExtendedLinkFunk:
/// @ctx:  user data pointer
/// @node:  the node carrying the link
/// @nbLocators: the number of locators detected on the link
/// @hrefs:  pointer to the array of locator hrefs
/// @roles:  pointer to the array of locator roles
/// @nbArcs: the number of arcs detected on the link
/// @from:  pointer to the array of source roles found on the arcs
/// @to:  pointer to the array of target roles found on the arcs
/// @show:  array of values for the show attributes found on the arcs
/// @actuate:  array of values for the actuate attributes found on the arcs
/// @nbTitles: the number of titles detected on the link
/// @title:  array of titles detected on the link
/// @langs:  array of xml:lang values for the titles
///
/// This is the prototype for a extended link detection callback.
typedef xlinkExtendedLinkFunk
    = ffi.Pointer<ffi.NativeFunction<xlinkExtendedLinkFunkFunction>>;
typedef xlinkExtendedLinkFunkFunction = ffi.Void Function(
    ffi.Pointer<ffi.Void> ctx,
    xmlNodePtr node,
    ffi.Int nbLocators,
    ffi.Pointer<xlinkHRef> hrefs,
    ffi.Pointer<xlinkRole> roles,
    ffi.Int nbArcs,
    ffi.Pointer<xlinkRole> from,
    ffi.Pointer<xlinkRole> to,
    ffi.Pointer<ffi.Int32> show1,
    ffi.Pointer<ffi.Int32> actuate,
    ffi.Int nbTitles,
    ffi.Pointer<xlinkTitle> titles,
    ffi.Pointer<ffi.Pointer<xmlChar>> langs);
typedef DartxlinkExtendedLinkFunkFunction = void Function(
    ffi.Pointer<ffi.Void> ctx,
    xmlNodePtr node,
    int nbLocators,
    ffi.Pointer<xlinkHRef> hrefs,
    ffi.Pointer<xlinkRole> roles,
    int nbArcs,
    ffi.Pointer<xlinkRole> from,
    ffi.Pointer<xlinkRole> to,
    ffi.Pointer<ffi.Int32> show1,
    ffi.Pointer<ffi.Int32> actuate,
    int nbTitles,
    ffi.Pointer<xlinkTitle> titles,
    ffi.Pointer<ffi.Pointer<xmlChar>> langs);

/// xlinkExtendedLinkSetFunk:
/// @ctx:  user data pointer
/// @node:  the node carrying the link
/// @nbLocators: the number of locators detected on the link
/// @hrefs:  pointer to the array of locator hrefs
/// @roles:  pointer to the array of locator roles
/// @nbTitles: the number of titles detected on the link
/// @title:  array of titles detected on the link
/// @langs:  array of xml:lang values for the titles
///
/// This is the prototype for a extended link set detection callback.
typedef xlinkExtendedLinkSetFunk
    = ffi.Pointer<ffi.NativeFunction<xlinkExtendedLinkSetFunkFunction>>;
typedef xlinkExtendedLinkSetFunkFunction = ffi.Void Function(
    ffi.Pointer<ffi.Void> ctx,
    xmlNodePtr node,
    ffi.Int nbLocators,
    ffi.Pointer<xlinkHRef> hrefs,
    ffi.Pointer<xlinkRole> roles,
    ffi.Int nbTitles,
    ffi.Pointer<xlinkTitle> titles,
    ffi.Pointer<ffi.Pointer<xmlChar>> langs);
typedef DartxlinkExtendedLinkSetFunkFunction = void Function(
    ffi.Pointer<ffi.Void> ctx,
    xmlNodePtr node,
    int nbLocators,
    ffi.Pointer<xlinkHRef> hrefs,
    ffi.Pointer<xlinkRole> roles,
    int nbTitles,
    ffi.Pointer<xlinkTitle> titles,
    ffi.Pointer<ffi.Pointer<xmlChar>> langs);

/// xlinkNodeDetectFunc:
/// @ctx:  user data pointer
/// @node:  the node to check
///
/// This is the prototype for the link detection routine.
/// It calls the default link detection callbacks upon link detection.
typedef xlinkNodeDetectFunc
    = ffi.Pointer<ffi.NativeFunction<xlinkNodeDetectFuncFunction>>;
typedef xlinkNodeDetectFuncFunction = ffi.Void Function(
    ffi.Pointer<ffi.Void> ctx, xmlNodePtr node);
typedef DartxlinkNodeDetectFuncFunction = void Function(
    ffi.Pointer<ffi.Void> ctx, xmlNodePtr node);
typedef xlinkHandlerPtr = ffi.Pointer<xlinkHandler>;

/// This is the structure containing a set of Links detection callbacks.
///
/// There is no default xlink callbacks, if one want to get link
/// recognition activated, those call backs must be provided before parsing.
typedef xlinkHandler = _xlinkHandler;

/// xmlParserInputBufferCreateFilenameFunc:
/// @URI: the URI to read from
/// @enc: the requested source encoding
///
/// Signature for the function doing the lookup for a suitable input method
/// corresponding to an URI.
///
/// Returns the new xmlParserInputBufferPtr in case of success or NULL if no
/// method was found.
typedef xmlParserInputBufferCreateFilenameFunc = ffi.Pointer<
    ffi.NativeFunction<xmlParserInputBufferCreateFilenameFuncFunction>>;
typedef xmlParserInputBufferCreateFilenameFuncFunction = xmlParserInputBufferPtr
    Function(ffi.Pointer<ffi.Char> URI, ffi.Int32 enc);
typedef DartxmlParserInputBufferCreateFilenameFuncFunction
    = xmlParserInputBufferPtr Function(ffi.Pointer<ffi.Char> URI, int enc);

/// xmlOutputBufferCreateFilenameFunc:
/// @URI: the URI to write to
/// @enc: the requested target encoding
///
/// Signature for the function doing the lookup for a suitable output method
/// corresponding to an URI.
///
/// Returns the new xmlOutputBufferPtr in case of success or NULL if no
/// method was found.
typedef xmlOutputBufferCreateFilenameFunc = ffi
    .Pointer<ffi.NativeFunction<xmlOutputBufferCreateFilenameFuncFunction>>;
typedef xmlOutputBufferCreateFilenameFuncFunction = xmlOutputBufferPtr Function(
    ffi.Pointer<ffi.Char> URI,
    xmlCharEncodingHandlerPtr encoder,
    ffi.Int compression);
typedef DartxmlOutputBufferCreateFilenameFuncFunction
    = xmlOutputBufferPtr Function(ffi.Pointer<ffi.Char> URI,
        xmlCharEncodingHandlerPtr encoder, int compression);

final class _xmlGlobalState extends ffi.Struct {
  external ffi.Pointer<ffi.Char> xmlParserVersion;

  external xmlSAXLocator xmlDefaultSAXLocator;

  external xmlSAXHandlerV1 xmlDefaultSAXHandler;

  external xmlSAXHandlerV1 docbDefaultSAXHandler;

  external xmlSAXHandlerV1 htmlDefaultSAXHandler;

  external xmlFreeFunc xmlFree;

  external xmlMallocFunc xmlMalloc;

  external xmlStrdupFunc xmlMemStrdup;

  external xmlReallocFunc xmlRealloc;

  external xmlGenericErrorFunc xmlGenericError;

  external xmlStructuredErrorFunc xmlStructuredError;

  external ffi.Pointer<ffi.Void> xmlGenericErrorContext;

  @ffi.Int()
  external int oldXMLWDcompatibility;

  @ffi.Int32()
  external int xmlBufferAllocScheme;

  @ffi.Int()
  external int xmlDefaultBufferSize;

  @ffi.Int()
  external int xmlSubstituteEntitiesDefaultValue;

  @ffi.Int()
  external int xmlDoValidityCheckingDefaultValue;

  @ffi.Int()
  external int xmlGetWarningsDefaultValue;

  @ffi.Int()
  external int xmlKeepBlanksDefaultValue;

  @ffi.Int()
  external int xmlLineNumbersDefaultValue;

  @ffi.Int()
  external int xmlLoadExtDtdDefaultValue;

  @ffi.Int()
  external int xmlParserDebugEntities;

  @ffi.Int()
  external int xmlPedanticParserDefaultValue;

  @ffi.Int()
  external int xmlSaveNoEmptyTags;

  @ffi.Int()
  external int xmlIndentTreeOutput;

  external ffi.Pointer<ffi.Char> xmlTreeIndentString;

  external xmlRegisterNodeFunc xmlRegisterNodeDefaultValue;

  external xmlDeregisterNodeFunc xmlDeregisterNodeDefaultValue;

  external xmlMallocFunc xmlMallocAtomic;

  external xmlError xmlLastError;

  external xmlParserInputBufferCreateFilenameFunc
      xmlParserInputBufferCreateFilenameValue;

  external xmlOutputBufferCreateFilenameFunc xmlOutputBufferCreateFilenameValue;

  external ffi.Pointer<ffi.Void> xmlStructuredErrorContext;
}

typedef xmlSAXHandlerV1 = _xmlSAXHandlerV1;

/// xmlRegisterNodeFunc:
/// @node: the current node
///
/// Signature for the registration callback of a created node
typedef xmlRegisterNodeFunc
    = ffi.Pointer<ffi.NativeFunction<xmlRegisterNodeFuncFunction>>;
typedef xmlRegisterNodeFuncFunction = ffi.Void Function(xmlNodePtr node);
typedef DartxmlRegisterNodeFuncFunction = void Function(xmlNodePtr node);

/// xmlDeregisterNodeFunc:
/// @node: the current node
///
/// Signature for the deregistration callback of a discarded node
typedef xmlDeregisterNodeFunc
    = ffi.Pointer<ffi.NativeFunction<xmlDeregisterNodeFuncFunction>>;
typedef xmlDeregisterNodeFuncFunction = ffi.Void Function(xmlNodePtr node);
typedef DartxmlDeregisterNodeFuncFunction = void Function(xmlNodePtr node);
typedef xmlGlobalStatePtr = ffi.Pointer<xmlGlobalState>;
typedef xmlGlobalState = _xmlGlobalState;
typedef xmlMutexPtr = ffi.Pointer<xmlMutex>;
typedef xmlMutex = _xmlMutex;
typedef xmlRMutexPtr = ffi.Pointer<xmlRMutex>;
typedef xmlRMutex = _xmlRMutex;

final class _xmlRelaxNG extends ffi.Opaque {}

final class _xmlRelaxNGParserCtxt extends ffi.Opaque {}

final class _xmlRelaxNGValidCtxt extends ffi.Opaque {}

abstract class xmlRelaxNGValidErr {
  static const int XML_RELAXNG_OK = 0;
  static const int XML_RELAXNG_ERR_MEMORY = 1;
  static const int XML_RELAXNG_ERR_TYPE = 2;
  static const int XML_RELAXNG_ERR_TYPEVAL = 3;
  static const int XML_RELAXNG_ERR_DUPID = 4;
  static const int XML_RELAXNG_ERR_TYPECMP = 5;
  static const int XML_RELAXNG_ERR_NOSTATE = 6;
  static const int XML_RELAXNG_ERR_NODEFINE = 7;
  static const int XML_RELAXNG_ERR_LISTEXTRA = 8;
  static const int XML_RELAXNG_ERR_LISTEMPTY = 9;
  static const int XML_RELAXNG_ERR_INTERNODATA = 10;
  static const int XML_RELAXNG_ERR_INTERSEQ = 11;
  static const int XML_RELAXNG_ERR_INTEREXTRA = 12;
  static const int XML_RELAXNG_ERR_ELEMNAME = 13;
  static const int XML_RELAXNG_ERR_ATTRNAME = 14;
  static const int XML_RELAXNG_ERR_ELEMNONS = 15;
  static const int XML_RELAXNG_ERR_ATTRNONS = 16;
  static const int XML_RELAXNG_ERR_ELEMWRONGNS = 17;
  static const int XML_RELAXNG_ERR_ATTRWRONGNS = 18;
  static const int XML_RELAXNG_ERR_ELEMEXTRANS = 19;
  static const int XML_RELAXNG_ERR_ATTREXTRANS = 20;
  static const int XML_RELAXNG_ERR_ELEMNOTEMPTY = 21;
  static const int XML_RELAXNG_ERR_NOELEM = 22;
  static const int XML_RELAXNG_ERR_NOTELEM = 23;
  static const int XML_RELAXNG_ERR_ATTRVALID = 24;
  static const int XML_RELAXNG_ERR_CONTENTVALID = 25;
  static const int XML_RELAXNG_ERR_EXTRACONTENT = 26;
  static const int XML_RELAXNG_ERR_INVALIDATTR = 27;
  static const int XML_RELAXNG_ERR_DATAELEM = 28;
  static const int XML_RELAXNG_ERR_VALELEM = 29;
  static const int XML_RELAXNG_ERR_LISTELEM = 30;
  static const int XML_RELAXNG_ERR_DATATYPE = 31;
  static const int XML_RELAXNG_ERR_VALUE = 32;
  static const int XML_RELAXNG_ERR_LIST = 33;
  static const int XML_RELAXNG_ERR_NOGRAMMAR = 34;
  static const int XML_RELAXNG_ERR_EXTRADATA = 35;
  static const int XML_RELAXNG_ERR_LACKDATA = 36;
  static const int XML_RELAXNG_ERR_INTERNAL = 37;
  static const int XML_RELAXNG_ERR_ELEMWRONG = 38;
  static const int XML_RELAXNG_ERR_TEXTWRONG = 39;
}

abstract class xmlRelaxNGParserFlag {
  static const int XML_RELAXNGP_NONE = 0;
  static const int XML_RELAXNGP_FREE_DOC = 1;
  static const int XML_RELAXNGP_CRNG = 2;
}

typedef xmlRelaxNGParserCtxtPtr = ffi.Pointer<xmlRelaxNGParserCtxt>;

/// A schemas validation context
typedef xmlRelaxNGParserCtxt = _xmlRelaxNGParserCtxt;

/// xmlRelaxNGValidityErrorFunc:
/// @ctx: the validation context
/// @msg: the message
/// @...: extra arguments
///
/// Signature of an error callback from a Relax-NG validation
typedef xmlRelaxNGValidityErrorFunc
    = ffi.Pointer<ffi.NativeFunction<xmlRelaxNGValidityErrorFuncFunction>>;
typedef xmlRelaxNGValidityErrorFuncFunction = ffi.Void Function(
    ffi.Pointer<ffi.Void> ctx, ffi.Pointer<ffi.Char> msg);
typedef DartxmlRelaxNGValidityErrorFuncFunction = void Function(
    ffi.Pointer<ffi.Void> ctx, ffi.Pointer<ffi.Char> msg);

/// xmlRelaxNGValidityWarningFunc:
/// @ctx: the validation context
/// @msg: the message
/// @...: extra arguments
///
/// Signature of a warning callback from a Relax-NG validation
typedef xmlRelaxNGValidityWarningFunc
    = ffi.Pointer<ffi.NativeFunction<xmlRelaxNGValidityWarningFuncFunction>>;
typedef xmlRelaxNGValidityWarningFuncFunction = ffi.Void Function(
    ffi.Pointer<ffi.Void> ctx, ffi.Pointer<ffi.Char> msg);
typedef DartxmlRelaxNGValidityWarningFuncFunction = void Function(
    ffi.Pointer<ffi.Void> ctx, ffi.Pointer<ffi.Char> msg);
typedef xmlRelaxNGPtr = ffi.Pointer<xmlRelaxNG>;
typedef xmlRelaxNG = _xmlRelaxNG;
typedef xmlRelaxNGValidCtxtPtr = ffi.Pointer<xmlRelaxNGValidCtxt>;
typedef xmlRelaxNGValidCtxt = _xmlRelaxNGValidCtxt;

/// This error codes are obsolete; not used any more.
abstract class xmlSchemaValidError {
  static const int XML_SCHEMAS_ERR_OK = 0;
  static const int XML_SCHEMAS_ERR_NOROOT = 1;
  static const int XML_SCHEMAS_ERR_UNDECLAREDELEM = 2;
  static const int XML_SCHEMAS_ERR_NOTTOPLEVEL = 3;
  static const int XML_SCHEMAS_ERR_MISSING = 4;
  static const int XML_SCHEMAS_ERR_WRONGELEM = 5;
  static const int XML_SCHEMAS_ERR_NOTYPE = 6;
  static const int XML_SCHEMAS_ERR_NOROLLBACK = 7;
  static const int XML_SCHEMAS_ERR_ISABSTRACT = 8;
  static const int XML_SCHEMAS_ERR_NOTEMPTY = 9;
  static const int XML_SCHEMAS_ERR_ELEMCONT = 10;
  static const int XML_SCHEMAS_ERR_HAVEDEFAULT = 11;
  static const int XML_SCHEMAS_ERR_NOTNILLABLE = 12;
  static const int XML_SCHEMAS_ERR_EXTRACONTENT = 13;
  static const int XML_SCHEMAS_ERR_INVALIDATTR = 14;
  static const int XML_SCHEMAS_ERR_INVALIDELEM = 15;
  static const int XML_SCHEMAS_ERR_NOTDETERMINIST = 16;
  static const int XML_SCHEMAS_ERR_CONSTRUCT = 17;
  static const int XML_SCHEMAS_ERR_INTERNAL = 18;
  static const int XML_SCHEMAS_ERR_NOTSIMPLE = 19;
  static const int XML_SCHEMAS_ERR_ATTRUNKNOWN = 20;
  static const int XML_SCHEMAS_ERR_ATTRINVALID = 21;
  static const int XML_SCHEMAS_ERR_VALUE = 22;
  static const int XML_SCHEMAS_ERR_FACET = 23;
  static const int XML_SCHEMAS_ERR_ = 24;
  static const int XML_SCHEMAS_ERR_XXX = 25;
}

/// xmlSchemaValidOption:
///
/// This is the set of XML Schema validation options.
abstract class xmlSchemaValidOption {
  static const int XML_SCHEMA_VAL_VC_I_CREATE = 1;
}

final class _xmlSchema extends ffi.Opaque {}

final class _xmlSchemaParserCtxt extends ffi.Opaque {}

final class _xmlSchemaValidCtxt extends ffi.Opaque {}

typedef xmlSchemaParserCtxtPtr = ffi.Pointer<xmlSchemaParserCtxt>;

/// A schemas validation context
typedef xmlSchemaParserCtxt = _xmlSchemaParserCtxt;

/// xmlSchemaValidityErrorFunc:
/// @ctx: the validation context
/// @msg: the message
/// @...: extra arguments
///
/// Signature of an error callback from an XSD validation
typedef xmlSchemaValidityErrorFunc
    = ffi.Pointer<ffi.NativeFunction<xmlSchemaValidityErrorFuncFunction>>;
typedef xmlSchemaValidityErrorFuncFunction = ffi.Void Function(
    ffi.Pointer<ffi.Void> ctx, ffi.Pointer<ffi.Char> msg);
typedef DartxmlSchemaValidityErrorFuncFunction = void Function(
    ffi.Pointer<ffi.Void> ctx, ffi.Pointer<ffi.Char> msg);

/// xmlSchemaValidityWarningFunc:
/// @ctx: the validation context
/// @msg: the message
/// @...: extra arguments
///
/// Signature of a warning callback from an XSD validation
typedef xmlSchemaValidityWarningFunc
    = ffi.Pointer<ffi.NativeFunction<xmlSchemaValidityWarningFuncFunction>>;
typedef xmlSchemaValidityWarningFuncFunction = ffi.Void Function(
    ffi.Pointer<ffi.Void> ctx, ffi.Pointer<ffi.Char> msg);
typedef DartxmlSchemaValidityWarningFuncFunction = void Function(
    ffi.Pointer<ffi.Void> ctx, ffi.Pointer<ffi.Char> msg);
typedef xmlSchemaValidCtxtPtr = ffi.Pointer<xmlSchemaValidCtxt>;
typedef xmlSchemaValidCtxt = _xmlSchemaValidCtxt;
typedef xmlSchemaPtr = ffi.Pointer<xmlSchema>;

/// The schemas related types are kept internal
typedef xmlSchema = _xmlSchema;

final class _xmlSchemaSAXPlug extends ffi.Opaque {}

typedef xmlSchemaSAXPlugPtr = ffi.Pointer<xmlSchemaSAXPlugStruct>;
typedef xmlSchemaSAXPlugStruct = _xmlSchemaSAXPlug;

/// xmlSchemaValidityLocatorFunc:
/// @ctx: user provided context
/// @file: returned file information
/// @line: returned line information
///
/// A schemas validation locator, a callback called by the validator.
/// This is used when file or node information are not available
/// to find out what file and line number are affected
///
/// Returns: 0 in case of success and -1 in case of error
typedef xmlSchemaValidityLocatorFunc
    = ffi.Pointer<ffi.NativeFunction<xmlSchemaValidityLocatorFuncFunction>>;
typedef xmlSchemaValidityLocatorFuncFunction = ffi.Int Function(
    ffi.Pointer<ffi.Void> ctx,
    ffi.Pointer<ffi.Pointer<ffi.Char>> file,
    ffi.Pointer<ffi.UnsignedLong> line);
typedef DartxmlSchemaValidityLocatorFuncFunction = int Function(
    ffi.Pointer<ffi.Void> ctx,
    ffi.Pointer<ffi.Pointer<ffi.Char>> file,
    ffi.Pointer<ffi.UnsignedLong> line);

/// xmlParserSeverities:
///
/// How severe an error callback is when the per-reader error callback API
/// is used.
abstract class xmlParserSeverities {
  static const int XML_PARSER_SEVERITY_VALIDITY_WARNING = 1;
  static const int XML_PARSER_SEVERITY_VALIDITY_ERROR = 2;
  static const int XML_PARSER_SEVERITY_WARNING = 3;
  static const int XML_PARSER_SEVERITY_ERROR = 4;
}

/// xmlTextReaderMode:
///
/// Internal state values for the reader.
abstract class xmlTextReaderMode {
  static const int XML_TEXTREADER_MODE_INITIAL = 0;
  static const int XML_TEXTREADER_MODE_INTERACTIVE = 1;
  static const int XML_TEXTREADER_MODE_ERROR = 2;
  static const int XML_TEXTREADER_MODE_EOF = 3;
  static const int XML_TEXTREADER_MODE_CLOSED = 4;
  static const int XML_TEXTREADER_MODE_READING = 5;
}

/// xmlParserProperties:
///
/// Some common options to use with xmlTextReaderSetParserProp, but it
/// is better to use xmlParserOption and the xmlReaderNewxxx and
/// xmlReaderForxxx APIs now.
abstract class xmlParserProperties {
  static const int XML_PARSER_LOADDTD = 1;
  static const int XML_PARSER_DEFAULTATTRS = 2;
  static const int XML_PARSER_VALIDATE = 3;
  static const int XML_PARSER_SUBST_ENTITIES = 4;
}

/// xmlReaderTypes:
///
/// Predefined constants for the different types of nodes.
abstract class xmlReaderTypes {
  static const int XML_READER_TYPE_NONE = 0;
  static const int XML_READER_TYPE_ELEMENT = 1;
  static const int XML_READER_TYPE_ATTRIBUTE = 2;
  static const int XML_READER_TYPE_TEXT = 3;
  static const int XML_READER_TYPE_CDATA = 4;
  static const int XML_READER_TYPE_ENTITY_REFERENCE = 5;
  static const int XML_READER_TYPE_ENTITY = 6;
  static const int XML_READER_TYPE_PROCESSING_INSTRUCTION = 7;
  static const int XML_READER_TYPE_COMMENT = 8;
  static const int XML_READER_TYPE_DOCUMENT = 9;
  static const int XML_READER_TYPE_DOCUMENT_TYPE = 10;
  static const int XML_READER_TYPE_DOCUMENT_FRAGMENT = 11;
  static const int XML_READER_TYPE_NOTATION = 12;
  static const int XML_READER_TYPE_WHITESPACE = 13;
  static const int XML_READER_TYPE_SIGNIFICANT_WHITESPACE = 14;
  static const int XML_READER_TYPE_END_ELEMENT = 15;
  static const int XML_READER_TYPE_END_ENTITY = 16;
  static const int XML_READER_TYPE_XML_DECLARATION = 17;
}

final class _xmlTextReader extends ffi.Opaque {}

/// xmlTextReaderPtr:
///
/// Pointer to an xmlReader context.
typedef xmlTextReaderPtr = ffi.Pointer<xmlTextReader>;

/// xmlTextReader:
///
/// Structure for an xmlReader context.
typedef xmlTextReader = _xmlTextReader;
typedef xmlTextReaderLocatorPtr = ffi.Pointer<ffi.Void>;

/// xmlTextReaderErrorFunc:
/// @arg: the user argument
/// @msg: the message
/// @severity: the severity of the error
/// @locator: a locator indicating where the error occurred
///
/// Signature of an error callback from a reader parser
typedef xmlTextReaderErrorFunc
    = ffi.Pointer<ffi.NativeFunction<xmlTextReaderErrorFuncFunction>>;
typedef xmlTextReaderErrorFuncFunction = ffi.Void Function(
    ffi.Pointer<ffi.Void> arg,
    ffi.Pointer<ffi.Char> msg,
    ffi.Int32 severity,
    xmlTextReaderLocatorPtr locator);
typedef DartxmlTextReaderErrorFuncFunction = void Function(
    ffi.Pointer<ffi.Void> arg,
    ffi.Pointer<ffi.Char> msg,
    int severity,
    xmlTextReaderLocatorPtr locator);

final class _xmlTextWriter extends ffi.Opaque {}

typedef xmlTextWriterPtr = ffi.Pointer<xmlTextWriter>;
typedef xmlTextWriter = _xmlTextWriter;

const String LIBXML_DOTTED_VERSION = '2.9.13';

const int LIBXML_VERSION = 20913;

const String LIBXML_VERSION_STRING = '20913';

const String LIBXML_VERSION_EXTRA = '';

const String LIBXML_MODULE_EXTENSION = '.so';

const int BASE_BUFFER_SIZE = 4096;

const int XML_LOCAL_NAMESPACE = 18;

const String XML_DEFAULT_VERSION = '1.0';

const int XML_DETECT_IDS = 2;

const int XML_COMPLETE_ATTRS = 4;

const int XML_SKIP_IDS = 8;

const int XML_SAX2_MAGIC = 3740122799;

const int ICU_PIVOT_BUF_SIZE = 1024;
